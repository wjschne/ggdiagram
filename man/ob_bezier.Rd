% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bezier.R
\name{ob_bezier}
\alias{ob_bezier}
\title{The ob_bezier (i.e., bezier curve) class}
\usage{
ob_bezier(
  p = class_missing,
  label = class_missing,
  label_sloped = TRUE,
  n = 360,
  alpha = class_missing,
  arrow_head = class_missing,
  arrow_fins = class_missing,
  arrowhead_length = class_missing,
  length_head = class_missing,
  length_fins = class_missing,
  color = class_missing,
  fill = class_missing,
  lineend = class_missing,
  linejoin = class_missing,
  linewidth = class_missing,
  linewidth_fins = class_missing,
  linewidth_head = class_missing,
  linetype = class_missing,
  resect = class_missing,
  resect_fins = class_missing,
  resect_head = class_missing,
  stroke_color = class_missing,
  stroke_width = class_missing,
  style = class_missing,
  ...
)
}
\arguments{
\item{p}{ob_point or list of ob_points}

\item{label}{A character, angle, or label object}

\item{label_sloped}{A logical value indicating whether the label should be sloped with the curve}

\item{n}{Number of points in a polygon, circle, arc, or ellipse}

\item{alpha}{numeric value for alpha transparency}

\item{arrow_head}{A 2-column matrix of polygon points}

\item{arrow_fins}{A 2-column matrix of polygon points}

\item{arrowhead_length}{Determines the size of the arrow ornaments. This parameter becomes the \code{length} parameter in ggarrow functions. Numeric values set the ornament size relative to the linewidth. A unit value sets the ornament size in an absolute manner.}

\item{length_head}{Determines the size of the arrow head. Numeric values set the ornament size relative to the linewidth. A unit value sets the ornament size in an absolute manner. From ggarrow.}

\item{length_fins}{Determines the size of the arrow fins. Numeric values set the ornament size relative to the linewidth. A unit value sets the ornament size in an absolute manner. From ggarrow.}

\item{color}{character string for color}

\item{fill}{character string for fill color}

\item{lineend}{Line end style (round, butt, square).}

\item{linejoin}{Line join style (round, mitre, bevel).}

\item{linewidth}{Width of lines}

\item{linewidth_fins}{Line width for arrow fins}

\item{linewidth_head}{Line width for arrow fins}

\item{linetype}{type of lines}

\item{resect}{A numeric(1) denoting millimeters or \if{html}{\out{<unit>}} to shorten the arrow head and fins.}

\item{resect_fins}{A numeric(1) denoting millimeters or \if{html}{\out{<unit>}} to shorten the arrow fins}

\item{resect_head}{A numeric(1) denoting millimeters or \if{html}{\out{<unit>}} to shorten the arrow head.}

\item{stroke_color}{Color of point border line}

\item{stroke_width}{Stroke width in arrows}

\item{style}{Gets and sets the styles associated with ob_beziers}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}>  properties passed to style}
}
\description{
The ob_bezier is specified with an ob_point object that contains at least 2 points, the start and the end. Such a "curve" would actually be a straight line segment. If three points are specified, the middle point is a control point, and a quadratic bezier curve will result. Higher-order bezier curves can be created by having more control points in the middle.
}
\details{
If you wish to specify multiple bezier curves, you must supply a list of ob_point objects. When plotted, the ob_bezier function uses the bezier::bezier function to create the point coordinates of the curve and the ggarrow::geom_arrow function to create the geom.
}
\section{Slots}{

\describe{
\item{\code{length}}{The number of curves in the ob_bezier object}

\item{\code{tibble}}{Gets a tibble (data.frame) containing parameters and styles used by \code{ggarrow::geom_arrow}.}

\item{\code{geom}}{A function that converts the object to a geom. Any additional parameters are passed to \code{ggarrow::geom_arrow}.}

\item{\code{midpoint}}{A function that selects 1 or more midpoints of the ob_bezier. The \code{position} argument can be between 0 and 1. Additional arguments are passed to the ob_point's style object.}

\item{\code{aesthetics}}{A list of information about the ob_bezier's aesthetic properties}
}}

\examples{
library(ggplot2)
control_points <- ob_point(c(0,1,2,4), c(0,4,0,0))
ggplot() + coord_equal() +
  ob_bezier(control_points, color = "blue") +
  ob_path(control_points, linetype = "dashed", linewidth = .5) +
  control_points
}
