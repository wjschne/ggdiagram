{
  "hash": "cb58aa0327665c8c0488a23fcc19add1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Circles\"\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#>'\nformat: \n  html:\n    toc: true\nvignette: >\n  %\\VignetteIndexEntry{angles}\n  %\\VignetteEngine{quarto::html}\n  %\\VignetteEncoding{UTF-8}\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdiagram)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggtext)\nlibrary(ggarrow)\nmy_font <- \"Roboto Condensed\"\n```\n:::\n\n\n\n\n## Base plot\n\nTo avoid repetitive code, we make a base plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_font <- \"Roboto Condensed\"\nmy_text_size <- 20\nmy_point_size <- 2.5\n# my_colors <- viridis::viridis(2, begin = .25, end = .5)\nmy_colors <- c(\"#3B528B\", \"#21908C\")\nupdate_geom_defaults(geom = \"richtext\", \n                     new = list(family = my_font, \n                                size = .8 * my_text_size / ggplot2::.pt))\n\nupdate_geom_defaults(\"point\", list(size = my_point_size))\n\n\ntheme_set(\n  theme_minimal(\n    base_size = my_text_size, \n    base_family = my_font) +\n    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))\n\n\n\n\nbp <- ggplot() +\n  coord_equal() +\n  scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +\n  scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +\n  theme_minimal(base_size = 16) +\n  theme(\n    axis.title.x =  element_text(face = \"italic\"),\n    axis.title.y = element_text(\n      face = \"italic\",\n      angle = 0,\n      hjust = .5,\n      vjust = .5\n    )\n  )\n```\n:::\n\n\n\n# Specifying a Circle\n\nCircles can be specified by a point at the circle's center (*x*~0~, *y*~0~) and a radius *r* (the distance from the center to the circle's edge).\n\n$$\n(x-x_0)^2+(y-y_0)^2=r^2\n$$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- point(0,0)\nr <- 3\nc1 <-  circle(center = p, radius = 3)\nc1\n#> <circle>\n#> @ center: <point>\n#>  @ x: num 0\n#>  @ y: num 0\n#> @ radius: num 3\n#> Other props: label, alpha, color, fill, linewidth,\n#>              linetype, n, area, circumference,\n#>              diameter, length, style, tibble,\n#>              geom, angle_at, tangent_at, point_at,\n#>              aesthetics\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbp +\n  c1 +\n  c1@center@label(vjust = 1.2, plot_point = T) +\n  segment(\n    c1@center,\n    c1@point_at(0),\n    color = my_colors[1],\n    label = label(\"*r* = \"+c1@radius, angle = 0)\n  )\n```\n\n::: {.cell-output-display}\n![A circle can be specified with a center and a radius,](circles_files/figure-html/fig-circle-1.png){#fig-circle width=672}\n:::\n:::\n\n\n\n\n## Point on the circle at a specific angle\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nc1@point_at(degree(60))\n#> <point>\n#> @ x: num 1.5\n#> @ y: num 2.6\n#> Other props: alpha, color, fill, shape, size,\n#>              stroke, auto_label, length, r, theta,\n#>              style, tibble, xy, geom, label,\n#>              aesthetics\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndeg <- degree(60)\n\nbp + \n  c1 +\n  {p45 <- c1@point_at(deg)} +\n  p45@label(hjust = 0, vjust = 0) +\n  segment(c1@center, p45) +\n  arc(radius = 1, start = degree(0), end = deg, label = deg)\n```\n\n::: {.cell-output-display}\n![Point on ellipse that is 45&deg; from the x-axis.](circles_files/figure-html/fig-ptheta-1.png){#fig-ptheta width=672}\n:::\n:::\n\n\n\n\n# Placing circles \n\n## Placing circles next to each other\n\nThe `place` function places an object at a specified direction and distance from another object. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp + \n  {A <- circle(\n    center = point(-2, 0), \n    radius = 1, \n    label = label(\"A\", size = 30))} + \n  place(\n    circle(radius = 1.5,\n           label = label(\"B\", size = 30)),\n    from = A,\n    where = \"right\",\n    sep = 1)\n```\n\n::: {.cell-output-display}\n![Place Circle B one unit to the right of Circle A](circles_files/figure-html/fig-place-1.png){#fig-place width=672}\n:::\n:::\n\n\n\nThe `where` argument can take degrees or named positions: \n\neast, east-northeast, northeast, north-northeast, north, north-northwest, northwest, west-northwest, west, west-southwest, southwest, south-southwest, south, south-southeast, southeast, east-southeast, right, top right, top, top left, left, bottom left, bottom, bottom right\n\nMultiple circles can be created at once with named directions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp + \n  {c3 <- circle(point(0, 0), radius = 1)} + \n  place(circle(radius = .5), \n        from = c3, \n        where = c(\"northwest\", \"northeast\", \"south-southeast\", \"south-southwest\"), \n        sep = 1)\n```\n\n::: {.cell-output-display}\n![Place mutliple circles using named directions](circles_files/figure-html/fig-multplace-1.png){#fig-multplace width=672}\n:::\n:::\n\n\n\nOr with numbers (degrees):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp + \n  c3 + \n  place(circle(radius = .5), c3, where = c(0, 30, -30), sep = 1)\n```\n\n::: {.cell-output-display}\n![Place mutliple circles using degrees](circles_files/figure-html/fig-multdegree-1.png){#fig-multdegree width=672}\n:::\n:::\n\n\n\nWith styles:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp +\n  {c3 <- circle(\n      point(0, 0),\n      radius = 1,\n      color = NA,\n      fill = \"gray35\")} +\n  place(\n    circle(\n      color = NA,\n      fill = class_color(viridis::viridis(6, option = \"D\"))@lighten(.7)@color\n    ),\n    from = c3,\n    where = degree(seq(0, 300, 60)),\n    sep = 1\n  ) \n```\n\n::: {.cell-output-display}\n![Place mutliple circles with styling](circles_files/figure-html/fig-style-1.png){#fig-style width=672}\n:::\n:::\n\n\n\n## Placing circles next to points and points next to circles\n\nThis works the same as placing circles next to each other. Here we create a point in the center, place six circles around it, and then place 12 points around each circle.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp + \n  {p1 <- point(0,0)} +\n  {c1 <- place(x = circle(radius = .5, \n                          fill = viridis::viridis(6), \n                          color = NA), \n        from = p1, \n        where = degree(seq(0,300,60)), \n        sep = 2)} +\n  purrr::map(as.list(c1), \n             \\(x) point(color = x@fill) |> \n               place(from = x, \n                     where = degree(seq(0, 330, 30)), \n                     sep = .5) |> \n               as.geom())\n```\n\n::: {.cell-output-display}\n![](circles_files/figure-html/Place circles around a point, and points around each circle-1.png){width=672}\n:::\n:::\n\n\n\n## Placing lines next to circles\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp +\n  {c1 <- circle()} +\n  place(line(), c1, where = degree(45), sep = 1)\n```\n\n::: {.cell-output-display}\n![Placing a line one unit northeast of a circle](circles_files/figure-html/fig-linecircle-1.png){#fig-linecircle width=672}\n:::\n:::\n\n\n\n\n# Drawing path connectors between circles\n\nLet's make two circles and draw an arrow path between them\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp + \n  {c1 <- circle(point(-2, 2), radius = 1)} + \n  {c2 <- circle(point(1.5,-1.5), radius = 1.5)} +\n  connect(c1, c2)\n```\n\n::: {.cell-output-display}\n![Connect two circles](circles_files/figure-html/fig-connectcircles-1.png){#fig-connectcircles width=672}\n:::\n:::\n\n\n\nThat is fine, but we often need labels and styling to make scientific diagrams. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp +\n  {cthis <- circle(\n    point(-2, 2),\n    radius = 1,\n    fill = my_colors[1],\n    color = NA,\n    label = label(\n      \"This\",\n      color = \"white\",\n      fill = NA,\n      size = 35\n    )\n  )} + \n  {cthat <- circle(\n    point(1.5, -1.5),\n    radius = 1.5,\n    fill = my_colors[2],\n    color = NA,\n    label = label(\n      \"That\",\n      color = \"white\",\n      fill = NA,\n      size = 55\n    )\n  )} +\n  connect(cthis, cthat, \n       resect = 2, \n       label = label(\"Causes\", size = 20, vjust = 0))\n```\n\n::: {.cell-output-display}\n![Connect two circles with labels and styles](circles_files/figure-html/fig-connectcirclesstyles-1.png){#fig-connectcirclesstyles width=672}\n:::\n:::\n\n\n\n# Paths between circles and lines\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp + \n  c1 +\n  {l1 <- line(slope = 2, intercept = -1)} +\n  connect(c1, l1) +\n  {c2 <- place(circle(), c1, \"southeast\", 4)} + \n  connect(l1, c2)\n```\n\n::: {.cell-output-display}\n![Connect a circle to a line and a line to a circle](circles_files/figure-html/fig-connectcircleline-1.png){#fig-connectcircleline width=672}\n:::\n:::\n",
    "supporting": [
      "circles_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}