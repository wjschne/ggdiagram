---
title: "Bézier Curves"
format: 
  html:
    toc: true
    html-math-method: katex
vignette: >
  %\VignetteIndexEntry{beziercurves}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| label: presetup
#| include: false
library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
knitr::opts_chunk$set(
  collapse = TRUE,
  dev = "ragg_png",
  comment = "#>",
  fig.width = 7,
  fig.height = 7
)

```

# Setup

```{r}
#| label: setup
library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
library(geomtextpath)

```

# Base Plot


## Base plot

To avoid repetitive code, we set defaults and make a base plot:

```{r}
#| label: baseplot
my_font <- "Roboto Condensed"
my_font_size <- 20
my_point_size <- 2.5
my_arrowhead <- arrowheadr::arrow_head_deltoid(2.1)
# my_colors <- viridis::viridis(2, begin = .25, end = .5)
my_colors <- c("#3B528B", "#21908C")
update_geom_defaults(geom = "richtext", 
                     new = list(family = my_font, 
                                size = .8 * my_font_size / ggplot2::.pt))

update_geom_defaults("point", list(size = my_point_size))
update_geom_defaults("arrow_segment", list(length_head = 5, 
                                           linewidth = .5))
update_geom_defaults("arrow", list(length_head = 5, 
                                   linewidth = .5))
update_geom_defaults("labelpath", list(family = my_font))

theme_set(
  theme_minimal(
    base_size = my_font_size, 
    base_family = my_font) +
    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))

bp <- ggplot() +
  coord_equal() +
  scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +
  scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +
  theme_minimal(base_size = 16) +
  theme(
    axis.title.x =  element_text(face = "italic"),
    axis.title.y = element_text(
      face = "italic",
      angle = 0,
      hjust = .5,
      vjust = .5
    )
  )
```

# Bézier curves

The `ob_bezier` function creates an object that specifies the control points for a bézier curve. A bézier curve is an extremely useful way of making elegantly curved lines between points.

```{r}
#| label: fig-ob_bezier
#| fig-cap: Bézier curve with contol points
bp + 
  {control_points <- ob_point(
    x = c(-4,4,4), 
    y = c(4,-4, 0))} + 
  ob_path(control_points, linetype = "dashed", linewidth = .25) +
  ob_bezier(control_points)
```

I like to make a list of control points setting the start and end points first. Then I find internal control points by offsetting from the end points---adding or subtracting a point at a specified x and y distance (or angle using the `polar` function).

The `c` function creates a list of all the points, and the `bind` function binds the list into a single point object containing all the points.


```{r}
#| label: fig-bzlabel
#| fig-cap: Bézier curve with contol points and label
# start and end of control points
p_start <- ob_point(-4,-2)
p_end <- ob_point(4, 2)
# Offset ob_point from the endpoints
p_offset <- ob_point(5,6)

# Make list of points and bind them into a single ob_point
p <- c(p_start, 
       p_start + p_offset, 
       p_end - p_offset, 
       p_end) |> 
  bind() 

bp + 
  ob_path(p, 
       linetype = "dashed", 
       color = "gray",
       linewidth = .25) +
  p + 
  ob_bezier(p, 
          label = ob_label("Labels can follow the path of the bézier curve.")) 
```

# Multiple bézier paths

If multiple point objects are supplied as a list (or concatenated with the `c` function), a bézier curve will be created for each point object in the list.

```{r}
#| label: fig-multbz
#| fig-cap: Multiple bézier paths

control_point_list <- c(
      ob_point(
        x = c(-4, -3, 4), 
        y = c(.1,  4, .1), 
        color = my_colors[1]),
      ob_point(
        x = c(-4, 3, 4), 
        y = c(-.1, -4, -.1), 
        color = my_colors[2] )
      )
bp + 
  ob_bezier(control_point_list) +
  ob_path(control_point_list, linetype = "dashed", linewidth = .25) +
  lapply(control_point_list, as.geom)
```



