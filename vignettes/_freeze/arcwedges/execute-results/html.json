{
  "hash": "8dc13eabf25b0817f6de7cdaac8b4f08",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Arcs and Wedges\"\nformat: \n  html:\n    toc: true\n    html-math-method: katex\nvignette: >\n  %\\VignetteIndexEntry{arcwedges}\n  %\\VignetteEngine{quarto::html}\n  %\\VignetteEncoding{UTF-8}\n---\n\n\n\n\n\n# Setup\n\n## Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdiagram)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggtext)\nlibrary(ggarrow)\n```\n:::\n\n\n\n## Base Plot\n\nTo avoid repetitive code, we make a base plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_font <- \"Roboto Condensed\"\nmy_font_size <- 20\nmy_point_size <- 2\nmy_arrowhead <- arrowheadr::arrow_head_deltoid(2.3, n = 101)\n\n# my_colors <- viridis::viridis(2, begin = .25, end = .5)\nmy_colors <- c(\"#3B528B\", \"#21908C\")\n\ntheme_set(\n  theme_minimal(\n    base_size = my_font_size,\n    base_family = my_font) +\n    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))\n\nbp <- ggdiagram(\n  font_family = my_font,\n  font_size = my_font_size,\n  point_size = my_point_size,\n  linewidth = .5,\n  theme_function = theme_minimal,\n  axis.title.x =  element_text(face = \"italic\"),\n  axis.title.y = element_text(\n    face = \"italic\",\n    angle = 0,\n    hjust = .5,\n    vjust = .5)) +\n  scale_x_continuous(labels = signs_centered,\n                     limits = c(-4, 4)) +\n  scale_y_continuous(labels = signs::signs,\n                     limits = c(-4, 4))\n\n```\n:::\n\n\n\n# Arcs\n\nJust as a segment is part of a line between two points on the line, an arc is part of a circle between two points (on the circle). Thus, an arc has all the properties a circle, with the addition of starting and ending points. For the sake of simplicity, these starting points are specified as angles.\n\nArc starting and ending points can be specified with any angle unit. If a number is used, it will be interpreted as a degree unit.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nob_arc(center = ob_point(1,2), \n    start = 25, \n    end = 75, \n    radius = 3)\n#> <ob_arc>\n#> @ center: <ob_point>\n#>  @ x: num 1\n#>  @ y: num 2\n#> @ radius: num 3\n#> @ start : <degree>\n#>  @ degree: num 25\n#> @ end   : <degree>\n#>  @ degree: num 75\n#> @ theta : <degree>\n#>  @ degree: num 50\n#> Other props: label, wedge, alpha, arrow_head, arrow_fins,\n#>              arrowhead_length, length_head, length_fins, color,\n#>              fill, lineend, linejoin, linewidth, linewidth_fins,\n#>              linewidth_head, linetype, n, resect, resect_fins,\n#>              resect_head, stroke_color, stroke_width, apothem,\n#>              arc_length, sagitta, bounding_box, chord, length,\n#>              polygon, style, tibble, geom, angle_at, autolabel,\n#>              midpoint, normal_at, place, point_at, tangent_at,\n#>              aesthetics\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbp +\n  {p1 <- ob_point(0, 0)} + \n  {a1 <- ob_arc(\n    center = p1,\n    radius = {r <- 4},\n    start = {ang_start <- degree(25)},\n    end = {ang_end <- degree(75)}\n    )} +\n  ob_label(\n    label = paste0(\"Center \", p1@auto_label), \n    center = p1, \n    vjust = 1.1) + \n  connect(\n    p1, \n    a1@midpoint(), \n    label = paste0(\"Radius = \", r)) + \n  ob_label(\n    label = ang_start, \n    center = a1@midpoint(0),\n    polar_just = ob_polar(ang_start + degree(-90), 1.3), \n    plot_point = TRUE) +\n  ob_label(\n    label = ang_end, \n    center = a1@midpoint(1), \n    polar_just = ob_polar(ang_end + degree(90), 1), \n    plot_point = TRUE)\n```\n\n::: {.cell-output-display}\n![Arc with starting and ending angles and center point.](arcwedges_files/figure-html/fig_arc-1.png){width=672}\n:::\n:::\n\n\n\n# Starting or ending points of arcs\n\nSometimes you do not know where the center of an arc should be. Instead, you want the arc to start or end at a specific point. For example, you might want to specify the start point or the end point.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\np1 <- ob_point(0, 0)\n\nbp +\n    ob_arc(start = -45, \n      end = 45, \n      radius = 2,\n      color = \"red\", \n      start_point = p1)  +\n  ob_arc(start = -45, \n      end = 45, \n      radius = 2,\n      color = \"blue\", \n      end_point = p1) +\n  p1\n```\n\n::: {.cell-output-display}\n![Fixing the start and end points of an arc](arcwedges_files/figure-html/fig-startpoint-1.png){#fig-startpoint width=672}\n:::\n:::\n\n\n\nAs a example, I used the `start_point` argument to recreate a fun meme about a \"square\" object with 4 equal sides that meet at right angles:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlittle_r <- 1 / (2 * pi - 1)\nggdiagram() +\n  {p1 <- ob_point(0,0)} +\n  {p2 <- ob_point(1,0)} +\n  ob_segment(p1, p2) +\n  {a1 <- ob_arc(start = 0, end = radian(1), radius = 1 + little_r, start_point = p2)} +\n  {p3 <- a1@midpoint(1)} +\n  {p4 <- a1@normal_at(radian(1), distance = -1)} +\n  ob_segment(p3, p4) + \n  ob_arc(start_point = p4, \n         radius = little_r, \n         start = radian(1), \n         end = turn(1))\n```\n\n::: {.cell-output-display}\n![A \"square\" with four equal sizes that meet at right angles.](arcwedges_files/figure-html/fig-square-1.png){#fig-square width=672}\n:::\n:::\n\n\n\n\n\n# Midpoints\n\nThe midpoint function can find one or more midpoints at different positions. The default position is .5.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp +\n  a1 +\n  a1@midpoint()\n```\n\n::: {.cell-output-display}\n![Default midpoint on a arc](arcwedges_files/figure-html/fig-midpoint-1.png){#fig-midpoint width=672}\n:::\n:::\n\n\n\nThe starting and ending points are at position 0 and 1, respectively.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp +\n  a1 +\n  a1@midpoint(position = c(0,1))\n```\n\n::: {.cell-output-display}\n![Multiple midpoints can be specified](arcwedges_files/figure-html/fig-multimidpoints-1.png){#fig-multimidpoints width=672}\n:::\n:::\n\n\n\n# Labelling arcs\n\nBy default, the arc label will appear outside the midpoint of the arc\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp +\n  ob_arc(radius = 3, \n      start = 20, \n      end = 120, \n      label = degree(100)) \n```\n\n::: {.cell-output-display}\n![A labelled arc](arcwedges_files/figure-html/fig-label-1.png){#fig-label width=672}\n:::\n:::\n\n\n\nIf a label is needed elsewhere, it can be set with the `label` function's `position` property.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp +\n  ob_arc(radius = 3, \n      start = 20, \n      end = 120, \n      label = ob_label(c(\"Start\", \"Middle\", \"End\"), \n                    position = c(0,.5, 1), \n                    plot_point = TRUE))\n```\n\n::: {.cell-output-display}\n![Multiple labels on an arc](arcwedges_files/figure-html/fig-labelmultiple-1.png){#fig-labelmultiple width=672}\n:::\n:::\n\n\n\nIf the orientation of the label needs to be changed, it can be set with `vjust`, `hjust`, or `polar_just`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp + \n  ob_arc(radius = 3, \n      start = 20, \n      end = 120,\n      label = ob_label(\"A\", \n                    vjust = 1.2, \n                    hjust = .75))\n```\n\n::: {.cell-output-display}\n![The arc's labels can be adjusted.](arcwedges_files/figure-html/fig-labeladjust-1.png){#fig-labeladjust width=672}\n:::\n:::\n\n\n\nThere are cases where the arc is already created and a label is needed. Although the `label` can be added after the arc has been created, the position would have to be set manually (otherwise the position will be at 0,0 by default). In such cases, the `auto_label` function can help place the label correctly. By default, the `auto_label` will show the the `theta` property (i.e., `end` âˆ’ `start`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp + \n  {a1 <- ob_arc(radius = 3, \n      start = 20, \n      end = 120)} + \n  a1@autolabel()\n```\n\n::: {.cell-output-display}\n![Using the arc's autolabel](arcwedges_files/figure-html/fig-autolabel-1.png){#fig-autolabel width=672}\n:::\n:::\n\n\n\nHowever, any label can be inserted at any position.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp + \n  a1 +\n  a1@autolabel(label = \"Start\", position = 0)\n```\n\n::: {.cell-output-display}\n![Adjusting the arc's autolabel](arcwedges_files/figure-html/fig-autolabeladjust-1.png){#fig-autolabeladjust width=672}\n:::\n:::\n\n\n\n# Arcs with arrows\n\nThe arc object is plotted using `ggarrow::arrow`. This means that arrows can be placed on either end of an arc.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_arrow_head <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)\n\nbp + \n  ob_arc(radius = 3, \n      start = 0, \n      end = 180, \n      arrow_head = my_arrow_head,\n      arrow_fins = my_arrow_head, \n      arrowhead_length = 8)\n```\n\n::: {.cell-output-display}\n![Arcs with arrowheads](arcwedges_files/figure-html/fig-arcarrow-1.png){#fig-arcarrow width=672}\n:::\n:::\n\n\n\n# Wedges\n\nIf the `ob_arc@wedge` property is set to `TRUE`, the `ob_arc` function will plot a wedge using `ggplot2::geom_polygon`. The `ob_wedge` function is a convenient wrapper function for `ob_arc` that sets the `@wedge` property to `TRUE`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheta <- c(0, 120, 180, 360)\nbp +\n  ob_wedge(radius = 3, \n      start = theta[-length(theta)], \n      end = theta[-1], \n      fill = c(\"dodgerblue4\", \"orchid4\", \"darkgreen\"), \n      color = \"white\", \n      linewidth = 1)\n```\n\n::: {.cell-output-display}\n![Arc wedges](arcwedges_files/figure-html/fig-wedge-1.png){#fig-wedge width=672}\n:::\n:::\n",
    "supporting": [
      "arcwedges_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}