{
  "hash": "46937bfcfcb8b3685eb95590a37ea40e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rectangles\"\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#>'\nformat: \n  html:\n    toc: true\nvignette: >\n  %\\VignetteIndexEntry{rectangles}\n  %\\VignetteEngine{quarto::html}\n  %\\VignetteEncoding{UTF-8}\n---\n\n\n\n\n\n# Setup\n\n## Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdiagram)\nlibrary(ggplot2)\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\nlibrary(ggtext)\nlibrary(ggarrow)\nlibrary(arrowheadr)\n\n```\n:::\n\n\n\n## Base Plot\n\nTo avoid repetitive code, we make a base plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nmy_font <- \"Roboto Condensed\"\nmy_font_size <- 20\nmy_point_size <- 2\nmy_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)\n\n# my_colors <- viridis::viridis(2, begin = .25, end = .5)\nmy_colors <- c(\"#3B528B\", \"#21908C\")\n\ntheme_set(\n  theme_minimal(\n    base_size = my_font_size,\n    base_family = my_font) +\n    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))\n\nbp <- ggdiagram(\n  font_family = my_font,\n  font_size = my_font_size,\n  point_size = my_point_size,\n  linewidth = .5,\n  theme_function = theme_minimal,\n  axis.title.x =  element_text(face = \"italic\"),\n  axis.title.y = element_text(\n    face = \"italic\",\n    angle = 0,\n    hjust = .5,\n    vjust = .5)) +\n  scale_x_continuous(labels = signs_centered,\n                     limits = c(-4, 4)) +\n  scale_y_continuous(labels = signs::signs,\n                     limits = c(-4, 4))\n\nmy_colors <- list(\n  primary = class_color(\"royalblue4\"),\n  secondary = class_color(\"firebrick4\"),\n  tertiary = class_color(\"orchid4\"))\n```\n:::\n\n\n\n\n# Specifying a Rectangle\n\nA rectangle has 4 corners (`northeast`, `northwest`, `southwest`, and `southeast`). It has a center. It has width and height. For the purpose of demonstration, we can specify all these features, though in practice not all of them are necessary.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# northeast corner\nne <- ob_point(4,2) \n# northwest corner\nnw <- ob_point(0,2)\n# southwest corner\nsw <- ob_point(0,0)\n# southeast corner\nse <- ob_point(4,0)\n# center point\ncent <- ob_point(2,1)\n# width\nw <- 4\n# height\nh <- 2\n```\n:::\n\n\n\n\nIf you give the `rectangle` function enough information to deduce where its four corners will be, all other features will be calculated. All of the following will give the same rectangle:\n\n## Give width, height, and any point\n\nAn easy way to specify a rectangle is to specify its width and height and any of its points. All the following rectangles are equivalent.\n\n### Center, width, and height\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr1 <- ob_rectangle(\n  width = w,\n  height = h,\n  center = cent,\n  color = my_colors$primary,\n  fill = my_colors$primary@transparentize(.15),\n  linewidth = 1\n)\nr1\n#> <ob_rectangle>\n#> @ center: <ob_point>\n#>  @ x: num 2\n#>  @ y: num 1\n#> @ width : num 4\n#> @ height: num 2\n#> Other props: label, angle, vertex_radius, alpha, color, fill,\n#>              linewidth, linetype, area, bounding_box, perimeter,\n#>              northeast, northwest, southwest, southeast, east,\n#>              north, west, south, side, length, style, tibble, geom,\n#>              normal_at, place, point_at, aesthetics\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndouble_arrowstyle <- ob_style(\n  arrow_head = arrow_head_deltoid(),\n  arrow_fins = arrow_head_deltoid(),\n  color = my_colors$secondar\n)\n\ns_east <- r1@side@east@nudge(x = .1)\ns_east@style <- double_arrowstyle\n\ns_north <- r1@side@north@nudge(y = .1)\ns_north@style <- double_arrowstyle\n\nrc_plot <- ggplot() +\n  coord_equal(ylim = c(0, 2.2)) +\n  scale_y_continuous(breaks = -10:10) +\n  r1\n\nrc_center <- list(\n  r1@center,\n  r1@center@label(\n    fill = my_colors$primary@lighten(.15), \n    vjust = -.15)) |>\n  bind()\n\nrc_width <- s_north |> \n  set_props(label = ob_label(\n    label = paste0(\"Width = \", r1@width),\n    center = midpoint(s_north),\n    color = my_colors$secondary,\n    vjust = 0,\n    label.margin = ggplot2::margin(2, 2, 2, 2, \"pt\")\n  ))\n\nrc_height <- s_east |> \n  set_props(label = ob_label(\n    label = paste0(\"Height = \", r1@height),\n    center  = midpoint(s_east),\n    vjust = 0,\n    color = my_colors$secondary,\n    angle = -90))\n\n\nrc_nw <- r1@northwest@label(\n  plot_point = T,\n  vjust = 1.1,\n  hjust = 0,\n  fill = my_colors$primary@lighten(.15)\n)\n\nrc_ne <- r1@northeast@label(\n  plot_point = T,\n  vjust = 1.1,\n  hjust = 1,\n  fill = my_colors$primary@lighten(.15)\n)\n\nrc_sw <- r1@southwest@label(\n  plot_point = T,\n  vjust = -.1,\n  hjust = 0,\n  fill = my_colors$primary@lighten(.15)\n)\n\nrc_se <- r1@southeast@label(\n  plot_point = T,\n  vjust = -.1,\n  hjust = 1,\n  fill = my_colors$primary@lighten(.15)\n)\n\nrc_plot + rc_center + rc_width + rc_height\n```\n\n::: {.cell-output-display}\n![Center, Width, and Height](rectangles_files/figure-html/fig-angles-1.png){#fig-angles width=768}\n:::\n:::\n\n\n\n### Northeast corner, width, and height\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr1 == ob_rectangle(width = w,\n                height = h,\n                northeast = ne)\n#> [1] TRUE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nrc_plot + rc_width + rc_height + rc_ne\n```\n\n::: {.cell-output-display}\n![Specify a rectangle with height, width, and the northeast corner](rectangles_files/figure-html/fig-hw_ne-1.png){#fig-hw_ne width=672}\n:::\n:::\n\n\n\n## Give the center and any of the 4 corners\n\nA rectangle can be specified with the center and any other corner. The following rectangles are equivalent.\n\nFor example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr1 == ob_rectangle(center = cent, \n                northeast = ne)\n#> [1] TRUE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nrc_plot + rc_center + rc_ne\n```\n\n::: {.cell-output-display}\n![Specify a rectangle with the center and the northeast corner](rectangles_files/figure-html/fig-center_ne-1.png){#fig-center_ne width=672}\n:::\n:::\n\n\n\n\n\n\n## Give opposite corners\n\nA rectangle can be specified with points from opposite corners. These rectangles are equivalent.\n\nFor example,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr1 == ob_rectangle(\n  northeast = ne, \n  southwest = sw)\n#> [1] TRUE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nrc_plot + rc_sw + rc_ne\n```\n\n::: {.cell-output-display}\n![Specify a rectangle with the northeast and southwest corners](rectangles_files/figure-html/fig-ne_sw-1.png){#fig-ne_sw width=672}\n:::\n:::\n\n\n\n\n\n## Give width and two points on either side\n\nA rectangle can be specified with the width and 2 points from the left or right side. These rectangles are equivalent.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr1 == ob_rectangle(width = w,\n                northwest = nw,\n                southwest = sw)\n#> [1] TRUE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nrc_plot + rc_width + rc_nw + rc_sw\n```\n\n::: {.cell-output-display}\n![Specify a rectangle with the width and the left corners](rectangles_files/figure-html/fig-w_nw_sw-1.png){#fig-w_nw_sw width=672}\n:::\n:::\n\n\n\n\n\n## Give height and two points on top or bottom\n\nA rectangle can be specified with the height and 2 points from the top or bottom side. These rectangles are equivalent.\n\nFor example,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr1 == ob_rectangle(height = h,\n                northwest = nw,\n                northeast = ne)\n#> [1] TRUE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nrc_plot + rc_height + rc_ne + rc_nw\n```\n\n::: {.cell-output-display}\n![Specify a rectangle with the height and the top corners](rectangles_files/figure-html/fig-h_ne_nw-1.png){#fig-h_ne_nw width=672}\n:::\n:::\n\n\n\n\n\n# Rectangle points\n\nThe corners and side midpoints can be extracted. Here is the north point (i.e., the midpoint of the north side):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr1@north\n#> <ob_point>\n#> @ x: num 2\n#> @ y: num 2\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, length, r, theta, style, tibble, xy,\n#>              geom, label, place, aesthetics\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nrc_plot +\n  purrr::map(\n    c(\n      \"east\",\n      \"north\",\n      \"west\",\n      \"south\",\n      \"northeast\",\n      \"northwest\",\n      \"southeast\",\n      \"southwest\",\n      \"center\"\n    ),\n    \\(x) {\n      v <- ifelse(grepl(x = x, \"north\"),\n        1.1,\n        ifelse(grepl(x = x, \"south|center\"), \n               -.1, \n               .5))\n      h <- ifelse(grepl(x = x, \"east\"),\n                  1.1,\n                  ifelse(grepl(x = x, \"west\"), -.1, .5))\n      c(\n        as.geom(\n          prop(r1, x)@label(\n            label = x,\n            hjust = h,\n            vjust = v,\n            fill = my_colors$primary@lighten(.15)\n          )\n        ),\n        as.geom(\n          prop(r1, x)@label(hjust = 1 - h, vjust = 1 - v),\n          fill = ifelse(x == \"center\", \n                        my_colors$primary@lighten(.15), \n                        \"white\")\n        ),\n        as.geom(prop(r1, x))\n      )\n    }\n  ) +\n  coord_equal(xlim = c(-.25, 4.25), ylim = c(-.25, 2.25))\n  \n\n```\n\n::: {.cell-output-display}\n![The named points of a rectangle](rectangles_files/figure-html/fig-points-1.png){#fig-points width=672}\n:::\n:::\n\n\n\nPoints at any angle\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheta <- degree(60)\nr1@point_at(theta)\n#> <ob_point>\n#> @ x: num 2.58\n#> @ y: num 2\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, length, r, theta, style, tibble, xy,\n#>              geom, label, place, aesthetics\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nr1_theta <- r1@point_at(theta)\n\nrc_plot +\n  ob_segment(r1@center, r1_theta) +\n  r1_theta@label(\n    polar_just = ob_polar(theta, 1.5), \n    plot_point = T) +\n  ob_arc(center = r1@center,\n      radius = .5,\n      end = theta,\n      label = ob_label(theta, \n                    fill = my_colors$primary@lighten(.15), \n                    color = my_colors$primary@color)) \n```\n\n::: {.cell-output-display}\n![The point on a rectangle at angle &theta; = 60&deg;](rectangles_files/figure-html/fig-theta60-1.png){#fig-theta60 width=672}\n:::\n:::\n\n\n\n\n\n# Rectangle sides\n\nEach side of the rectangle can be extracted. For example, here is the north side segment:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr1@side@north\n#> <ob_segment>\n#> @ p1: <ob_point>\n#>  @ x: num 0\n#>  @ y: num 2\n#> @ p2: <ob_point>\n#>  @ x: num 4\n#>  @ y: num 2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nrc_plot + \n  r1@side@north |>\n    set_props(color = my_colors$secondary@color, linewidth = 2) +\n  r1@north@label(label = \"North Side\",\n                 vjust = -.1, \n                 size = 20,\n                 color = my_colors$secondary)\n```\n\n::: {.cell-output-display}\n![The north side of a rectangle](rectangles_files/figure-html/fig-westside-1.png){#fig-westside width=672}\n:::\n:::\n\n\n\n\n# Rounded corners\n\nThe `@radius` property controls the radius of the rounded corners. It must be of length 1. It can be given in as a `ggplot2::unit` or as a numeric value. If numeric, it is understood as a proportion of the plot area width. Rounding does not affect the location of corners.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  coord_equal(xlim = c(-4, 4), \n              ylim = c(-4, 4)) +\n  ob_rectangle(\n    ob_point(0, 0),\n    width = 6,\n    height = 4,\n    radius = unit(5, \"mm\")\n  )\n```\n\n::: {.cell-output-display}\n![Specify a rectangle rounded corners](rectangles_files/figure-html/fig-rounded-1.png){#fig-rounded width=672}\n:::\n:::\n\n\n\n# Rotation angle\n\nIt is possible to rotate a rectangle.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  coord_equal(xlim = c(-4, 4), \n              ylim = c(-4, 4)) +\n  ob_rectangle(\n    center = ob_point(0, 0),\n    width = 6,\n    height = 2,\n    angle = 30,\n    radius = unit(3, \"mm\")\n  )\n```\n\n::: {.cell-output-display}\n![A rectangle rotated by 30&deg;](rectangles_files/figure-html/fig-rotate-1.png){#fig-rotate width=672}\n:::\n:::\n\n\n\nMany angles can be specified at once:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Angles\nth <- degree(seq(0, 355, 5))\n# Radius of middle space\nr_middle <- sqrt(2)\n# Rectangle width\nw <- 4 - r_middle\n\nggplot() +\n  coord_equal(xlim = c(-4, 4), \n              ylim = c(-4, 4)) +\n  ob_rectangle(\n    center = ob_polar(theta = th, \n                   r = w / 2 + r_middle),\n    width = w,\n    height = .15,\n    angle = th,\n    color = NA,\n    fill = hcl(th@degree)\n  )\n```\n\n::: {.cell-output-display}\n![Many rotated rectangles](rectangles_files/figure-html/fig-rotatemany-1.png){#fig-rotatemany width=672}\n:::\n:::\n",
    "supporting": [
      "rectangles_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}