{
  "hash": "edf7afb565afa4742a71ea3a543cc3f0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Paths\"\nformat: \n  html:\n    toc: true\n    html-math-method: katex\nvignette: >\n  %\\VignetteIndexEntry{paths}\n  %\\VignetteEngine{quarto::html}\n  %\\VignetteEncoding{UTF-8}\n---\n\n\n\n\n\n# Setup\n\n## Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdiagram)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggtext)\nlibrary(ggarrow)\n```\n:::\n\n\n\n\n## Base Plot\n\nTo avoid repetitive code, we make a base plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_font <- \"Roboto Condensed\"\nmy_font_size <- 20\nmy_point_size <- 2\nmy_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)\n\n# my_colors <- viridis::viridis(2, begin = .25, end = .5)\nmy_colors <- c(\"#3B528B\", \"#21908C\")\n\ntheme_set(\n  theme_minimal(\n    base_size = my_font_size,\n    base_family = my_font) +\n    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))\n\nbp <- ggdiagram(\n  font_family = my_font,\n  font_size = my_font_size,\n  point_size = my_point_size,\n  linewidth = .5,\n  theme_function = theme_minimal,\n  axis.title.x =  element_text(face = \"italic\"),\n  axis.title.y = element_text(\n    face = \"italic\",\n    angle = 0,\n    hjust = .5,\n    vjust = .5)) +\n  scale_x_continuous(labels = signs_centered,\n                     limits = c(-4, 4)) +\n  scale_y_continuous(labels = signs::signs,\n                     limits = c(-4, 4))\n\n```\n:::\n\n\n\n# Paths\n\nThe `path` function creates an object that connects points along a path.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ob_point(c(-4,-3,4), c(0,-2, 0), color = \"dodgerblue\")\nbp + \n  ob_path(p) +\n  p\n```\n\n::: {.cell-output-display}\n![Plotting a path.](paths_files/figure-html/fig-path-1.png){#fig-path width=672}\n:::\n:::\n\n\n\n\n# Path Labels\n\nThe label of a path is created with `geomtextpath::geom_labelpath`, and thus will curve if the path is curved.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_curve <- tibble(x = seq(-4, 4, .1), \n                  y = (pnorm(x) * 8 - 4)) |>\n  ob_point()\n\n\n\nbp +\n  ob_path(\n    p = p_curve,\n    label = ob_label(\n      \"A path label will curve along the path.\",\n      vjust = -.1,\n      size = 20,\n      color = \"dodgerblue4\"\n    ),\n    arrowhead_length = 8,\n    arrow_head = my_arrowhead\n  )\n\n```\n\n::: {.cell-output-display}\n![A path with a curved label](paths_files/figure-html/fig-pathlabel-1.png){#fig-pathlabel width=672}\n:::\n:::\n\n\n\nYou can control the position of the path label with either the label's `position` or `hjust` properties. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp +\n  ob_path(\n    p = p_curve,\n    label = ob_label(\n      \"A path label will curve along the path.\",\n      vjust = -.1,\n      size = 20,\n      color = \"dodgerblue4\",\n      position = .1\n    ),\n    arrowhead_length = 8,\n    arrow_head = my_arrowhead\n  )\n```\n\n::: {.cell-output-display}\n![A path with a curved label at position .1](paths_files/figure-html/fig-labelposition-1.png){#fig-labelposition width=672}\n:::\n:::\n\n\n\n\n# Multiple paths\n\nTo create multiple paths at once, specify a list or vector of point objects.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp +\n  ob_path(c(p_curve, \n         p_curve * .5 + ob_point(2,-2),\n         p_curve * .5 + ob_point(-2,2)), \n       color = c(\"orchid4\",\n                 \"dodgerblue3\",\n                 \"firebrick4\"),\n       label = c(\".52\", \".42\", \".61\"))\n```\n\n::: {.cell-output-display}\n![Multiple paths](paths_files/figure-html/fig-multiplepath-1.png){#fig-multiplepath width=672}\n:::\n:::\n\n\n\n# Segments\n\nIt is possible to create color gradients along a path using the paths' segments.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() +\n  ob_path(p_curve)@segments %>% \n  set_props(color = viridis::viridis(p_curve@length - 1))\n```\n\n::: {.cell-output-display}\n![](paths_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "paths_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}