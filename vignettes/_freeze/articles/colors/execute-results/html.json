{
  "hash": "18ade4c4dffbd20fd3047cf1fd3ffa06",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Colors\"\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#>'\n    dev: ragg_png\nformat: \n  html:\n    toc: true\nvignette: >\n  %\\VignetteIndexEntry{colors}\n  %\\VignetteEngine{quarto::html}\n  %\\VignetteEncoding{UTF-8}\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdiagram)\n```\n:::\n\n\n\nThe `class_color` object has some useful utilities for working with colors. It mostly makes use of functions from the tinter and farver packages.\n\nThe `class_color` object takes R color names or hex strings as input.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_color <- class_color(\"orchid\")\n```\n:::\n\n\n\nThe underlying data of `class_color` can be retrieved with the `c` function or via the `@color` property:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(my_color)\n#> [1] \"#DA70D6FF\"\nmy_color@color\n#> [1] \"#DA70D6FF\"\n```\n:::\n\n\n\nThe `ob_*` classes have fill and color properties that can take direct character strings or `class_color` objects as input.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() +\n  ob_circle(fill = my_color)\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/ob_circle-1.png){width=672}\n:::\n:::\n\n\n\nA variety of color manipulation functions are available. Colors can be darkened:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() +\n  ob_circle(fill = my_color@darken(.5))\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/darken-1.png){width=672}\n:::\n:::\n\n\n\nColors can be lightened:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() +\n  ob_circle(fill = my_color@lighten(.5))\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/lighten-1.png){width=672}\n:::\n:::\n\n\n\nColors can be made transparent:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() +\n  ob_circle(fill = my_color@transparentize(.5)) +\n  ob_circle(fill = my_color@transparentize(.5), \n            center = ob_point(1,0))\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/transparent-1.png){width=672}\n:::\n:::\n\n\n\nHere we create sequences of shades with the `@lighten` and `@darken` properties:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() + \n  {my_array <- ob_circle(color = NA) %>% \n    ob_array(fill = my_color@lighten(seq(.1,1,length.out = 5)), \n             k = 5, \n             sep = .2)} + \n  ob_circle(color = NA) %>% \n    ob_array(fill = my_color@darken(seq(0,.9,length.out = 5)), \n             k = 5, \n             sep = .2) %>% \n    place(my_array, \"below\", sep = .2) \n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/makesequence-1.png){width=672}\n:::\n:::\n\n\n\nThe `@lighten` function makes colors appear the same as `@transparentize` with a white background. This feature can make be useful when text labels need to be placed over transparent shapes. The `@darken` function makes colors appear the same as `@transparentize` with a black background (with `@darken`'s `amount` values subtracted from 1).\n\n\n# Color Properties\n\nDifferent properties of colors and be retrieved and set. Using the HSV color model for Hue (0--360), Saturation (0--1), and Value/Brightness (0--1)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_color@hue\n#> [1] 302.2642\nmy_color@saturation\n#> [1] 0.4862385\nmy_color@brightness\n#> [1] 0.854902\n```\n:::\n\n\n\nWe can set a sequence of colors with the same brightness and saturation as the original color but with different hues:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_color_array <- class_color(\n  my_color, \n  hue = my_color@hue + seq(0,720, length.out = 12))\n\nggdiagram() +\n  ob_circle(color = NA) %>%\n  ob_array(fill = my_color_array,\n           k = 12,\n           sep = .2)\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/hsvsequence-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can set an array of colors with the same hue as the original color but with different saturation and/or brightness:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_color_array <- class_color(my_color, \n                              saturation = seq(.1, .6, .1))\n\nggdiagram() +\n  ob_circle(color = NA) %>%\n  ob_array(fill = my_color_array, \n           k = 6, \n           sep = .2)\n```\n\n::: {.cell-output-display}\n![](colors_files/figure-html/samehue-1.png){width=672}\n:::\n:::\n\n\n\nAlternately, the RGB (Red/Green/Blue) color properties can also be retrieved or set. Values are integers ranging from 0 to 255.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_color@red\n#> [1] 218\nmy_color@green\n#> [1] 112\nmy_color@blue\n#> [1] 214\n```\n:::\n",
    "supporting": [
      "colors_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}