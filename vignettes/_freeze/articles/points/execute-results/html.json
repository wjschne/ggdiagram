{
  "hash": "a4002f653ce3c6e0c57de8134d1bb8b6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Points\"\nformat: \n  html:\n    toc: true\nvignette: >\n  %\\VignetteIndexEntry{points}\n  %\\VignetteEngine{quarto::html}\n  %\\VignetteEncoding{UTF-8}\n---\n\n\n\n\n\n# Setup\n\n## Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdiagram)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggtext)\nlibrary(ggarrow)\nlibrary(arrowheadr)\n\n```\n:::\n\n\n## Base Plot\n\nTo avoid repetitive code, we make a base plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nmy_font <- \"Roboto Condensed\"\nmy_font_size <- 20\nmy_point_size <- 2\nmy_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)\n\n# my_colors <- viridis::viridis(2, begin = .25, end = .5)\nmy_colors <- c(\"#3B528B\", \"#21908C\")\n\ntheme_set(\n  theme_minimal(\n    base_size = my_font_size,\n    base_family = my_font) +\n    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))\n\nbp <- ggdiagram(\n  font_family = my_font,\n  font_size = my_font_size,\n  point_size = my_point_size,\n  linewidth = .5,\n  theme_function = theme_minimal,\n  axis.title.x =  element_text(face = \"italic\"),\n  axis.title.y = element_text(\n    face = \"italic\",\n    angle = 0,\n    hjust = .5,\n    vjust = .5)) +\n  scale_x_continuous(labels = signs_centered,\n                     limits = c(-4, 4)) +\n  scale_y_continuous(labels = signs::signs,\n                     limits = c(-4, 4))\n\n```\n:::\n\n\n\n# Points\n\nPoints have x and y coordinates. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ob_point(1, 2, color = \"firebrick\")\np2 <- ob_point(3, 4, color = \"royalblue3\")\n\nbp + \n  p1 + \n  p2\n```\n\n::: {.cell-output-display}\n![Creating points](points_files/figure-html/fig-points-1.png){#fig-points width=672}\n:::\n:::\n\n\n\n## Polar Coordinates\n\nA point's x and y coordinates can be specified in polar coordinates\n\n* `@r`: The distance from the origin to the point (i.e., the vector's magnitude)\n* `@theta`: The angle (in radians) from the line on the x-axis to the line containing the vector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2\n#> <ggdiagram::ob_point>\n#> @ x: num 3\n#> @ y: num 4\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, centroid, length, r, theta, style,\n#>              tibble, xy, geom, label, place, aesthetics\np2@r\n#> [1] 5\np2@theta\n#> 0.3π\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n\nbp +\n  coord_equal(xlim = c(-p2@r, p2@r), \n              ylim = c(-p2@r, p2@r)) +\n  scale_x_continuous(breaks = -10:10, \n                     minor_breaks = NULL, \n                     labels = signs_centered) +\n  scale_y_continuous(breaks = -10:10, \n                     minor_breaks = NULL, \n                     labels = signs::signs) +\n  ob_circle(radius = p2@r) +\n  p2@label(plot_point = TRUE, \n           size = 16,\n           polar_just = ob_polar(p2@theta, r = 1.5)) +\n  ob_segment(p1 = ob_point(), \n          p2 = p2, \n          label = ob_label(paste0(\"*r* = \", round(p2@r, 2)),\n                           size = 16,\n                           vjust = 0)) + \n   ob_arc(\n     end = p2@theta,\n     color = \"royalblue3\",\n     label = ob_label(\n       paste0(\"&theta; = \", \n              degree(p2@theta)),\n       size = 16,\n        color = \"royalblue3\"))\n\n```\n\n::: {.cell-output-display}\n![Polar Coordinates](points_files/figure-html/fig-polar-1.png){#fig-polar width=672}\n:::\n:::\n\n\n\n\nA point can be created with polar coordinates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nob_polar(r = 5, theta = degree(60))\n#> <ggdiagram::ob_polar>\n#> @ x    : num 2.5\n#> @ y    : num 4.33\n#> @ r    : num 5\n#> @ theta: <ggdiagram::radian>\n#>  @ radian: num 1.05\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, centroid, length, style, tibble, xy,\n#>              geom, label, place, aesthetics\n```\n:::\n\n\n\nIf the angle is numeric instead of an angle, it is assumed to be in radians. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nob_polar(r = 1, theta = pi)@theta\n#> π\n```\n:::\n\n\n\n\n# Convert to tibble\n\nThis will extract any styles that have been set.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_tibble(ob_point(1,2, \n                 color = \"red\", \n                 shape = 16))\n#> # A tibble: 1 × 4\n#>       x     y color shape\n#>   <dbl> <dbl> <chr> <dbl>\n#> 1     1     2 red      16\n```\n:::\n\n\n\nAs a convenience, the tibble associated with the point object can be accessed with the `@tibble` property.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nob_point(1:5,2, \n      color = \"blue\", \n      shape = 1:5)@tibble\n#> # A tibble: 5 × 4\n#>       x     y color shape\n#>   <int> <dbl> <chr> <int>\n#> 1     1     2 blue      1\n#> 2     2     2 blue      2\n#> 3     3     2 blue      3\n#> 4     4     2 blue      4\n#> 5     5     2 blue      5\n```\n:::\n\n\n\n\n# Methods\n\n## Arithmetic\n\nPoints can be added and subtracted:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ob_point(2, 3)\np2 <- ob_point(2, 1)\np3 <- p1 + p2\np3\n#> <ggdiagram::ob_point>\n#> @ x: num 4\n#> @ y: num 4\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, centroid, length, r, theta, style,\n#>              tibble, xy, geom, label, place, aesthetics\np3 - p2\n#> <ggdiagram::ob_point>\n#> @ x: num 2\n#> @ y: num 3\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, centroid, length, r, theta, style,\n#>              tibble, xy, geom, label, place, aesthetics\n```\n:::\n\n\n\nPoints can be scaled with constants\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2 * 2\n#> <ggdiagram::ob_point>\n#> @ x: num 4\n#> @ y: num 2\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, centroid, length, r, theta, style,\n#>              tibble, xy, geom, label, place, aesthetics\np3 / 4\n#> <ggdiagram::ob_point>\n#> @ x: num 1\n#> @ y: num 1\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, centroid, length, r, theta, style,\n#>              tibble, xy, geom, label, place, aesthetics\n```\n:::\n\n\n\nThe *x* and *y* coordinates can be scaled separately with other points:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 / p3\n#> <ggdiagram::ob_point>\n#> @ x: num 0.5\n#> @ y: num 0.75\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, centroid, length, r, theta, style,\n#>              tibble, xy, geom, label, place, aesthetics\np1 * p3\n#> <ggdiagram::ob_point>\n#> @ x: num 8\n#> @ y: num 12\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, centroid, length, r, theta, style,\n#>              tibble, xy, geom, label, place, aesthetics\n```\n:::\n\n\n\n\n# Distance\n\nThe distance between two points:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance(p1, p2)\n#> [1] 2\n```\n:::\n\n\n\nThe shortest distance from a point to a line:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1 <- ob_line(slope = 1, \n           intercept = 2)\ndistance(p1, l1)\n#> [1] 0.7071068\n```\n:::\n\n\n\nThe shortest distance from a point to a circle's edge:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc1 <- ob_circle(center = ob_point(2, 2), radius = 2)\np1 <- c1@center + ob_polar(\n  r = c1@radius * 1, \n  theta = degree(115), \n  color = \"royalblue3\")\n\np2 <- c1@center + ob_polar(\n  r = c1@radius * 2, \n  theta = degree(45), \n  color = \"firebrick4\")\n\np3 <- c1@center + ob_polar(\n  r = c1@radius * .3, \n  theta = degree(190), \n  color = \"orchid4\")\n\n\n# p1 is on circle, so its distance is 0\ndistance(p1, c1)\n#> [1] 0\n# p2 is outside the circle\ndistance(p2, c1)\n#> [1] 2\n# p3 is inside the circle\ndistance(p3, c1)\n#> [1] 1.4\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nintersect_c1_p2 <- c1@point_at((p2 - c1@center)@theta)\n\nseg_style <- ob_style(\n  arrowhead_length = 7,\n  arrow_head = my_arrowhead,\n  arrow_fins = my_arrowhead,\n  resect = unit(5, \"pt\")\n)\n\nseg_c1_p2 <- ob_segment(\n  intersect_c1_p2,\n  p2, \n  style = seg_style, \n  label = scales::number(distance(intersect_c1_p2, p2), .1))\n\nintersect_c1_p3 <- c1@point_at((p3 - c1@center)@theta)\n\nseg_c1_p3 <- ob_segment(\n  intersect_c1_p3,\n  p3,\n  color = p3@color, \n  label = scales::number(distance(intersect_c1_p3, p3), .1),\n  style = seg_style)\n\np_labels <- subscript(\"P\", 1:3)\n\nbp +\n  c1 +\n  p1@label(label = p_labels[1], \n           plot_point = T,\n           polar_just = ob_polar(\n             theta = (p1 - c1@center)@theta,\n             r = 1.3)) +\n  seg_c1_p2 +\n  seg_c1_p2@midpoint(c(0,1)) +\n  seg_c1_p2@midpoint(1)@label(\n    label = p_labels[2], \n    polar_just = ob_polar(theta = seg_c1_p3@line@angle, 1.5)) +\n  seg_c1_p3 +\n  seg_c1_p3@midpoint(c(0,1)) +\n  seg_c1_p3@midpoint(c(1))@label(\n    label = p_labels[3], \n    polar_just = ob_polar(theta = seg_c1_p3@line@angle, 1.5))\n#> Warning: Removed 1 rows containingmissingvalues (`geom_arrow_segment()`).\n#> Warning: Removed 1 row containing missing values or values outside the scale range\n#> (`geom_rich_text()`).\n#> Warning: Removed 1 row containing missing values or values outside the scale range\n#> (`geom_point()`).\n#> Warning: Removed 1 row containing missing values or values outside the scale range\n#> (`geom_rich_text()`).\n```\n\n::: {.cell-output-display}\n![Point to Circle Distances](points_files/figure-html/fig-pointcircle-1.png){#fig-pointcircle width=672}\n:::\n:::\n\n\n\n# Convert points to geoms\n\nThe `as.geom` function is called implicitly whenever a point object is added to a ggplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts <- ob_point(x = c(3,2), \n             y = c(4,3), \n             color = c(\"red\", \"blue\"),\n             size = c(3, 6))\n\nggplot() + \n  pts\n```\n\n::: {.cell-output-display}\n![](points_files/figure-html/fig-pts-1.png){#fig-pts width=672}\n:::\n:::\n\n\n\nThis is equivalent to \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  as.geom(pts)\n```\n\n::: {.cell-output-display}\n![](points_files/figure-html/fig-asgeom-1.png){#fig-asgeom width=672}\n:::\n:::\n\n\n\nAnd this is equivalent to \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(\n    aes(\n      x,\n      y,\n      color = I(color),\n      size = I(size)), \n    data = get_tibble_defaults(pts))\n```\n\n::: {.cell-output-display}\n![](points_files/figure-html/fig-geompoint-1.png){#fig-geompoint width=672}\n:::\n:::\n\n\n\nThat is, any style information that can be mapped will be handled via the `I` (identity) function in the mapping statement (`aes`).\n\nCalling the `as.geom` function directly is useful for overriding any style information in the points. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  as.geom(pts, \n          stroke = 1.5,\n          fill = \"yellow\", \n          shape = \"triangle filled\")\n```\n\n::: {.cell-output-display}\n![](points_files/figure-html/fig-yellowtriangle-1.png){#fig-yellowtriangle width=672}\n:::\n:::\n\n\n\nThis is equivalent to \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(\n    aes(x = x, \n        y = y, \n        size = I(size), \n        color = I(color)),\n    stroke = 1.5,\n    fill = \"yellow\",\n    shape = \"triangle filled\",\n    data = pts@tibble\n  )\n```\n\n::: {.cell-output-display}\n![](points_files/figure-html/fig-yellowtriangle_geom-1.png){#fig-yellowtriangle_geom width=672}\n:::\n:::\n\n\n\n\n# Bounding box\n\nIt is possible to find the rectangle that bounds all the points in an `ob_point` object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp + \n  {pts <- ob_point(x = 1:4,\n                y = c(3,3,4, 2))} + \n  pts@bounding_box\n```\n\n::: {.cell-output-display}\n![The bounding box of a set of points](points_files/figure-html/fig-bounding-1.png){#fig-bounding width=672}\n:::\n:::\n",
    "supporting": [
      "points_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}