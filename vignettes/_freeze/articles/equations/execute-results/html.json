{
  "hash": "627497629af6db4be69bc1025f7a285b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Equations with LaTeX\"\nformat: \n  html:\n    toc: true\nvignette: >\n  %\\VignetteIndexEntry{equations}\n  %\\VignetteEngine{quarto::html}\n  %\\VignetteEncoding{UTF-8}\nbibliography: references.json\ncsl: apa.csl\n---\n\n\n\n\n\n# Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggdiagram)\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(ggarrow)\n```\n:::\n\n\n\n# Advantages of `ob_label` over `ob_latex`\n\nThe `ob_label` function uses `ggtext::geom_richtext` to create labels. It's primary advantage is that it is simple and renders quickly. Wherever possible, it is the recommended way to create labels. It understands basic markdown formatting (e.g., italics, bolding, subscripts, and superscripts) as well as some HTML tags (e.g., `span` and `img`). \n\n\n# Advantages of `ob_latex` over `ob_label`\n\nIf something more elaborate is needed than italics, bolding, subscripts, and superscripts, we can use LaTeX instead. The `ob_latex` function can place an image of a LaTeX equation in a ggplot diagram. \n\nFor example, suppose I want to label a latent variable's variance with the symbol $\\sigma_e^2$. This symbol would be difficult to render in pure HTML, so we can render it in LaTeX instead.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram(font_family = \"Roboto Condensed\") +\n  {l <- ob_circle(label = ob_label(\"*e*\", size = 48))} +\n  {lv <- ob_variance(l)} +\n  ob_latex(tex = \"\\\\sigma_e^2\",\n           center = lv@midpoint(), \n           width = .4) \n```\n\n::: {.cell-output-display}\n![Latent variable with variance](equations_files/figure-html/fig-latent-1.png){#fig-latent width=192}\n:::\n:::\n\n\n\nIf we want the symbol to be in the same font as the rest of the figure, we can trick LaTeX into giving us any font we have installed on our system. I often use [Roboto Condensed](https://fonts.google.com/specimen/Roboto+Condensed):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram(font_family = \"Roboto Condensed\") +\n  {l <- ob_circle(label = ob_label(\"*e*\", size = 48))} +\n  {lv <- ob_variance(l)} +\n  ob_latex(tex = r\"(\\text{\\emph{Ïƒ}}_{\\text{\\emph{e}}}^{\\text{2}})\",\n           center = lv@midpoint(), \n           width = .4, \n           family = \"Roboto Condensed\") \n```\n\n::: {.cell-output-display}\n![Latent variable with variance rendered in Roboto Condensed](equations_files/figure-html/fig-latentroboto-1.png){#fig-latentroboto width=192}\n:::\n:::\n\n\n\nIf you need an equation in a plot that requires something other than a 1:1 aspect ratio, you can set the aspect ratio of the equation to be the same as the aspect ratio as the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmu <- 50\nsigma <- 10\nratio <- (4 * sigma)  / dnorm(mu, mu, sigma)\n\nggplot() +\n  coord_fixed(ratio = ratio) +\n  theme_classic(base_family = \"Roboto Condensed\") +\n  theme(axis.line = element_blank(), axis.title.x = element_markdown()) +\n  stat_function(\n    fun = \\(x) dnorm(x, mean = mu, sd = sigma),\n    geom = \"area\",\n    n = 1000,\n    fill = \"dodgerblue\",\n    alpha = .5\n  ) +\n  scale_x_continuous(NULL,\n                     breaks = mu + seq(-4 * sigma, 4 * sigma, sigma), \n                     limits = mu + c(-4 * sigma, 4 * sigma, sigma)) +\n  scale_y_continuous(\n    NULL,\n    breaks = NULL,\n    limits = c(0, dnorm(mu, mu, sigma)),\n    expand = expansion()\n  ) +\n  ob_latex(\n    r\"(f(x) =\n    \\frac{1}{\\sigma\\sqrt{2\\pi}}\n    e^{-\\frac{1}{2}\n    \\left(\\frac{x-\\mu}{\\sigma}\\right)^2})\",\n    width = sigma * 3,\n    aspect_ratio = ratio,\n    border = 1,\n    filename = \"zscore\",\n    density = 600\n  ) |>\n  place(ob_point(mu + sigma * .7, dnorm(mu + sigma * .7, mu, sigma)), \n        where = \"right\", \n        sep = 3) + \n  ob_label(label = paste0(\"*&mu;* = \", mu), \n           ob_point(mu, 0), \n           vjust = 0,\n           fill = NA,\n           color = \"gray30\") +\n  connect(\n    {p_mu <- ob_point(x = mu, y = dnorm(mu + sigma, mu, sigma))},\n    {p_sigma <- p_mu + ob_point(sigma, 0)},\n    label = ob_label(\n      paste0(\"*&sigma;* = \", sigma),\n      fill = NA,\n      vjust = 0,\n      color = \"gray30\"\n    )\n  )\n\n```\n\n::: {.cell-output-display}\n![Normal distribution's probability density function](equations_files/figure-html/fig-normal-1.png){#fig-normal width=768}\n:::\n:::\n\n\n\n\n\n\n# Text Color and Background Fill Color\n\nThe text color is black by default. It can be set to any color via the `color` property.\n\nThe background color of the LaTeX expression will be white by default. If the LaTeX expression is placed inside an object with a filled background, you might want to give the expression the same background fill color.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() +\n  ob_circle(fill = \"dodgerblue4\", color = NA) +\n  ob_latex(\n    \"A+B+C=D\",\n    center = ob_point(),\n    color = \"white\",\n    fill = \"dodgerblue4\",\n    density = 900,\n    width = 1.5\n  )\n```\n\n::: {.cell-output-display}\n![Altering the text color and background fill color.](equations_files/figure-html/fig-color-1.png){#fig-color width=288}\n:::\n:::\n\n\n\nOf course, you can always manipulate text color via LaTeX.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() +\n  ob_circle() +\n  ob_latex(\"Y={\\\\color[HTML]{CD69C9} X_1^2} + {\\\\color[HTML]{228B22} X_2^2}\")\n```\n\n::: {.cell-output-display}\n![Latex Colors](equations_files/figure-html/fig-textcolor-1.png){#fig-textcolor width=288}\n:::\n:::\n\n\n\n\nAs a convenience, the `latex-color` function will surround the expression with the right LaTeX expression to change the color.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() +\n  ob_circle() +\n  ob_latex(paste0(\"Y=\", \n                  latex_color(\"X_1^2\", color = \"orchid3\"),\n                  \"+\",\n                  latex_color(\"X_2^2\", color = \"forestgreen\")))\n```\n\n::: {.cell-output-display}\n![Using `latex_color` to alter text color in LaTeX expressions.](equations_files/figure-html/fig-latexcolor-1.png){#fig-latexcolor width=288}\n:::\n:::\n\n\n\n\n# Rotation\n\nThe LaTeX expression can be rotated by setting the `angle` property.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram(theme_function = ggplot2::theme_minimal, font_size = 20) +\n  {s <- connect(ob_point(), ob_point(3,4))} +\n  ob_latex(\"\\\\left\\\\lVert\\\\vec{x}\\\\right\\\\rVert=5\", \n           center = s@midpoint(), \n           height = .35,\n           density = 900,\n           angle = s@line@angle, \n           vjust = -.1) + \n  ob_latex(\n    paste0(\"\\\\vec{x}=\", s@p2@auto_label),\n    vjust = 1.2,\n    hjust = 1.3,\n    center = s@p2,\n    height = .3,\n    density = 600\n  ) \n \n```\n\n::: {.cell-output-display}\n![Rotated equation](equations_files/figure-html/fig-rotated-1.png){#fig-rotated width=672}\n:::\n:::\n\n\n\n# Image quality\n\nThe default density for `ob_latex` images is 300 dots per inch. If a small expression is displayed as a large image, it will appear pixelated.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() +\n  ob_circle(radius = 1) +\n  ob_latex(\"X_i^2\", \n           width = 1.25)\n```\n\n::: {.cell-output-display}\n![A latex expression with poor image quality](equations_files/figure-html/fig-pixelated300-1.png){#fig-pixelated300 width=384}\n:::\n:::\n\n\n\n\n\n\nSetting the density to a higher value will usually create a better image.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdiagram() +\n  ob_circle(radius = 1) +\n  ob_latex(\"X_i^2\", \n           width = 1.25,\n           density = 900)\n```\n\n::: {.cell-output-display}\n![A latex expression with better image quality](equations_files/figure-html/fig-pixelated600-1.png){#fig-pixelated600 width=384}\n:::\n:::\n\n\n\n\nHigher densities are not always better, however. In addition to using more memory and rendering more slowly, images with very high densities will sometimes appear blurry or pixelated.\n\n# How does `ob_latex` work?\n\nThe `ob_latex` function works through these steps:\n\n1. Create a .tex file with content based on the LaTeX [standalone package](https://ctan.org/pkg/standalone).\n2. Create a .pdf file via the `tinytex::xelatex` function, if tinytex is available. Otherwise, use xelatex via a shell command.\n3. Import the .pdf file as a raster bitmap via the `magick::image_read_pdf` function. \n4. Store the raster bitmap in the `ob_latex@image` slot.\n\nWhen rendered in ggplot2, the bitmap is displayed via `ggplot2::annotation_raster`.\n\n\n# The xdvir Package: A Cool Alternative to `ob_latex`\n\nIf you want the best image quality possible for a LaTeX snippet in a ggplot2 plot, then give the [xdvir](https://cran.r-project.org/package=xdvir) package a try. It can put LaTeX in plot titles, subtitles, and captains, as well as anywhere on the plot. It gets the typography right as well.\n\nOf course, you can use ggdiagram functions to place LaTeX snippets but use xdvir functions to render them.\n",
    "supporting": [
      "equations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}