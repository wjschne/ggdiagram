{
  "hash": "a90d57b9a07ae3acfda37cdb29a43d86",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lines\"\nformat: \n  html:\n    toc: true\nvignette: >\n  %\\VignetteIndexEntry{lines}\n  %\\VignetteEngine{quarto::html}\n  %\\VignetteEncoding{UTF-8}\n---\n\n\n\n\n\n# Setup\n\n## Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdiagram)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggtext)\nlibrary(ggarrow)\n```\n:::\n\n\n\n## Base Plot\n\nTo avoid repetitive code, we set defaults and make a base plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_font <- \"Roboto Condensed\"\nmy_font_size <- 20\nmy_point_size <- 2\nmy_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)\n\n# my_colors <- viridis::viridis(2, begin = .25, end = .5)\nmy_colors <- c(\"#3B528B\", \"#21908C\")\n\ntheme_set(\n  theme_minimal(\n    base_size = my_font_size,\n    base_family = my_font) +\n    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))\n\nbp <- ggdiagram(\n  font_family = my_font,\n  font_size = my_font_size,\n  point_size = my_point_size,\n  linewidth = .5,\n  theme_function = theme_minimal,\n  axis.title.x =  element_text(face = \"italic\"),\n  axis.title.y = element_text(\n    face = \"italic\",\n    angle = 0,\n    hjust = .5,\n    vjust = .5)) +\n  scale_x_continuous(labels = signs_centered,\n                     limits = c(-4, 4)) +\n  scale_y_continuous(labels = signs::signs,\n                     limits = c(-4, 4))\n\n```\n:::\n\n\n\n# Making Lines\n\nLines can be constructed from a slope and an intercept:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- ob_line(slope = 2, intercept = 1, color = my_colors[1])\nl\n#> S3<ggdiagram::ob_line/ggdiagram::shape/ggdiagram::has_style/S7_object>\n#> @ slope     : num 2\n#> @ intercept : num 1\n#> @ xintercept: num -0.5\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbp +\n  l +\n  l@point_at_y(0)@label(l@equation, angle = l@angle)\n```\n\n::: {.cell-output-display}\n![A line with slope of 2 and intercept of 1](lines_files/figure-html/fig-slopeintercept-1.png){#fig-slopeintercept width=672}\n:::\n:::\n\n\n\n\nBecause the default slope is 0, a horizontal ob_line can be set with just the intercept:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh <- ob_line(intercept = 2, color = my_colors[1])\nh\n#> S3<ggdiagram::ob_line/ggdiagram::shape/ggdiagram::has_style/S7_object>\n#> @ slope     : num 0\n#> @ intercept : num 2\n#> @ xintercept: num -Inf\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbp + \n  h + \n  h@point_at_x(0)@label(h@equation)\n```\n\n::: {.cell-output-display}\n![A horizontal line intercept of 2](lines_files/figure-html/fig-horitonal-1.png){#fig-horitonal width=672}\n:::\n:::\n\n\n\n\nA vertical line can be set with the x-intercept:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- ob_line(xintercept = -2, color = my_colors[1])\nv\n#> S3<ggdiagram::ob_line/ggdiagram::shape/ggdiagram::has_style/S7_object>\n#> @ slope     : num -Inf\n#> @ intercept : num -Inf\n#> @ xintercept: num -2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbp + \n  v + \n  v@point_at_y(0)@label(equation(v), angle = v@angle * -1)\n\n```\n\n::: {.cell-output-display}\n![Vertical line at x = −2](lines_files/figure-html/fig-v-1.png){#fig-v width=672}\n:::\n:::\n\n\n\n\n\nAny line---horizontal, vertical, or sloped---can be constructed from the coefficients of the general form of a line:\n\n$$\nax+by+c=0\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl_123 <- ob_line(a = 1, b = 2, c = 3, color = my_colors[1])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbp +\n  l_123 +\n  l_123@point_at_x(\n    x = 0)@label(\n      equation(l_123, type = \"general\"), \n      angle = l_123@angle)\n```\n\n::: {.cell-output-display}\n![Line with slope = 0 and intercept = −2](lines_files/figure-html/fig-ablcline_plot-1.png){#fig-ablcline_plot width=672}\n:::\n:::\n\n\n\nWith respect to the general form, the slope is equal to $-\\frac{a}{b}$, the y-intercept is equal to $-\\frac{c}{b}$, and the x-intercept is equal to $-\\frac{c}{a}$\n\n# Methods\n\n## Projections and Distances\n\nA point can be \"projected\" onto a line. Imagine shining a light on the point in a direction perpendicular to the line. The point's shadow on the line would be the shortest distance between the line and the point.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ob_point(3,-2, color = my_colors[2])\nl <- ob_line(slope = 2, intercept = 2, color = my_colors[1])\n# Point p projected onto line l\np_projected <- projection(p, l)\n\n# Alternately:\nl@projection(p)\n#> S3<ggdiagram::ob_point/ggdiagram::xy/ggdiagram::shape/ggdiagram::has_style/S7_object>\n#> @ x: num -1\n#> @ y: num 0\n#> Other props: alpha, color, fill, shape, size, stroke, auto_label,\n#>              bounding_box, centroid, length, r, theta, style,\n#>              tibble, xy, geom, label, place, aesthetics\n```\n:::\n\n\n\n\nThe shortest distance from a point to a line can be calculated.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# distance from point p to line l\ndistance(p, l)\n#> [1] 4.472136\n\n# Equivalently:\nob_segment(p, l@projection(p))@distance\n#> [1] 4.472136\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbp +\n  l +\n  l@point_at_x(.5)@label(\n    label = l@equation, \n    angle = l@angle) +\n  {s_projected <- ob_segment(\n      p1 = l@projection(p),\n      p2 = p,\n      linetype = \"dashed\",\n      label = paste0(\"Distance = \", \n                     distance(l@projection(p), p) |>\n                       round(digits = 2) |>\n                       as.character()))} + \n  s_projected@midpoint(c(0, 1))@label(\n    polar_just = degree(s_projected@line@angle) + c(180, 0),\n    plot_point = TRUE)  \n\n```\n\n::: {.cell-output-display}\n![Shortest distance between a line and point](lines_files/figure-html/fig-point_line-1.png){#fig-point_line width=672}\n:::\n:::\n",
    "supporting": [
      "lines_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}