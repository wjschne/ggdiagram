---
title: "Segments"
format: 
  html:
    toc: true
vignette: >
  %\VignetteIndexEntry{segments}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| label: presetup
#| include: false
knitr::opts_chunk$set(
  collapse = TRUE,
  dev = "ragg_png",
  comment = "#>",
  fig.width = 7,
  fig.height = 7
)
library(ggdiagram)
library(ggplot2)
library(ggtext)
```

# Setup

```{r}
#| label: setup
library(ggdiagram)
library(ggplot2)
library(ggtext)
library(ggarrow)
```

For ease of plotting, we will define a base plot:

```{r}
#| label: bp
my_font <- "Roboto Condensed"
update_geom_defaults("richtext", 
                     list(family = my_font, 
                          size = 0.8 * 20 / ggplot2::.pt))
update_geom_defaults("line", list(linewidth = .75))
update_geom_defaults("segment", list(linewidth = .75))
update_geom_defaults("point", list(size = 2))

update_geom_defaults("arrow_segment", list(length_head = 5, linewidth = .5))

bp <- ggplot() +
  theme_minimal(base_size = 20, base_family = my_font) +
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
  coord_equal(xlim = c(-4, 4), ylim = c(-4, 4)) +
  scale_x_continuous(labels = WJSmisc::signs_centered, breaks = seq(-4,4)) +
  scale_y_continuous(labels = signs::signs, breaks = seq(-4,4)) +
  theme_minimal(base_size = 16) +
  theme(
    axis.title.x =  element_text(face = "italic"),
    axis.title.y = element_text(
      face = "italic",
      angle = 0,
      hjust = .5,
      vjust = .5
    )
  )


```

# Specifying a segment

A segment is a portion of a line between two points.


```{r}
#| label: s1
p1 <- ob_point(-3,-1)
p2 <- ob_point(3,3)
s1 <- ob_segment(p1, p2)
```

```{r}
#| label: fig-s1
#| fig-cap: Plotting a segment and its endpoints
bp + s1 + p1 + p2
```

# Styling a segment

The primary options for styling a segment are alpha, color, linetype, and linewidth. However, it can take any style from `ggarrow::geom_arrow_segment`

If you are not sure which properties can be set, you an see them in the `@aesthetics@style` slot.

```{r}
#| label: segstyle
s1@aesthetics@style
```


Styles can be specified when the segment is created.

```{r}
#| label: segcolor
s2 <- ob_segment(p1,p2, color = "green4")
bp + s2
```

Styles can be modified after the segment is created:

```{r}
#| label: seglinewidth
s2@linewidth <- 3
bp + s2
```

The `as.geom` function passes style arguments to the `ggarrow::geom_arrow_segment` function without modifying the segment's style property:

```{r}
#| label: fig-asgeom
#| fig-cap: Make s1 appear red temporarily using `as.geom` function
bp +
  as.geom(s1, color = "red4")
```

As an alternative, the `geom` property is a function that calls `as.geom`. 

```{r}
#| label: fig-geom
#| fig-cap: Make s1 appear red temporarily via the `geom` property
bp + s1@geom(color = "blue3")
```

To verify that s1 has not changed its color:

```{r}
#| label: fig-verify
#| fig-cap: The `s1 object has not changed
bp + s1
```

A "pipe-friendly" way to modify any ggdiagram object is to use S7's `set_props` function, which has been re-exported to ggdiagram for the sake of convenience. Like `as.geom`, this function does not modify `s1`, but unlike `as.geom`, `set_props` can be used to save a new object with the specified modifications by assigning it to a new variable. That is, `as.geom` creates a ggplot2 geom, whereas `set_props` will create a modified a ggdiagram object (or any other S7 class).

```{r}
#| label: setprops
bp +
  s1 |>
    set_props(color = "red") 
```

# Features of a segment

## Distance between points

```{r}
#| label: atdistance
s1@distance
```

Alternately:

```{r}
#| label: distance
distance(s1)
```


## Line passing through the segment

The line that passes through the segment contains information about the segment, such as its slope, intercept, or angle.

To access the line that passes between both points:

```{r}
#| label: segline
s1@line
s1@line@slope
s1@line@intercept
s1@line@angle
```


```{r}
#| label: fig-line
#| fig-cap: Line passing through segment
#| code-fold: true
bp +
  s1@line |> set_props(color = "royalblue4") +
  s1@midpoint(position = c(0,1))@label(
    polar_just = ob_polar(s1@line@angle + degree(90), 1.5), 
    plot_point = TRUE) +
  ob_label(c(equation(s1@line), 
          paste0("Distance = ", round(s1@distance, 2))), 
        p = midpoint(s1), 
        vjust = c(-.2, 1.1), 
        angle = s1@line@angle)
```


## Midpoints

By default, the `midpoint` function's `position` argument is .5, which finds the point halfway between the point of a segment:

```{r}
#| label: midpoint
s1@midpoint()
```

```{r}
#| label: fig-midpoint
#| fig-cap: Midpoint of a segment
#| code-fold: true
bp +
  s1 +
  s1@midpoint()@label("Midpoint", hjust = 0, vjust = 1) +
  s1@midpoint(c(0, .5, 1))@label(plot_point = TRUE,
                             hjust = 1,
                             vjust = 0)
```


To find the midpoint 25% of the distance between the endpoints of segment:

```{r}
#| label: midpoint25
s1@midpoint(position = .25)
```


```{r}
#| label: fig-midpoint25
#| fig-cap: Midpoint
#| code-fold: true

bp +
  s1 +
  {p25 <- s1@midpoint(.25)} +
  p25@label(
    label = c(
      p25@auto_label,
      "Midpoint a quarter the<br>way between endpoints"
    ),
    vjust = c(0, 1),
    hjust = c(1, 0)
  ) +
  s1@midpoint(c(0, 1))@label(plot_point = TRUE,
                             hjust = 1,
                             vjust = 0)
```

Multiple midpoints can be specified:

```{r}
#| label: fig-multiplemidpoints
#| fig-cap: Selecting multiple midpoints
bp + 
  s1 + 
    s1@midpoint(seq(0,1,.2))
```

A quick way to get the endpoints of a segment is to specify "midpoints" at positions 0 and 1:

```{r}
#| label: fig-endpoints
#| fig-cap: Selecting a segment's endpoints via the `midpoint` property.
bp + 
  s1 + 
  s1@midpoint(c(0,1))
```

# Segment chains

If a point object with multiple points is placed in the `p1` slot but the `p2` slot is left empty, a series of segments chained together will be created.

```{r}
#| label: fig-chain
#| fig-cap: Chained segments
bp + 
  ob_segment(ob_point(c(-4, -2, -1, 2,  4), 
                c(-2,  1, -2, 3, -3))) 
```




