---
title: "Colors"
knitr:
  opts_chunk: 
    collapse: true
    comment: '#>'
    dev: ragg_png
format: 
  html:
    toc: true
vignette: >
  %\VignetteIndexEntry{colors}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r setup}
library(ggdiagram)
```

The `class_color` object has some useful utilities for working with colors. It mostly makes use of functions from the tinter and farver packages.

The `class_color` object takes R color names or hex strings as input.

```{r orchid}
my_color <- class_color("orchid")
```

The underlying data of `class_color` can be retrieved with the `c` function or via the `@color` property:

```{r getdata}
c(my_color)
my_color@color
```

The `ob_*` classes have fill and color properties that can take direct character strings or `class_color` objects as input.

```{r ob_circle}
ggdiagram() +
  ob_circle(fill = my_color)
```

A variety of color manipulation functions are available. Colors can be darkened:

```{r darken}
ggdiagram() +
  ob_circle(fill = my_color@darken(.5))
```

Colors can be lightened:

```{r lighten}
ggdiagram() +
  ob_circle(fill = my_color@lighten(.5))
```

Colors can be made transparent:

```{r transparent}
ggdiagram() +
  ob_circle(fill = my_color@transparentize(.5)) +
  ob_circle(fill = my_color@transparentize(.5), 
            center = ob_point(1,0))
```

Here we create sequences of shades with the `@lighten` and `@darken` properties:

```{r makesequence}
#| fig-height: 2.5
ggdiagram() + 
  {my_array <- ob_circle(color = NA) %>% 
    ob_array(fill = my_color@lighten(seq(.1,1,length.out = 5)), 
             k = 5, 
             sep = .2)} + 
  ob_circle(color = NA) %>% 
    ob_array(fill = my_color@darken(seq(0,.9,length.out = 5)), 
             k = 5, 
             sep = .2) %>% 
    place(my_array, "below", sep = .2) 
```

The `@lighten` function makes colors appear the same as `@transparentize` with a white background. This feature can make be useful when text labels need to be placed over transparent shapes. The `@darken` function makes colors appear the same as `@transparentize` with a black background (with `@darken`'s `amount` values subtracted from 1).


# Color Properties

Different properties of colors and be retrieved and set. Using the HSV color model for Hue (0--360), Saturation (0--1), and Value/Brightness (0--1)

```{r hsv}
my_color@hue
my_color@saturation
my_color@brightness
```

We can set a sequence of colors with the same brightness and saturation as the original color but with different hues:

```{r hsvsequence}
#| fig-height: 1.5
my_color_array <- class_color(
  my_color, 
  hue = my_color@hue + seq(0,720, length.out = 12))

ggdiagram() +
  ob_circle(color = NA) %>%
  ob_array(fill = my_color_array,
           k = 12,
           sep = .2)
```


We can set an array of colors with the same hue as the original color but with different saturation and/or brightness:

```{r samehue}
#| fig-height: 1.5
my_color_array <- class_color(my_color, 
                              saturation = seq(.1, .6, .1))

ggdiagram() +
  ob_circle(color = NA) %>%
  ob_array(fill = my_color_array, 
           k = 6, 
           sep = .2)
```

Alternately, the RGB (Red/Green/Blue) color properties can also be retrieved or set. Values are integers ranging from 0 to 255.

```{r rgb}
my_color@red
my_color@green
my_color@blue
```




