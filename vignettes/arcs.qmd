---
title: "Arcs and Wedges"
format: 
  html:
    toc: true
    html-math-method: katex
vignette: >
  %\VignetteIndexEntry{arcs}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| label: presetup
#| include: false
library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
knitr::opts_chunk$set(
  collapse = TRUE,
  dev = "ragg_png",
  comment = "#>",
  fig.width = 7,
  fig.height = 7
)
```

# Setup

```{r}
#| label: setup
library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
```

# Base Plot

## Base plot

To avoid repetitive code, we make a base plot:

```{r}
#| label: baseplot
my_font <- "Roboto Condensed"
my_font_size <- 20
my_point_size <- 2.5

# my_colors <- viridis::viridis(2, begin = .25, end = .5)
my_colors <- c("#3B528B", "#21908C")
update_geom_defaults(geom = "richtext", 
                     new = list(family = my_font, 
                                size = .8 * my_font_size / ggplot2::.pt))

update_geom_defaults("point", list(size = my_point_size))
update_geom_defaults("arrow_segment", list(length_head = 5, linewidth = .75))
update_geom_defaults("arrow", list(length_head = 5, linewidth = .75))

theme_set(
  theme_minimal(
    base_size = my_font_size, 
    base_family = my_font) +
    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))

bp <- ggplot() +
  coord_equal() +
  scale_x_continuous(labels = WJSmisc::signs_centered, 
                     limits = c(-4, 4)) +
  scale_y_continuous(labels = signs::signs, 
                     limits = c(-4, 4)) +
  theme_minimal(base_size = 16) +
  theme(
    axis.title.x =  element_text(face = "italic"),
    axis.title.y = element_text(
      face = "italic",
      angle = 0,
      hjust = .5,
      vjust = .5
    )
  )
```

# Arcs

Just as a segment is part of a line between two points on the line, an arc is part of a circle between two points (on the circle). Thus, an arc has all the properties a circle, with the addition of starting and ending points. For the sake of simplicity, these starting points are specified as angles.

Arc starting and ending points can be specified with any angle unit. If a number is used, it will be interpreted as a degree unit.

```{r}
#| label: arc
ob_arc(center = ob_point(1,2), 
    start = 25, 
    end = 75, 
    radius = 3)
```

```{r}
#| label: fig_arc
#| fig-cap: Arc with starting and ending angles and center point.
#| code-fold: true
bp +
  {p1 <- ob_point(0, 0)} + 
  {a1 <- ob_arc(
    center = p1,
    radius = {r <- 4},
    start = {ang_start <- degree(25)},
    end = {ang_end <- degree(75)}
    )} +
  ob_label(
    label = paste0("Center ", p1@auto_label), 
    p = p1, 
    vjust = 1.1) + 
  connect(
    p1, 
    a1@midpoint(), 
    label = paste0("Radius = ", r)) + 
  ob_label(
    label = ang_start, 
    p = a1@midpoint(0),
    polar_just = ob_polar(ang_start + degree(-90), 1.3), 
    plot_point = TRUE) +
  ob_label(
    label = ang_end, 
    p = a1@midpoint(1), 
    polar_just = ob_polar(ang_end + degree(90), 1), 
    plot_point = TRUE)
```

# Starting or ending points of arcs

Sometimes you do not know where the center of an arc should be. Instead, you want the arc to start or end at a specific point. For example, you might want to specify the start point or the end point.

```{r}
#| label: fig-startpoint
#| fig-cap: Fixing the start and end points of an arc

bp +
  {p1 <- ob_point(0, 0)} +
  ob_arc(start = -45, 
      end = 45, 
      radius = 2,
      color = "red", 
      start_point = p1)  +
  ob_arc(start = -45, 
      end = 45, 
      radius = 2,
      color = "blue", 
      end_point = p1) 
```

# Midpoints

The midpoint function can find one or more midpoints at different positions. The default position is .5.

```{r}
#| label: fig-midpoint
#| fig-cap: Default midpoint on a arc
bp +
  a1 +
  a1@midpoint()
```

The starting and ending points are at position 0 and 1, respectively.

```{r}
#| label: fig-multimidpoints
#| fig-cap: Multiple midpoints can be specified
bp +
  a1 +
  a1@midpoint(position = c(0,1))
```

# Labelling arcs

By default, the arc label will appear outside the midpoint of the arc

```{r}
#| label: fig-label
#| fig-cap: "A labelled arc"
bp +
  ob_arc(radius = 3, 
      start = 20, 
      end = 120, 
      label = degree(100)) 
```

If a label is needed elsewhere, it can be set with the `label` function's `position` property.

```{r}
#| label: fig-labelmultiple
#| fig-cap: "Multiple labels on an arc"
bp +
  ob_arc(radius = 3, 
      start = 20, 
      end = 120, 
      label = ob_label(c("Start", "Middle", "End"), 
                    position = c(0,.5, 1), 
                    plot_point = TRUE))
```

If the orientation of the label needs to be changed, it can be set with `vjust`, `hjust`, or `polar_just`.

```{r}
#| label: fig-labeladjust
#| fig-cap: "The arc's labels can be adjusted."
bp + 
  ob_arc(radius = 3, 
      start = 20, 
      end = 120,
      label = ob_label("A", 
                    vjust = 1.2, 
                    hjust = .75))
```

There are cases where the arc is already created and a label is needed. Although the `label` can be added after the arc has been created, the position would have to be set manually (otherwise the position will be at 0,0 by default). In such cases, the `auto_label` function can help place the label correctly. By default, the `auto_label` will show the the `theta` property (i.e., `end` âˆ’ `start`).

```{r}
#| label: fig-autolabel
#| fig-cap: Using the arc's autolabel
bp + 
  {a1 <- ob_arc(radius = 3, 
      start = 20, 
      end = 120)} + 
  a1@autolabel()
```

However, any label can be inserted at any position.

```{r}
#| label: fig-autolabeladjust
#| fig-cap: Adjusting the arc's autolabel
bp + 
  a1 +
  a1@autolabel(label = "Start", position = 0)
```

# Arcs with arrows

The arc object is plotted using `ggarrow::arrow`. This means that arrows can be placed on either end of an arc.

```{r}
#| label: fig-arcarrow
#| fig-cap: "Arcs with arrowheads"
my_arrow_head <- arrowheadr::arrow_head_deltoid(d = 2.2)

bp + 
  ob_arc(radius = 3, 
      start = 0, 
      end = 180, 
      arrow_head = my_arrow_head,
      arrow_fins = my_arrow_head, 
      linewidth = .75,
      arrowhead_length = 8)
```

# Wedges

If the `ob_arc@wedge` property is set to `TRUE`, the `ob_arc` function will plot a wedge using `ggplot2::geom_polygon`. The `ob_wedge` function is a convenient wrapper function for `ob_arc` that sets the `@wedge` property to `TRUE`.

```{r}
#| label: fig-wedge
#| fig-cap: Arc wedges
theta <- c(0, 120, 180, 360)
bp +
  ob_wedge(radius = 3, 
      start = theta[-length(theta)], 
      end = theta[-1], 
      fill = c("dodgerblue4", "orchid4", "darkgreen"), 
      color = "white", 
      linewidth = 1)
```
