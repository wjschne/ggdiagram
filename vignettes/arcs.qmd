---
title: "Arcs"
format: 
  html:
    toc: true
    html-math-method: katex
vignette: >
  %\VignetteIndexEntry{points}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r presetup, include = FALSE}
library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
knitr::opts_chunk$set(
  collapse = TRUE,
  dev = "ragg_png",
  comment = "#>",
  fig.width = 7,
  fig.height = 7
)

```

# Setup

```{r setup}
library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)


```

# Base Plot


## Base plot

To avoid repetitive code, we make a base plot:

```{r baseplot}
my_font <- "Roboto Condensed"
my_text_size <- 20
my_point_size <- 2.5
my_arrow_head <- arrowheadr::arrow_head_deltoid()
# my_colors <- viridis::viridis(2, begin = .25, end = .5)
my_colors <- c("#3B528B", "#21908C")
update_geom_defaults(geom = "richtext", 
                     new = list(family = my_font, 
                                size = .8 * my_text_size / ggplot2::.pt))

update_geom_defaults("point", list(size = my_point_size))
update_geom_defaults("arrow_segment", list(length_head = 5))


theme_set(
  theme_minimal(
    base_size = my_text_size, 
    base_family = my_font) +
    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))




bp <- ggplot() +
  coord_equal() +
  scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +
  scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +
  theme_minimal(base_size = 16) +
  theme(
    axis.title.x =  element_text(face = "italic"),
    axis.title.y = element_text(
      face = "italic",
      angle = 0,
      hjust = .5,
      vjust = .5
    )
  )
```

# Arcs

Just as a segment is part of a line between two points on the line, an arc is part of a circle between two points (on the circle). Thus, an arc has all the properties a circle, with the addition of starting and ending points. For the sake of simplicity, these starting points are specified as angles.

Arc starting and points can be specified with any angle unit. If a number is used, it will be interpreted as a degree unit.

```{r arc}
arc(center = point(1,2), start = 20, end = 150, radius = 3)
```


```{r fig-arc}
#| fig-cap: Arc with starting and ending angles and center point.
#| code-fold: true
bp +
  {a1 <- arc(
    center = {p1 <- point(0, 0)},
    radius = {r <- 4},
    start = {ang_start <- degree(25)},
    end = {ang_end <- degree(75)}
    )} +
  label(p = p1, label = "Center " + p1@auto_label, vjust = 1, plot_point = TRUE) + 
  path(p1, a1@midpoint(), label = "Radius = " + r) + 
  label(label = ang_start, 
        p = a1@midpoint(0),
        polar_just = polar(ang_start + degree(-90), 1.3), 
        plot_point = TRUE) +
  label(label = ang_end, 
        p = a1@midpoint(1), 
        polar_just = polar(ang_end + degree(90), 1), 
        plot_point = TRUE)
```

Sometimes you do not know where the center of an arc should be. Instead, you want the arc to start or end at a specific point. For example, you might want to specify the start point or the end point.


```{r fig-startpoint}
bp +
  {p1 <- point(0, 0)} +
  arc(start = -45, end = 45, radius = 2,color = "red", start_point = p1)  +
  arc(start = -45, end = 45, radius = 2,color = "blue", end_point = p1) 
```

