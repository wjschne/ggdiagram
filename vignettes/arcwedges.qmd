---
title: "Arcs and Wedges"
format: 
  html:
    toc: true
    html-math-method: katex
vignette: >
  %\VignetteIndexEntry{arcwedges}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| label: presetup
#| include: false

library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
knitr::opts_chunk$set(
  collapse = TRUE,
  dev = "ragg_png",
  comment = "#>",
  fig.width = 7,
  fig.height = 7
)

```

# Setup

## Packages

```{r}
#| label: setup

library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
```

## Base Plot

To avoid repetitive code, we make a base plot:

```{r}
#| label: baseplot
#| cache: false

my_font <- "Roboto Condensed"
my_font_size <- 20
my_point_size <- 2
my_arrowhead <- arrowheadr::arrow_head_deltoid(2.3, n = 101)

# my_colors <- viridis::viridis(2, begin = .25, end = .5)
my_colors <- c("#3B528B", "#21908C")

theme_set(
  theme_minimal(
    base_size = my_font_size,
    base_family = my_font) +
    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))
ggplot2::update_geom_defaults("richtext", list(family = my_font))

bp <- ggdiagram(
  font_family = my_font,
  font_size = my_font_size,
  point_size = my_point_size,
  linewidth = .5,
  theme_function = theme_minimal,
  axis.title.x =  element_text(face = "italic"),
  axis.title.y = element_text(
    face = "italic",
    angle = 0,
    hjust = .5,
    vjust = .5)) +
  scale_x_continuous(labels = signs_centered,
                     limits = c(-4, 4)) +
  scale_y_continuous(labels = signs::signs,
                     limits = c(-4, 4))


```

# Arcs

Just as a segment is part of a line between two points on the line, an arc is part of a circle between two points (on the circle). Thus, an arc has all the properties a circle, with the addition of starting and ending points. For the sake of simplicity, these starting points are specified as angles.

Arc starting and ending points can be specified with any angle unit. If a number is used, it will be interpreted as a degree unit.

```{r}
#| label: arc

ob_arc(center = ob_point(1,2), 
    start = 25, 
    end = 75, 
    radius = 3)


```

```{r}
#| label: fig_arc
#| fig-cap: Arc with starting and ending angles and center point.
#| code-fold: true
ggtext::GeomRichText$default_aes
bp +
  {p1 <- ob_point(0, 0)} + 
  {a1 <- ob_arc(
    center = p1,
    radius = {r <- 4},
    start = {ang_start <- degree(25)},
    end = {ang_end <- degree(75)}
    )} +
  ob_label(
    label = paste0("Center ", p1@auto_label), 
    center = p1, 
    vjust = 1.1) + 
  connect(
    p1, 
    a1@midpoint(), 
    label = paste0("Radius = ", r)) + 
  ob_label(
    label = ang_start, 
    center = a1@midpoint(0),
    polar_just = ob_polar(ang_start + degree(-90), 1.3), 
    plot_point = TRUE) +
  ob_label(
    label = ang_end, 
    center = a1@midpoint(1), 
    polar_just = ob_polar(ang_end + degree(90), 1), 
    plot_point = TRUE,
    family = my_font)
```

# Starting or ending points of arcs

Sometimes you do not know where the center of an arc should be. Instead, you want the arc to start or end at a specific point. For example, you might want to specify the start point or the end point.

```{r}
#| label: fig-startpoint
#| fig-cap: Fixing the start and end points of an arc


p1 <- ob_point(0, 0)

bp +
    ob_arc(start = -45, 
      end = 45, 
      radius = 2,
      color = "orchid4", 
      start_point = p1)  +
  ob_arc(start = -45, 
      end = 45, 
      radius = 2,
      color = "forestgreen", 
      end_point = p1) +
  p1 
```

As a example, I used the `start_point` argument to recreate a fun meme about a "square" object with 4 equal sides that meet at right angles:

```{r fig-square}
#| fig-cap: A "square" with four equal sizes that meet at right angles.
little_r <- 1 / (2 * pi - 1)
ggdiagram() +
  {p1 <- ob_point(0,0)} +
  {p2 <- ob_point(1,0)} +
  ob_segment(p1, p2) +
  {a1 <- ob_arc(start = 0, end = radian(1), radius = 1 + little_r, start_point = p2)} +
  {p3 <- a1@midpoint(1)} +
  {p4 <- a1@normal_at(radian(1), distance = -1)} +
  ob_segment(p3, p4) + 
  ob_arc(start_point = p4, 
         radius = little_r, 
         start = radian(1), 
         end = turn(1))
```



# Midpoints

The midpoint function can find one or more midpoints at different positions. The default position is .5.

```{r}
#| label: fig-midpoint
#| fig-cap: Default midpoint on a arc

bp +
  a1 +
  a1@midpoint()
```

The starting and ending points are at position 0 and 1, respectively.

```{r}
#| label: fig-multimidpoints
#| fig-cap: Multiple midpoints can be specified

bp +
  a1 +
  a1@midpoint(position = c(0,1))
```

# Labelling arcs

By default, the arc label will appear outside the midpoint of the arc

```{r}
#| label: fig-label
#| fig-cap: "A labelled arc"

bp +
  ob_arc(radius = 3, 
      start = 20, 
      end = 120, 
      label = ob_label(degree(100),
                       family = my_font,
                       size = my_font_size))
```

If a label is needed elsewhere, it can be set with the `label` function's `position` property.

```{r}
#| label: fig-labelmultiple
#| fig-cap: "Multiple labels on an arc"

bp +
  ob_arc(
    radius = 3,
    start = 20,
    end = 120,
    label = ob_label(
      c("Start", "Middle", "End"),
      position = c(0, .5, 1),
      plot_point = TRUE,
      family = my_font,
      size = my_font_size
    )
  )
```

If the orientation of the label needs to be changed, it can be set with `vjust`, `hjust`, or `polar_just`.

```{r}
#| label: fig-labeladjust
#| fig-cap: "The arc's labels can be adjusted."

bp +
  ob_arc(
    radius = 3,
    start = 20,
    end = 120,
    label = ob_label(
      "A",
      vjust = 1.2,
      hjust = .75,
      family = my_font,
      size = my_font_size
    )
  )
```

There are cases where the arc is already created and a label is needed. Although the `label` can be added after the arc has been created, the position would have to be set manually (otherwise the position will be at 0,0 by default). In such cases, the `auto_label` function can help place the label correctly. By default, the `auto_label` will show the the `theta` property (i.e., `end` âˆ’ `start`).

```{r}
#| label: fig-autolabel
#| fig-cap: Using the arc's autolabel

bp + 
  {a1 <- ob_arc(radius = 3, 
      start = 20, 
      end = 120)} + 
  a1@autolabel(family = my_font,
               size = my_font_size)
```

However, any label can be inserted at any position.

```{r}
#| label: fig-autolabeladjust
#| fig-cap: Adjusting the arc's autolabel

bp + 
  a1 +
  a1@autolabel(label = "Start", 
               position = 0,
               family = my_font,
               size = my_font_size)
```
# Arcs with arrows

The arc object is plotted using `ggarrow::arrow`. This means that arrows can be placed on either end of an arc.

```{r}
#| label: fig-arcarrow
#| fig-cap: "Arcs with arrowheads"

my_arrow_head <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)

bp + 
  ob_arc(radius = 3, 
      start = 0, 
      end = 180, 
      arrow_head = my_arrow_head,
      arrow_fins = my_arrow_head, 
      arrowhead_length = 8)
```

# Wedges

The `ob_arc` function has a `@type` property that can be set to `"arc"`, `"wedge"`, or `"segment"`. When set to `arc`, the arc is drawn with `geom::arrow` so that the arc endpoints can be arrows. Otherwise, when `@type` is `wedge` or `segment`, `ob_arc` drawn with `ggplot2::geom_polygon`. 

The `ob_wedge` function is a convenient wrapper function for `ob_arc` that sets the `@type` property to `wedge`.

```{r}
#| label: fig-wedge
#| fig-cap: Arc wedges

theta <- c(0, 120, 180, 360)
bp +
  ob_wedge(radius = 3, 
      start = theta[-length(theta)], 
      end = theta[-1], 
      fill = c("dodgerblue4", "orchid4", "darkgreen"), 
      color = "white", 
      linewidth = 1)
```


# Circular Segments

A circular segment is an arc made into a polygon. 

The `ob_circular_segment` function is a convenient wrapper function for `ob_arc` that sets the `@type` property to `segment`.


```{r fig-threecircularsegments}
#| fig-cap: Three circular segments
ggdiagram() +
  ob_circular_segment(
    start = c(30, 150, 270),
    end = c(150, 270, 390),
    fill = c("dodgerblue4", "orchid4", "darkgreen")
  )
```

Objects made with `ob_arc`, `ob_wedge`, or `ob_circular_segment` can return important features of arcs, including the `chord`, `sagitta`, and `arc_length`. In @fig-circularsegment, the `chord` is the `ob_segment` that connects the endpoints of the arc.  The `sagitta` is `ob_segment` from the arc's midpoint to the chord's midpoint. Not shown in @fig-circularsegment, the `apothem` is the `ob_segment` from the arc's center point to the midpoint of the chord. The radius is the sum of the distances spanned by the apothem and the sagitta.

```{r fig-circularsegment}
#| fig-cap: A circular segment and arc and its chord.


bp +
  {cs <- ob_circular_segment(
      radius = 3,
      start = radian(-acos(1 / 3)),
      end = radian(acos(1 / 3)),
      fill = "dodgerblue3"
    )} +
  ob_arc(
    radius = 3,
    start = cs@end,
    end = cs@start + degree(360),
    linetype = "dashed"
  ) +
  cs@chord@midpoint()@label(
    paste0("Chord Length = ", round(cs@chord@distance, 2)),
    angle = cs@chord@line@angle,
    vjust = -.1,
    color = "black",
    size = 24,
    family = my_font
  ) +
  cs@sagitta %>% set_props(color = "white") +
  cs@sagitta@midpoint()@label(
    paste0("Sagitta = ", round(cs@sagitta@distance, 2)),
    vjust = 0,
    size = 20,
    family = my_font,
    fill = NA, 
    color = "white"
  ) +
  ob_path(
    ob_point(
      cs@polygon %>% 
        mutate(id = dplyr::row_number()) %>% 
        arrange(-id) %>% 
        select(x, y)
    ),
    label = ob_label(
      paste0("Arc Length = ", round(cs@arc_length, 2)),
      vjust = -0.1,
      size = 24,
      family = my_font,
      color = "black"
    ),
    color = "dodgerblue3"
  )
  

```


Fun fact: Our geometric concepts *arc*, *chord*, and *sagitta* are all archery terms, deriving from the Latin words *arcus* (bow), *chorda* (string), and *sagitta* (arrow). 
