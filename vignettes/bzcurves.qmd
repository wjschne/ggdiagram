---
title: "Bezier Curves"
format: 
  html:
    toc: true
    html-math-method: katex
vignette: >
  %\VignetteIndexEntry{points}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r presetup, include = FALSE}
library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
knitr::opts_chunk$set(
  collapse = TRUE,
  dev = "ragg_png",
  comment = "#>",
  fig.width = 7,
  fig.height = 7
)

```

# Setup

```{r setup}
library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
library(geomtextpath)

```

# Base Plot


## Base plot

To avoid repetitive code, we make a base plot:

```{r baseplot}
my_font <- "Roboto Condensed"
my_text_size <- 20
my_point_size <- 2.5
my_arrowhead <- arrowheadr::arrow_head_deltoid(2.1)
# my_colors <- viridis::viridis(2, begin = .25, end = .5)
my_colors <- c("#3B528B", "#21908C")
update_geom_defaults(geom = "richtext", 
                     new = list(family = my_font, 
                                size = .8 * my_text_size / ggplot2::.pt))

update_geom_defaults("point", list(size = my_point_size))
update_geom_defaults("arrow_segment", list(length_head = 5))
update_geom_defaults("arrow", list(linewidth = 2))
update_geom_defaults("labelpath", list(family = my_font))

theme_set(
  theme_minimal(
    base_size = my_text_size, 
    base_family = my_font) +
    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))




bp <- ggplot() +
  coord_equal() +
  scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +
  scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +
  theme_minimal(base_size = 16) +
  theme(
    axis.title.x =  element_text(face = "italic"),
    axis.title.y = element_text(
      face = "italic",
      angle = 0,
      hjust = .5,
      vjust = .5
    )
  )
```

# Bezier curves

The `bzcurve` function creates an object that specifies the control points for a bezier curve. A bezier curve is an extremely useful way of making elegantly curved lines between points.

```{r fig-bzcurve}
#| fig-cap: Bezier curve with contol points
p <- point(c(-4,-3,4), c(0,-2, 0), color = "dodgerblue")
bp + 
  p + 
  bzcurve(p, resect = 3, linewidth = 1, n = 1000)
```

I like to set control points using the `polar` function to create points at a certain distance and angle from the starting and ending points. The `c` function creates a list of all the points, and the `bind` function binds the list into a single point object containing all the points.


```{r fig-bzlabel}
#| fig-cap: Bezier curve with contol points and label
p_start <- point(-4,0)
p_end <- point(4, 0)

p <- c(p_start, 
       p_start + polar(degree(0), 6), 
       p_end + polar(degree(180 + 80), 4), 
       p_end) |> 
  bind() |> 
  set_props(color = "blue")

bp + 
  segment(p, linetype = "dashed") +
  bzcurve(p, 
          label = label(".45"), 
          arrowhead_length = 8, 
          resect = 2, 
          arrow_head = my_arrowhead) + 
  p


```

# Multiple bezier paths

If multiple point objects are supplied as a list (or concatenated with the `c` function), a bezier curve will be created for each point object in the list.

```{r fig-multbz}
#| fig-cap: Multiple bezier paths
bp + 
  bzcurve(
    c(
      point(c(-4, -3, 4), c(0,  4, 0)),
      point(c(-4, -3, 4), c(0, -4, 0))
    ),
    resect_head = 2, 
    arrowhead_length = 7,
    arrow_head = my_arrowhead)
```

