---
title: "Path Diagrams"
format: 
  html:
    toc: true
    html-math-method: katex
vignette: >
  %\VignetteIndexEntry{pathdiagrams}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| label: presetup
#| include: false
#| cache: false
library(ggplot2)
library(ggdiagram)
library(tibble)
library(dplyr)
library(purrr)
library(ggtext)
library(geomtextpath)
library(ggimage)
knitr::opts_chunk$set(
  collapse = TRUE,
  dev = "ragg_png",
  comment = "#>",
  fig.width = 7,
  fig.height = 7,
  cache = F
)

my_font <- "Roboto Condensed"
update_geom_defaults("richtext", 
                     list(family = my_font, 
                          size = 0.8 * 20 / ggplot2::.pt))
update_geom_defaults("line", list(linewidth = .75))
update_geom_defaults("segment", list(linewidth = .75))
update_geom_defaults("point", list(size = 2))
update_geom_defaults(
  "labelpath", 
  list(
    family = my_font,
    size = 0.8 * 20 / ggplot2::.pt))
```

# Setup

```{r}
#| label: setup
library(ggplot2)
library(ggdiagram)
library(tibble)
library(dplyr)
library(purrr)
```

# Path diagrams

Structural equation models are often displayed with path diagrams. The visual vocabulary of path diagrams is fairly simple. As seen in @fig-objecttypes, an observed variable is a square or rectangle, and a latent variable is a circle or ellipse. Often omitted for clarity, means and intercepts are constants that can be depicted with triangles.

```{r}
#| label: fig-objecttypes
#| fig-cap: Elements of a path diagram
#| fig-height: 3
#| code-fold: true

ggplot() + 
  coord_equal() + 
  theme_void() +
  {lv <- ob_circle(label = "Latent<br>Variable")} +
  {r <- ob_rectangle(width = sqrt(pi),
                  height = sqrt(pi),
                  label = "Observed<br>Variable") |>
    place(lv, "right", .5)} +
  {i <- ob_circle(n = 3, 
               radius = 1.25, 
               label = "Mean/<br>Intercept") |> 
    place(r, "right", .3) + ob_point(0, -.25)} 

```

In @fig-pathtype, two types of relationships are depicted. A single-headed arrow indicates a direct causal influence. A curved double-headed arrow indicates a correlation between two variables but does not specify the causal nature of the relationship.

```{r}
#| label: fig-pathtype
#| fig-cap: Relationships in a path diagram
#| code-fold: true
#| out-width: 70%
ggplot() + 
  coord_equal() + 
  theme_void() +
  {this <- ob_circle(label = ob_label("This", size = 40))} +
  {that <- ob_circle(label = ob_label("That", size = 40)) |>
    place(this, "right")} +
  connect(this, that, label = "Causes", resect = 2) +
  {A <- this |> 
    place(this, "below")} +
  {B <- that |> 
    place(that, "below")} +
  covariance(A, B, label = ob_label("Correlates with", vjust = 0)) 

```

$$\begin{align}Y&\sim \underbrace{b_0+b_1X}_{\hat{Y}}+e\\
X&\sim \mathcal{N}(\mu_X,\sigma^2_X)\\
e&\sim \mathcal{N}(0,\sigma^2_e)\end{align}$$

```{r}
#| label: fig-regression
#| fig-cap: Regression Model
#| fig-width: 8
#| fig-height: 4
#| code-fold: true
#| out-width: 100%

make_equation <- function(
    x, 
    filestem,
    border = 1, 
    family = "Roboto Condensed") {
  txt <- paste0(
  "\\documentclass[border=", 
  border, 
  "pt]{standalone}\n\\usepackage{amsmath}\n\\usepackage{fontspec}\n",
  "\\setmainfont{",
  family,
  "}\n\\begin{document}\n$",
  x,
  "$\\end{document}")
  file_tex <- paste0(filestem, ".tex")
  cat(txt, file = file_tex)
  tinytex::xelatex(file_tex)
  paste0(filestem, ".pdf")
}

sigma2x <- make_equation(r"(\text{\emph{σ}}^{\text{2}}_{\mkern-1.5mu\text{\emph{X}}})", "sigma2x")

sigma2e <- make_equation(r"(\text{\emph{σ}}^{\text{2}}_{\mkern-1.5mu\text{\emph{e}}})", "sigma2e")

observed <- redefault(ob_ellipse, m1 = 15)
lb_observed <- redefault(ob_label, size = 60, nudge_y = -.15, fill = NA)
direct <- redefault(connect, resect = 2)
lb_direct <- redefault(ob_label, angle = 0, position = .47)
ggplot() + 
  coord_equal() + 
  theme_void() +
  {X <- observed(label = lb_observed("*X*"))} +
  {Yhat <- observed(label = lb_observed("*Ŷ*")) |> 
    place(X, "right", sep = 2)} +
  {Y <- observed(
    label = lb_observed("*Y*")) |> 
    place(Yhat, "right", sep = .75)} +
  {X_Yhat <- connect(X,
                  Yhat, 
                  label = ob_label("*b*~1~"), 
                  resect = 2)} + 
  {X_Y <- direct(Yhat,Y)} + 
  {e <- ob_circle(radius = .5, 
                  label = lb_observed("*e*", size = 30, nudge_y = 0)) %>% 
    place(Y, "right", sep = .75)} +
  direct(e, Y) +
  {sigma_x <- variance(X, 
                       bend = -20, 
                       where = degree("west"))} +
  {sigma_e <- variance(e, 
                       looseness = 1.8,
                       theta = degree(60),
                       where = "east")} +
  {i <- ob_polygon({icenter <- ob_polar(degree(60), 
                               distance(X@center,
                                        Yhat@center)) + ob_point(0,-.2)} +
               ob_polar(degree(c(90,210, 330)), r = .8), 
             fill = NA, linewidth = .5,
             color = "black", 
             label = ob_label(1, size = 30))} +
  direct(intersection(i, ob_segment(icenter, X@center)),
          X,
          label = lb_direct("*&mu;~X~*"),
          resect = 2) +
  direct(intersection(i, ob_segment(icenter, Yhat@center)),
          Yhat,
          label = lb_direct("*b*~0~")) +
  ggimage::geom_image(
    data = tibble(
      x = c(sigma_x@midpoint()@x,
            sigma_e@midpoint()@x),
      y = c(sigma_x@midpoint()@y,
            sigma_e@midpoint()@y),
      image = c(sigma2x, sigma2e)),
    aes(x = x,
        y = y,
        image = image),
    size = .07)


```

```{r}
#| label: fig-latent3
#| fig-width: 5
#| fig-cap: "A latent variable with three observed indicators and three latent error terms."
#| code-fold: true
ggplot() + 
  coord_equal() + 
  theme_void() +
  # Place a latent variable at the top
  {l1 <- ob_circle(radius = 2)} +
  # Place an array of observed variables below the circle
  {o3 <- ob_ellipse(m1 = 9) |> 
    place(from = l1, 
          where = "below", 
          sep = 2) |> 
    shape_array(
      k = 3,
      where = 0,
      sep = .4)} +
  # Connect the latent to the observed variables at the north anchor point
  {l1_o3 <- connect(l1, 
                    o3@point_at("north"), 
                    resect = 2)} + 
  # Place error terms below each observed variable
  {e3 <- ob_circle(radius = .75) |>
    place(o3,
          where = "below",
          sep = .85)} +
  # Connect the error terms to the observed variables
  {e3_o3 <- connect(e3, o3, resect = 2)} +
  # latent variance1
  {v_l1 <- variance(l1, where = "north")} +
  # label(1, v_l1@midpoint()) + 
  {v_e3 <- variance(
    e3,
    where = "south",
    looseness = 1.5,
    resect = unit(3, "pt"),
    arrowhead_length = unit(7, "pt"), 
    arrow_head = arrowheadr::arrow_head_deltoid(2.4),
    arrow_fins = arrowheadr::arrow_head_deltoid(2.4))} 
  
```

```{r}
#| label: fig-path
#| fig-cap: A structural equation path diagram
#| fig-height: 5.6
#| code-fold: true
#| out-width: 100%

my_fills <- viridis::viridis(n = 3, begin = .3, end = .6) %>% 
  class_color() %>% 
  set_props(saturation = .6, brightness = .5) %>% 
  c()

my_path_color <- "gray40"
my_resect <- 1
broad <- c("Gv", "Gf", "Gc")
my_arrowhead <- arrowheadr::arrow_head_deltoid(2.3)
# my_arrowhead <- ggarrow::arrow_head_wings()
g2broad <- c(Gv = .84, Gf = .95, Gc = .80)
broad2indicator <- list(Gv = c(.78, .84, .91),
                     Gf = c(.88, .81, .74),
                     Gc = c(.74, .91, .93))
broad_variance <- 1 - g2broad ^ 2



latent <- redefault(ob_circle, 
                    color = NA)  


lb_latent <- redefault(ob_label, 
                            size = 30, 
                            fill = NA, 
                            color = "white")

observed <- redefault(ob_ellipse, 
                           a = .5, 
                           b = .5, 
                           m1 = 10, 
                           # fill = my_fill,
                           color = NA)

lb_observed <- redefault(ob_label, 
                            size = 15, 
                            fill = NA, 
                            color = "white",
                            nudge_y = -.04)

lb_path <- redefault(ob_label,
                          size = 11,
                          fill = "white",
                          color = my_path_color)

direct <- redefault(
  connect,
  resect = my_resect,
  color = my_path_color,
  arrow_head = my_arrowhead,
  linewidth = .5,
  length_head = 6
)


var_latent <- redefault(
  variance, 
  theta = 40,
  resect = my_resect,
  color = my_path_color, 
  looseness = .9, 
  linewidth = .5,
  arrow_head = my_arrowhead,
  arrow_fins = my_arrowhead,
  arrowhead_length = 6)





ggplot() + 
  coord_equal() + 
  theme_void() +
  {g <- latent(label = lb_latent("*g*"), fill = "gray15")} + 
  var_latent(g, label = lb_path(1)) +
  {Gx <- place(g, g,where = "below", sep = 1.6) |> 
    shape_array(k = 3, 
                sep = 2, 
                label = lb_latent(broad, 
                                  vjust = .6),
                fill = my_fills)} +
  var_latent(Gx, 
             where = "left", 
             color = Gx@fill,
             label = lb_path(
               round_probability(broad_variance, 
                                 phantom_text = "."),
               color = Gx@fill)) +
  {pGx <- direct(g, Gx, color = Gx@fill)} +
  {lb_path(
    label = round_probability(g2broad, 
                              phantom_text = "."), 
    p = pGx@line@point_at_y(pGx[2]@midpoint(
      position = .47)@y),
    color = Gx@fill)} +
  # list----
  purrr::map(as.list(Gx), \(b) {
    o1 <- place(observed(fill = b@fill), 
                from = b, 
                where = "south",
                sep = 1.6)
    
    o <- shape_array(
      o1,
      k = 3, 
      sep = .2,
      fill = purrr::map_chr(c(.6, .75, .9), tinter::lighten, x = o1@fill),
      label = lb_observed(
        paste0(
          b@label@label, 
          "~", 
          1:3, 
          "~")))
    
    p <- direct(b, o@point_at("north"), color = b@fill)
    l <- lb_path(round_probability(
      broad2indicator[[b@label@label]], 
      phantom_text = "."), 
      p = p@line@point_at_y(p[2]@midpoint(position = .47)@y),
      color = b@fill)
    v <- variance(
      o,
      where = "south",
      bend = -15,
      looseness = 1.7,
      resect = my_resect,
      color = b@fill,
      theta = 70,
      linewidth = .5,
      label = lb_path(
        round_probability(sqrt(1 - broad2indicator[[b@label@label]] ^ 2)),
        color = b@fill),
      arrow_head = my_arrowhead,
      arrow_fins = my_arrowhead,
      arrowhead_length = 6
    )
    
    c(o, p, v, l) %>% 
      lapply(as.geom)
  }) 
  
  

  

```

```{r}
#| label: fig-wedge
#| fig-cap: Latent variables with pie wedges to display residual variances
ggplot() + 
  coord_equal() + 
  theme_void() +
  {g <- latent(label = lb_latent("*g*"), fill = "gray15")} + 
  var_latent(g, label = lb_path(1)) +
  {Gx <- place(g, g,where = "below", sep = 3) |> 
    shape_array(k = 3, 
                sep = 3, 
                label = lb_latent(broad, 
                                  vjust = .6,
                                  color = "gray15"),
                fill = "gray15")} +
  var_latent(Gx, "left", 
             label = lb_path(
               round_probability(broad_variance, 
                                 phantom_text = "."),
               color =  my_fills),
             color = my_fills) +
  {pGx <- direct(g, Gx, color = Gx@fill)} +
  {lb_path(
    label = round_probability(g2broad, 
                              phantom_text = "."), 
    p = pGx@line@point_at_y(pGx[2]@midpoint(
      position = .47)@y),
    color = Gx@fill)} + 
  ob_wedge(center = Gx@center, 
         start = turn(.5) + turn(broad_variance) / 2, 
         end = turn(.5) - turn(broad_variance) / 2, 
         fill = my_fills) + 
  lb_latent(broad, p = Gx@center, vjust = .6)
```






```{r}
#| label: fig-Gc3
#| fig-cap: A latent variable with 3 indicators
#| fig-width: 5
#| code-fold: true
ggplot() + coord_equal() + theme_void() +
  # Latent Variable
  {Gc <- ob_circle(
      fill = "dodgerblue4",
      alpha = .6,
      color = NA,
      label = ob_label(
        "Gc",
        nudge_y = -.05,
        fill = NA,
        color = "white",
        size = 60))} +
  # Observed Variables
  {Gc_3 <- ob_ellipse(a = .5,
                   b = .5,
                   m1 = 10,
                   fill = "dodgerblue4") |> 
    place(from = Gc, where = "below", sep = 1.25) |> 
    shape_array(
      k = 3,
      where = 0,
      sep = .2,
      color = NA,
      alpha = c(.55,.7,.85),
      label = ob_label(subscript("Gc", seq(3)), 
                    size = 24,
                    nudge_y = -.05,
                    color = "white", 
                    fill = NA))} +
  # Paths from latent to observed
  {pGc_Gc_3 <- connect(Gc, Gc_3@point_at("north"), 
                        resect = 2, 
                        color = "gray30", 
                        alpha = 1)} + 
  # Place labels on a horizontal line
  ob_label(label = round_probability(c(.75, .65, .89)), 
        p = pGc_Gc_3@line@point_at_y(pGc_Gc_3[2]@midpoint()@y)) +
  # Place errors below observed variables
  {e_Gc_3 <- ob_circle(radius = .3, 
                        fill = "dodgerblue4", 
                        color = NA,
                        alpha = c(.55,.7,.85) - .2) |> 
    place(from = Gc_3, 
          where = "below", 
          sep = .4)} + 
  # Paths from errors to observed variables
  connect(x = e_Gc_3, 
          y = Gc_3, 
          color = "gray30", 
          resect = 2, 
          alpha = 1)

```


```{r}
#| label: fig-hierarchy
#| fig-cap: A hierarchical model of cognitive abilities in the Cattell-Horn-Carroll tradition [@schneiderCattellHornCarrollTheoryCognitive2018]
#| fig-width: 8
#| fig-height: 8
#| code-fold: true
black_gradient <- grid::radialGradient(rev(c("gray50", "gray2", "gray2")), stops = c(0,.35, 1))
my_serif_font <- "Equity Text A"
black_gradient_rev <- grid::radialGradient(c("gray50", "black"))
str_narrow <- "Narrow Abilities"
str_tests <- "Tests"
str_specifics <- "Specifics"
ggdiagram() +
  {g <- ob_circle(
      radius = 1.33,
      fill = NA,
      color = NA
    )} + 
  geom_polygon(data = ob_circle(radius = 9)@polygon, aes(x = x, y = y), fill = black_gradient) +
  geom_polygon(data = g@polygon, aes(x = x, y = y), fill = black_gradient_rev) +
  {broad_angle <- turn(seq(0, 1, length.out = 9)[-9] + 1 / 16) 
   broad_color <- hcl(seq(0, 360 - 360 / 8, 360 / 8) + 20, c = 55, l = 60)
    broad <- place(ob_circle(color = NA, fill = broad_color),
    g,
    where = broad_angle,
    sep = 1)} + 
  ob_label(
        "*g*",
        color = "gray90",
        fill = NA,
        size = 60,
        vjust = .4,
        family = my_serif_font
      ) +
  connect(g, broad, color = broad_color, resect = 1, linewidth = .75, length_head = 5) +
  purrr::map(as.list(broad), \(b) {
    geom_polygon(
      data = b@polygon, 
      aes(x = x, y = y), 
      fill = grid::radialGradient(c(tinter::lighten(b@fill, .4), tinter::lighten(b@fill, .8)), stops = c(0,1))) 
  }) +
  ob_label(
    c("Ga", "Gc", "Gf", "Gv", "Gs", "Gr", "Gl", "Gwm"),
    broad@center + ob_point(0, -.05),
    fill = NA,
    family = my_serif_font,
    size = 20,
    vjust = .55,
    angle = broad@center@theta + degree(-90 * sign(broad@center@theta@turn)),
    color = "gray20"
  ) +
  ob_path(purrr::map(as.list(broad %>% set_props(radius = c(rep(.67, 4), rep(.62, 4)))), \(x) x@point_at(
    x@center@theta + degree(seq(-90, 90, 10)))),
    label = ob_label(
      c("Auditory", "Knowledge", "Fluid", "Visual-Spatial", "Speed", "Fluency", "Efficiency", "Memory"),
            fill = NA,
            family = my_serif_font,
            vjust = 1,
      size = 9.5,
            spacing = 100
          ),
          color = "gray20",
          alpha = 0
  ) +
  ob_path(purrr::map(as.list(broad %>% set_props(radius = c(rep(.62, 4), rep(.67, 4)))), \(x) x@point_at(
    x@center@theta + degree(-180) + degree(seq(-90, 90, 10)))),
    label = ob_label(
      c("Processing", "Comprehension", "Reasoning", "Processing", "Processing", "Retrieval", "Learning", "Working"),
            fill = NA,
            family = my_serif_font,
            vjust = 1,
      size = 9.5,
            spacing = 100
          ),
          color = "gray20",
          alpha = 0
  ) +
  {narrow <- place(ob_circle(radius = .45, fill = rep(broad@fill, each = 5)), from = g, where = degree(seq(0, 360 - 360/40, 360/40) + 360/80), sep = 4.3)
    geom_polygon(
    aes(x = x,y = y, group = group, fill = fill),
    data = narrow@polygon, 
               color = NA)} + 
  {purrr::imap(as.list(broad), \(x, idx) {
    connect(x, narrow[(idx - 1) * 5 + 1:5], 
            color = tinter::lighten(x@fill, .5), 
            linewidth = .5,
            length_head = 6,
            resect = 1) %>% 
      as.geom()
  })} +
  {test_theta <- degree(seq(0, 360 - 360/120, 360/120) + 360/240)
  tests <- place(ob_ellipse(a = .18, m1 = 8, angle = test_theta, fill = rep(tinter::lighten(broad@fill, .2), each = 15), color = NA), from = g, where = test_theta, sep = 6.2)} +
  {specifics <- place(ob_circle(radius = .2, angle = test_theta, fill = rep(tinter::lighten(broad@fill, .15), each = 15), color = NA), from = g, where = test_theta, sep = 7.0)} +
  connect(specifics, tests, 
          color = specifics@fill, 
          linewidth = .3,
          length_head = 6, 
          resect = .5) +
  {purrr::imap(as.list(narrow), \(x, idx) {
    connect(x, tests[(idx - 1) * 3 + 1:3], color = tinter::lighten(x@fill, .5), 
            resect = 1, 
            linewidth = .3,
            length_head = 6) %>% 
      as.geom()
  })} +
  scale_fill_manual(values = map(broad@fill, \(fill) grid::radialGradient(c(tinter::lighten(fill, .15), tinter::lighten(fill, .4)), stops = c(0.2, 1), group = F)) %>% `names<-`(broad@fill)) +
  theme(legend.position = "none") +
  ob_label(label = rev(strsplit(str_narrow, split = character(0))[[1]]),p = narrow[seq(nchar(str_narrow)) + 2]@center, angle = narrow[seq(nchar(str_narrow)) + 2]@center@theta - degree(90), fill = NA, family = my_serif_font, size = 16, color = "gray30", vjust = .55) +
  ob_label(label = strsplit(str_narrow, split = character(0))[[1]],p = narrow[seq(nchar(str_narrow)) + 22]@center, angle = narrow[seq(nchar(str_narrow)) + 22]@center@theta + degree(90), fill = NA, family = my_serif_font, size = 16, color = "gray30", vjust = .55) +
  {purrr::map(65 + c(0,15, 30, 45), \(x) {
    ob_label(label = strsplit(str_tests, split = character(0))[[1]],p = tests[seq(nchar(str_tests)) + x]@center, angle = tests[seq(nchar(str_tests)) + x]@center@theta + degree(90), fill = NA, family = my_serif_font, size = 10, color = "gray30", vjust = .57)@geom()
  })} +
  {purrr::map(5 + c(0,15, 30, 45), \(x) {
    ob_label(label = rev(strsplit(str_tests, split = character(0))[[1]]),p = tests[seq(nchar(str_tests)) + x]@center, angle = tests[seq(nchar(str_tests)) + x]@center@theta - degree(90), fill = NA, family = my_serif_font, size = 10, color = "gray30", vjust = .57)@geom()
  })} +
  {purrr::map(63 + c(0,15, 30, 45), \(x) {
    ob_label(label = strsplit(str_specifics, split = character(0))[[1]],p = specifics[seq(nchar(str_specifics)) + x]@center, angle = specifics[seq(nchar(str_specifics)) + x]@center@theta + degree(90), fill = NA, family = my_serif_font, size = 9, color = "gray30", vjust = .53)@geom()
  })} +
  {purrr::map(3 + c(0,15, 30, 45), \(x) {
    ob_label(label = rev(strsplit(str_specifics, split = character(0))[[1]]),p = specifics[seq(nchar(str_specifics)) + x]@center, angle = specifics[seq(nchar(str_specifics)) + x]@center@theta - degree(90), fill = NA, family = my_serif_font, size = 9, color = "gray30", vjust = .53)@geom()
  })}




```

