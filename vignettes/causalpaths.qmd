---
title: "Path Diagrams"
format: 
  html:
    toc: true
    html-math-method: katex
vignette: >
  %\VignetteIndexEntry{pathdiagrams}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| label: presetup
#| include: false
library(ggplot2)
library(ggdiagram)
library(tibble)
library(dplyr)
library(purrr)
library(ggtext)
library(geomtextpath)
knitr::opts_chunk$set(
  collapse = TRUE,
  dev = "ragg_png",
  comment = "#>",
  fig.width = 7,
  fig.height = 7
)

my_font <- "Roboto Condensed"
update_geom_defaults("richtext", 
                     list(family = my_font, 
                          size = 0.8 * 20 / ggplot2::.pt))
update_geom_defaults("line", list(linewidth = .75))
update_geom_defaults("segment", list(linewidth = .75))
update_geom_defaults("point", list(size = 2))
update_geom_defaults(
  "labelpath", 
  list(
    family = my_font,
    size = 0.8 * 20 / ggplot2::.pt))
```

# Setup

```{r}
#| label: setup
library(ggplot2)
library(ggdiagram)
library(tibble)
library(dplyr)
library(purrr)
```

# Path diagrams

Structural equation models are often displayed with path diagrams. The visual vocabulary of path diagrams is fairly simple. An observed variable is square (or rectangular) and a latent variable (i.e., not observed) is circular (or elliptical). Often omitted for clarity, means and intercepts are constants that can be depicted with triangles.

```{r}
#| label: fig-objecttypes
#| fig-cap: Elements of a path diagram
#| fig-height: 3
#| code-fold: true

ggplot() + 
  coord_equal() + 
  theme_void() +
  {lv <- circle(label = "Latent<br>Variable")} +
  {r <- rectangle(width = sqrt(pi),
                  height = sqrt(pi),
                  label = "Observed<br>Variable") |>
    place(lv, "right", .5)} +
  {i <- circle(n = 3, 
               radius = 1.25, 
               label = "Mean/<br>Intercept") |> 
    place(r, "right", .3) + point(0, -.25)} 

```

```{r}
#| label: fig-pathtype
#| fig-cap: Relationships in a path diagram
#| code-fold: true

ggplot() + 
  coord_equal() + 
  theme_void() +
  {this <- circle(label = label("This", size = 40))} +
  {that <- circle(label = label("That", size = 40)) |>
    place(this, "right")} +
  connect(this, that, label = "Causes", resect = 2) +
  {A <- this |> 
    place(this, "below")} +
  {B <- that |> 
    place(that, "below")} +
  covariance(A, B, label = label("Correlates with", vjust = 0)) 

```


```{r}
#| label: fig-regression
#| fig-cap: Regression Model
#| fig-width: 6
#| fig-height: 5.5
#| code-fold: true

ggplot() + 
  coord_equal() + 
  theme_void() +
  {X <- ellipse(
    label = label("*X*", 
                  size = 60, 
                  nudge_y = -.15), 
    m1 = 15)} +
  {Y <- ellipse(
    label = label("*Y*", 
                  size = 60, 
                  nudge_y = -.15), 
    m1 = 15) |> 
    place(X, "right")} +
  {X_Y <- connect(X,Y, 
                  label = label("*b*~1~"), 
                  resect = 2)} + 
  {sigma_x <- variance(X, 
                       bend = -20, 
                       where = "south")} +
  {sigma_e <- variance(Y, 
                       label = label("*&sigma;~e~*"), 
                       bend = -20, 
                       where = "south")} +
  {i <- pgon({icenter <- polar(degree(60), 
                               distance(X@center,
                                        Y@center))} +
               polar(degree(c(90,210, 330))), 
             fill = NA, 
             color = "black", 
             label = label(1, 
                           size = 40))} +
  connect(intersection(i, segment(icenter, X@center)), 
          X, 
          label = label("*&mu;~X~*", angle = 0), 
          resect = 2) +
  connect(intersection(i, segment(icenter, Y@center)), 
          Y, 
          label = label("*b*~0~", angle = 0), 
          resect = 2) +
  ggimage::geom_image(
    data = tibble(x = sigma_x@midpoint()@x, 
                  y = sigma_x@midpoint()@y), 
    aes(x = x, 
        y = y, 
        image = "sigma2x.pdf"), 
    size = .05) +
  ggimage::geom_image(
    data = tibble(x = sigma_e@midpoint()@x, 
                  y = sigma_e@midpoint()@y), 
    aes(x = x, 
        y = y, 
        image = "sigma2e.pdf"), 
    size = .05)


```


```{r}
#| label: fig-path
#| fig-cap: A structural equation path diagram
#| fig-height: 5.6
#| code-fold: true

my_fill <- class_color("dodgerblue")@darken(.2)
my_path_color <- "gray40"
my_resect <- 2
broad <- c("Gv", "Gf", "Gc")
g2broad <- c(Gv = .84, Gf = .96, Gc = .81)

latent <- partial(circle, 
                  color = NA, 
                  fill = my_fill, 
                  size = 16)  


lb_latent <- purrr::partial(label, 
                            size = 40, 
                            fill = NA, 
                            color = "white")

observed <- purrr::partial(ellipse, 
                           a = .5, 
                           b = .5, 
                           m1 = 10, 
                           fill = my_fill,
                           color = NA)

lb_observed <- purrr::partial(label, 
                            size = 18, 
                            fill = NA, 
                            color = "white",
                            nudge_y = -.04)

lb_path <- purrr::partial(label,
                          size = 14,
                          fill = "white",
                          color = my_path_color)

direct <- purrr::partial(
  connect,
  resect = my_resect,
  color = my_path_color,
  arrow_head = arrowheadr::arrow_head_deltoid(d = 2),
  arrowhead_length = 9
)

var_latent <- purrr::partial(
  variance, 
  resect = my_resect,
  color = my_path_color, 
  looseness = 1.2, 
  arrow_head = arrowheadr::arrow_head_deltoid(d = 2),
  arrow_fins = arrowheadr::arrow_head_deltoid(d = 2),
  arrowhead_length = 9)




ggplot() + 
  coord_equal() + 
  theme_void() +
  {g <- latent(label = lb_latent("*g*"))} + 
  var_latent(g, label = lb_path(1)) +
  {Gx <- place(g, g,where = "below", sep = 1.6) |> 
    shape_array(k = 3, 
                sep = 2, 
                label = lb_latent(broad, 
                                  vjust = .6))} +
  var_latent(Gx, "left", label = lb_path(round_probability(sqrt(1 - g2broad), phantom_text = "."))) +
  {pGx <- direct(g, Gx)} +
  {lb_path(
    label = round_probability(g2broad, 
                              phantom_text = "."), 
    p = pGx@line@point_at_y(pGx[2]@midpoint(
      position = .47)@y))} +
  purrr::map(as.list(Gx), \(b) {
    o1 <- place(observed(), 
                from = b, 
                where = "south",
                sep = 1.6)
    
    o <- shape_array(
      o1,
      k = 3, 
      sep = .2, 
      label = lb_observed(
        paste0(
          b@label@label, 
          "~", 
          1:3, 
          "~")))
    
    p <- direct(b, o@point_at("north"))
    v <- variance(o, 
                  where = "south", 
                  bend = -13,
                  looseness = 1.5,
                  resect = 1.5,
                  color = "gray40",
                  theta = 60)
    
    list(o@geom(),p@geom(), v@geom())
  }) 
  

  

```



```{r}
ggplot() + coord_equal() + theme_void() +
  # Latent Variable
  {Gc <- circle(
      fill = "dodgerblue4",
      alpha = .6,
      color = NA,
      label = label(
        "Gc",
        nudge_y = -.05,
        fill = NA,
        color = "white",
        size = 60))} +
  # Observed Variables
  {Gc_3 <- ellipse(a = .5,
                   b = .5,
                   m1 = 10,
                   fill = "dodgerblue4") |> 
    place(from = Gc, where = "below", sep = 1.25) |> 
    shape_array(
      k = 3,
      where = 0,
      sep = .2,
      color = NA,
      alpha = c(.55,.7,.85),
      label = label(subscript("Gc", seq(3)), 
                    size = 24,
                    nudge_y = -.05,
                    color = "white", 
                    fill = NA))} +
  # Paths from latent to observed
  {pGc_Gc_3 <- connect(Gc, Gc_3@point_at("north"), 
                        resect = 2, 
                        color = "gray30", 
                        alpha = 1)} + 
  # Place labels on a horizontal line
  label(label = round_probability(c(.75, .65, .89)), 
        p = pGc_Gc_3@line@point_at_y(pGc_Gc_3[2]@midpoint()@y)) +
  # Place errors below observed variables
  {e_Gc_3 <- circle(radius = .3, 
                        fill = "dodgerblue4", 
                        color = NA,
                        alpha = c(.55,.7,.85) - .2) |> 
    place(from = Gc_3, 
          where = "below", 
          sep = .4)} + 
  # Paths from errors to observed variables
  connect(x = e_Gc_3, 
          y = Gc_3, 
          color = "gray30", 
          resect = 2, 
          alpha = 1)

```

```{r}
#| fig-width: 5
#| fig-cap: "A latent variable with three observed indicators and three latent error terms."
ggplot() + 
  coord_equal() + 
  theme_void() +
  # Place a latent variable at the top
  {l1 <- circle(radius = 2)} +
  # Place an array of observed variables below the circle
  {o3 <- ellipse(m1 = 9) |> 
    place(from = l1, 
          where = "below", 
          sep = 2) |> 
    shape_array(
      k = 3,
      where = 0,
      sep = .4)} +
  # Connect the latent to the observed variables at the north anchor point
  {l1_o3 <- connect(l1, 
                    o3@point_at("north"), 
                    resect = 2)} + 
  # Place error terms below each observed variable
  {e3 <- circle(radius = .75) |>
    place(o3,
          where = "below",
          sep = .85)} +
  # Connect the error terms to the observed variables
  {e3_o3 <- connect(e3, o3, resect = 2)} +
  # latent variance1
  {v_l1 <- variance(l1, where = "north")} +
  # label(1, v_l1@midpoint()) + 
  {v_e3 <- variance(e3, where = "south", looseness = 1.5)} 
  
```

```{r}
theta <- degree(seq(0,350,10))
r2 <- rectangle(point(2:3, 1), width = .5)


ggplot() + coord_equal() + theme_void() +
  r2 +
  r2@point_at(theta) +
  r2@normal_at(theta, .1) +
  variance(r2, where = "east", theta = 60)


# ggsave("asdf.png", device = ragg::agg_png, width = 5, height = 7, bg = "white")
# file.show("asdf.png")
```

