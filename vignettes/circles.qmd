---
title: "Circles"
knitr:
  opts_chunk: 
    collapse: true
    comment: '#>'
format: 
  html:
    toc: true
vignette: >
  %\VignetteIndexEntry{circles}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| label: presetup
#| include: false
library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
knitr::opts_chunk$set(
  collapse = TRUE,
  dev = "ragg_png",
  comment = "#>",
  fig.width = 7,
  fig.height = 7
)
my_font <- "Roboto Condensed"
# gdtools::register_gfont(family = my_font)
# gdtools::addGFontHtmlDependency(family = my_font)
update_geom_defaults("richtext",
                     list(family = my_font, 
                          size = .8 * 16 / ggplot2::.pt))

update_geom_defaults("arrow_segment", list(length_head = 1))
```

```{r}
#| label: setup
library(ggdiagram)
library(ggplot2)
library(dplyr)
library(ggtext)
library(ggarrow)
my_font <- "Roboto Condensed"

```


## Base plot

To avoid repetitive code, we make a base plot:

```{r}
#| label: baseplot
my_font <- "Roboto Condensed"
my_text_size <- 20
my_point_size <- 2.5
# my_colors <- viridis::viridis(2, begin = .25, end = .5)
my_colors <- c("#3B528B", "#21908C")
update_geom_defaults(geom = "richtext", 
                     new = list(family = my_font, 
                                size = .8 * my_text_size / ggplot2::.pt))

update_geom_defaults("point", list(size = my_point_size))


theme_set(
  theme_minimal(
    base_size = my_text_size, 
    base_family = my_font) +
    theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))




bp <- ggplot() +
  coord_equal() +
  scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +
  scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +
  theme_minimal(base_size = 16) +
  theme(
    axis.title.x =  element_text(face = "italic"),
    axis.title.y = element_text(
      face = "italic",
      angle = 0,
      hjust = .5,
      vjust = .5
    )
  )
```

# Specifying a Circle

Circles can be specified by a point at the circle's center (*x*~0~, *y*~0~) and a radius *r* (the distance from the center to the circle's edge).

$$
(x-x_0)^2+(y-y_0)^2=r^2
$$


```{r}
#| label: circle
p <- ob_point(0,0)
r <- 3
c1 <-  ob_circle(center = p, radius = 3)
c1
```

```{r}
#| label: fig-circle
#| fig-cap: A circle can be specified with a center and a radius,
#| code-fold: true
bp +
  c1 +
  c1@center@label(vjust = 1.2, plot_point = T) +
  ob_segment(
    c1@center,
    c1@point_at(0),
    color = my_colors[1],
    label = ob_label(paste0("*r* = ", c1@radius), angle = 0, vjust = 0)
  )

```


## Point on the circle at a specific angle

```{r}
#| label: ptheta
c1@point_at(degree(60))
```


```{r}
#| label: fig-ptheta
#| fig-cap: Point on ellipse that is 45&deg; from the x-axis.
#| code-fold: true
deg <- degree(60)

bp + 
  c1 +
  {p45 <- c1@point_at(deg)} +
  p45@label(hjust = 0, vjust = 0) +
  ob_segment(c1@center, p45) +
  ob_arc(radius = 1, start = degree(0), end = deg, label = deg)
```


# Placing circles 

## Placing circles next to each other

The `place` function places an object at a specified direction and distance from another object. 

```{r}
#| label: fig-place
#| fig-cap: Place Circle B one unit to the right of Circle A
bp + 
  {A <- ob_circle(
    center = ob_point(-2, 0), 
    radius = 1, 
    label = ob_label("A", size = 30))} + 
  place(
    ob_circle(radius = 1.5,
           label = ob_label("B", size = 30)),
    from = A,
    where = "right",
    sep = 1)
```

The `where` argument can take degrees or named positions: 

`r paste0(names(ggdiagram:::.namedpositions), collapse = ", ")`

Multiple circles can be created at once with named directions:

```{r}
#| label: fig-multplace
#| fig-cap: Place mutliple circles using named directions
bp + 
  {c3 <- ob_circle(ob_point(0, 0), radius = 1)} + 
  place(ob_circle(radius = .5), 
        from = c3, 
        where = c("northwest", 
                  "northeast", 
                  "south-southeast", 
                  "south-southwest"), 
        sep = 1)
```

Or with numbers (degrees):

```{r}
#| label: fig-multdegree
#| fig-cap: Place mutliple circles using degrees
bp + 
  c3 + 
  place(ob_circle(radius = .5), 
        from = c3, 
        where = c(0, 30, -30), 
        sep = 1)
```

With styles:

```{r}
#| label: fig-style
#| fig-cap: Place mutliple circles with styling
bp +
  {c4 <- ob_circle(
      radius = 1,
      color = NA,
      fill = "gray35")} +
  place(
    ob_circle(
      color = NA,
      fill = class_color(viridis::viridis(
        n = 6, 
        option = "D"))@lighten(.7)@color
    ),
    from = c4,
    where = degree(seq(0, 300, 60)),
    sep = 1
  ) 
```

## Placing circles next to points and points next to circles

This works the same as placing circles next to each other. Here we create a point in the center, place six circles around it, and then place 12 points around each circle.

```{r}
#| label: fig-multimulti
#| fig-cap: Place circles around a point, and points around each circle
bp + 
  {p1 <- ob_point(0,0)} +
  {c6 <- place(x = ob_circle(radius = .5, 
                          fill = viridis::viridis(6), 
                          color = NA), 
        from = p1, 
        where = degree(seq(0,300,60)), 
        sep = 2)} +
  purrr::map(as.list(c6), 
             \(x) ob_point(color = x@fill) |> 
               place(from = x, 
                     where = degree(seq(0, 330, 30)), 
                     sep = .5) |> 
               as.geom())



```

## Placing lines next to circles

```{r}
#| label: fig-linecircle
#| fig-cap: Placing a line one unit northeast of a circle
bp +
  {c7 <- ob_circle()} +
  place(ob_line(), c7, where = degree(45), sep = 1)
```


# Drawing path connectors between circles

Let's make two circles and draw an arrow path between them

```{r}
#| label: fig-connectcircles
#| fig-cap: Connect two circles
bp + 
  {c1 <- ob_circle(ob_point(-2, 2), radius = 1)} + 
  {c2 <- ob_circle(ob_point(1.5,-1.5), radius = 1.5)} +
  connect(c1, c2)
```

That is fine, but we often need labels and styling to make scientific diagrams. For example:

```{r}
#| label: fig-connectcirclesstyles
#| fig-cap: Connect two circles with labels and styles
bp +
  {cthis <- ob_circle(
    ob_point(-2, 2),
    radius = 1,
    fill = my_colors[1],
    color = NA,
    label = ob_label(
      "This",
      color = "white",
      fill = NA,
      size = 35
    )
  )} + 
  {cthat <- ob_circle(
    ob_point(1.5, -1.5),
    radius = 1.5,
    fill = my_colors[2],
    color = NA,
    label = ob_label(
      "That",
      color = "white",
      fill = NA,
      size = 55
    )
  )} +
  connect(cthis, cthat, 
       resect = 2, 
       label = ob_label("Causes", size = 20, vjust = 0),
       color = "black")
```

# Paths between circles and lines

```{r}
#| label: fig-connectcircleline
#| fig-cap: Connect a circle to a line and a line to a circle
bp + 
  c1 +
  {l1 <- ob_line(slope = 2, intercept = 0)} +
  connect(c1, l1) +
  {c2 <- ob_circle(ob_point(2, -2))} + 
  connect(l1, c2)
```

