[{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Angles","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) my_font <- \"Roboto Condensed\" my_arrow_head <- arrowheadr::arrow_head_deltoid(d = 2.3)"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"angles","dir":"Articles","previous_headings":"","what":"Angles","title":"Angles","text":"Angles different kinds units associated : turns (1 turn = one full rotation circle), degrees (1 turn = 360 degrees), radians (1 turn = 2π2\\pi = τ\\tau). like π just fine, agree Michael Hartl’s Tau Manifesto better recognized number radians complete full turn circle (τ = 2π ≈ 6.283185) fundamental number radians complete half turn (π). Figure 1: Angle Metrics One can create equivalent angles three metrics. Although methods convenient printing, hood ob_angle objects can retrieve angle three metrics.","code":"theta <- degree(seq(0,330, 30)) angle_types <- c(\"Turns\", \"Radians\", \"Degrees\") theta_list <- lapply(list(turn, radian, degree), \\(.f) .f(theta))  p <- ob_polar(theta, r = 1)   r <- seq(1, .5, length.out = length(angle_types)) my_shades <- (tinter::tinter(\"royalblue\",                              steps = 7,                              direction = \"tints\")[seq(length(angle_types))])  ggplot() +   coord_equal() +   theme_void() +   ob_circle(     center = ob_point(),     radius = r,     fill = my_shades,     color = NA,     linewidth = .25   ) +   ob_segment(ob_point(), p, linewidth = .25) +   purrr::pmap(     .l = list(r, theta_list, my_shades),      .f = \\(rs, ts, ss) {       ob_circle(radius = rs - 1/8)@point_at(ts)@label(ts, fill = ss, size = 16)@geom()       }) +   ob_point(0, y = r - 1/18)@label(angle_types,                                 fill = my_shades,                                 fontface = \"bold\",                                 size = 16) degree(90) #> 90° turn(1 / 4) #> .25 radian(pi / 2) #> 0.5π radian(pi) #> π radian(pi)@degree #> [1] 180 radian(pi)@turn #> [1] 0.5  degree(180) #> 180° degree(180)@turn #> [1] 0.5 degree(180)@radian #> [1] 3.141593  turn(.5) #> .50 turn(.5)@radian #> [1] 3.141593 turn(.5)@degree #> [1] 180"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"character-printing","dir":"Articles","previous_headings":"","what":"Character Printing","title":"Angles","text":"labeling, sometimes convenient convert angles text: metrics can converted :","code":"as.character(degree(90)) #> [1] \"90°\" as.character(turn(.25)) #> [1] \".25\" as.character(radian(.5 * pi)) #> [1] \"0.5π\" a <- degree(degree = 270) a #> 270° radian(a) #> 1.5π turn(a) #> .75"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"angle-metric-conversions","dir":"Articles","previous_headings":"","what":"Angle Metric Conversions","title":"Angles","text":"metrics can converted :","code":"a <- degree(degree = 270) a #> 270° radian(a) #> 1.5π turn(a) #> .75"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"arithmetic-operations","dir":"Articles","previous_headings":"","what":"Arithmetic Operations","title":"Angles","text":"Angles can added, subtracted, multiplied, divided. underlying value stored can real number (turn units), degrees, radians, turns always displayed −1 +1 turns, ±360 degrees, ±2π radians. 30° + 60° = 90° Figure 2: 30° + 60° = 90° Adding number degree class assumes number degree metric. Likewise, adding number radian (angle default) makes radian: Turns work way: degrees outside range ±360, recalculate: 80∘+300∘=380∘=380∘−360∘=20∘ \\begin{align} 80^{\\circ} + 300^\\circ &= 380^\\circ\\\\ &= 380^\\circ-360^\\circ\\\\ &=20^\\circ\\end{align} Figure 3: 80° + 300° = 380° = 20° 20∘−40∘=−20∘=340∘\\begin{align}20^\\circ - 40^\\circ &= -20^\\circ\\\\&=340^\\circ\\end{align} Figure 4: 40° − 60° = −20° 2⋅20∘=40∘2\\cdot20^\\circ=40^\\circ 2⋅180=360∘=0∘\\begin{align}2\\cdot180 &= 360^\\circ\\\\&=0^\\circ\\end{align}","code":"make_angles <- function(a = c(80, 300),                          r = c(.1, .2, .3),                          label_adjust = c(0,0,0),                          multiplier = c(1.4,1.4,1.4)) { start_angles <- degree(c(0,a[1], 0)) end_angles <- degree(c(a[1], sum(a), degree(sum(a))@degree))  arc_labels <- as.character(end_angles - start_angles)  mycolors <- c(\"firebrick4\", \"royalblue3\", \"orchid4\")   arc_labels[3] <- paste0(arc_labels[1],                         \" + \",                          arc_labels[2],                         \" = \",                          arc_labels[3])  arcs <- ob_arc(radius = r,        start = start_angles,        end = end_angles,       label = ob_label(arc_labels, color = mycolors),       linewidth = .25,       length_head = 10,       arrow_head =  arrowheadr::arrow_head_deltoid(),       color = mycolors)    ggplot() +   theme_void() +   coord_equal()  +   arcs +   ob_segment(     p1 = ob_point(),      p2 = ob_polar(theta = degree(c(0,a[1],sum(a))), r = 1),      length_head = 5,     linewidth = .75,     arrow_head =  arrowheadr::arrow_head_deltoid(),     color = c(\"firebrick\", \"firebrick\", \"royalblue\"))  } make_angles(a = c(30, 60),              r = c(.12,.24, .36),              multiplier = c(1.5,1.5,1.5)) degree(30) + degree(60) #> 90° degree(30) + 10 #> 40° radian(pi) + 0.5 * pi #> 1.5π turn(.1) + .2 #> .30 make_angles(c(80, 300)) degree(80) + degree(300) #> 20° make_angles(c(40, -60)) degree(40) - degree(60) #> −20° 2 * degree(20) #> 40° 2 * degree(180) #> 0°"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"retrieving-the-underlying-data-from-a-ob_angle-object","dir":"Articles","previous_headings":"","what":"Retrieving the underlying data from a ob_angle object","title":"Angles","text":"Angles created degree, radian, turn function ob_angle objects. ob_angle function exists meant used directly. underlying data vector numeric data representing number turns. underlying turn data ob_angle object can extracted c function: Angles can take three standard trigonometric functions Figure 5: Trigonometric functions Benefits using trigonometric functions angles instead numeric radians include: Angle metric conversions handled automatically. hood, cospi, sinpi, tanpi functions used get rounding right key locations (e.g., 90 degrees, 180 degrees) example, tan(pi) slightly true value 0. contrast, tan(radian(pi)) rounds 0 exactly.","code":"theta <- degree(c(0,180,360, 720)) # Degrees range: 0<= degree < 360 theta@degree #> [1]   0 180   0   0 # Underlying data in turns c(theta) #> [1] 0.0 0.5 1.0 2.0 theta <- degree(60) cos(theta) #> [1] 0.5 sin(theta) #> [1] 0.8660254 tan(theta) #> [1] 1.732051 o <- ob_point(0, 0) p <- ob_polar(theta, 1)  # col <- purrr::map2_chr(scico::scico(6, palette = \"hawaii\"), #                        c(0.01,0.01,0.01,0.01,.15, .4),  #                        tinter::darken)  my_colors <- c(\"#8C0172\", \"#944046\", \"#9B7424\",                 \"#8EB63B\", \"#53BD91\", \"#6C939A\")  ggplot() +   theme_void() +   coord_equal() +   ob_circle(fill = NA, color = \"gray\") +   # axes   ob_line(intercept = 0,        color = \"gray\",        linewidth = .25) +   ob_line(xintercept = 0,        color = \"gray\",        linewidth = .25) +   # degree arc   ob_arc(     end = theta,     radius = .25,     label = theta,     linewidth = .2   ) +   # angle arrow   ob_segment(     o,     p2 = p,     label = \"*r* = 1\",     resect_head = 1,     length_head = 8,     arrow_head = my_arrow_head   ) +   # sin(theta)   ob_segment(     ob_polar(theta = 0, r = cos(theta)),     p,     label = paste0(\"sin(\",                     theta,                      \") = \",                     round(sin(theta), 2)),     color = my_colors[1],     linewidth = .5   ) +   # cos(theta)   ob_segment(     ob_point(0, sin(theta)),     ob_point(cos(theta), sin(theta)),     label = ob_label(       paste0(         \"cos(\",         theta,         \") = \",         round(cos(theta), 2)), vjust = 1),     color = my_colors[2],     linewidth = .5   ) +   # tan(theta)   ob_segment(     p,     p + ob_polar(theta - 90, r = tan(theta)),     label = paste0(       \"tan(\",       theta,       \") = \",       round(tan(theta), 2)),     color = my_colors[3],     linewidth = .5   ) +   # sec(theta)   ob_segment(     o,     ob_point(1 / cos(theta)),     label = ob_label(       label = paste0(         \"sec(\",         theta,         \") = \",         round(1 / cos(theta), 2)),       vjust = 1     ),     color = my_colors[5]   ) +   # cot(theta)   ob_segment(     p + ob_polar(theta + 90, r = 1 / tan(theta)),     p,     label = paste0(       \"cot(\",       theta,       \") = \",       round(1 / tan(theta), 2)),     color = my_colors[4],     linewidth = .5   ) +   # csc(theta)   ob_segment(     o,     ob_point(0, 1 / sin(theta)),     label = paste0(       \"csc(\",       theta,       \") = \",       round(1 / sin(theta), 2)),     color = my_colors[6]   ) tan(pi) #> [1] -1.224647e-16 tan(radian(pi)) #> [1] 0"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"trigonometry","dir":"Articles","previous_headings":"","what":"Trigonometry","title":"Angles","text":"Angles can take three standard trigonometric functions Figure 5: Trigonometric functions Benefits using trigonometric functions angles instead numeric radians include: Angle metric conversions handled automatically. hood, cospi, sinpi, tanpi functions used get rounding right key locations (e.g., 90 degrees, 180 degrees) example, tan(pi) slightly true value 0. contrast, tan(radian(pi)) rounds 0 exactly.","code":"theta <- degree(60) cos(theta) #> [1] 0.5 sin(theta) #> [1] 0.8660254 tan(theta) #> [1] 1.732051 o <- ob_point(0, 0) p <- ob_polar(theta, 1)  # col <- purrr::map2_chr(scico::scico(6, palette = \"hawaii\"), #                        c(0.01,0.01,0.01,0.01,.15, .4),  #                        tinter::darken)  my_colors <- c(\"#8C0172\", \"#944046\", \"#9B7424\",                 \"#8EB63B\", \"#53BD91\", \"#6C939A\")  ggplot() +   theme_void() +   coord_equal() +   ob_circle(fill = NA, color = \"gray\") +   # axes   ob_line(intercept = 0,        color = \"gray\",        linewidth = .25) +   ob_line(xintercept = 0,        color = \"gray\",        linewidth = .25) +   # degree arc   ob_arc(     end = theta,     radius = .25,     label = theta,     linewidth = .2   ) +   # angle arrow   ob_segment(     o,     p2 = p,     label = \"*r* = 1\",     resect_head = 1,     length_head = 8,     arrow_head = my_arrow_head   ) +   # sin(theta)   ob_segment(     ob_polar(theta = 0, r = cos(theta)),     p,     label = paste0(\"sin(\",                     theta,                      \") = \",                     round(sin(theta), 2)),     color = my_colors[1],     linewidth = .5   ) +   # cos(theta)   ob_segment(     ob_point(0, sin(theta)),     ob_point(cos(theta), sin(theta)),     label = ob_label(       paste0(         \"cos(\",         theta,         \") = \",         round(cos(theta), 2)), vjust = 1),     color = my_colors[2],     linewidth = .5   ) +   # tan(theta)   ob_segment(     p,     p + ob_polar(theta - 90, r = tan(theta)),     label = paste0(       \"tan(\",       theta,       \") = \",       round(tan(theta), 2)),     color = my_colors[3],     linewidth = .5   ) +   # sec(theta)   ob_segment(     o,     ob_point(1 / cos(theta)),     label = ob_label(       label = paste0(         \"sec(\",         theta,         \") = \",         round(1 / cos(theta), 2)),       vjust = 1     ),     color = my_colors[5]   ) +   # cot(theta)   ob_segment(     p + ob_polar(theta + 90, r = 1 / tan(theta)),     p,     label = paste0(       \"cot(\",       theta,       \") = \",       round(1 / tan(theta), 2)),     color = my_colors[4],     linewidth = .5   ) +   # csc(theta)   ob_segment(     o,     ob_point(0, 1 / sin(theta)),     label = paste0(       \"csc(\",       theta,       \") = \",       round(1 / sin(theta), 2)),     color = my_colors[6]   ) tan(pi) #> [1] -1.224647e-16 tan(radian(pi)) #> [1] 0"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcs.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Arcs","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow)"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcs.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Arcs","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size)) update_geom_defaults(\"arrow_segment\", list(length_head = 5)) update_geom_defaults(\"arrow\", list(linewidth = 1))  theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered,                       limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                       limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcs.html","id":"base-plot-1","dir":"Articles","previous_headings":"","what":"Base plot","title":"Arcs","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size)) update_geom_defaults(\"arrow_segment\", list(length_head = 5)) update_geom_defaults(\"arrow\", list(linewidth = 1))  theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered,                       limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                       limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcs.html","id":"arcs","dir":"Articles","previous_headings":"","what":"Arcs","title":"Arcs","text":"Just segment part line two points line, arc part circle two points (circle). Thus, arc properties circle, addition starting ending points. sake simplicity, starting points specified angles. Arc starting ending points can specified angle unit. number used, interpreted degree unit.  Arc starting ending angles center point.","code":"ob_arc(center = ob_point(1,2),      start = 25,      end = 75,      radius = 3) #> <ob_arc> #> @ center: <ob_point> #>  @ x: num 1 #>  @ y: num 2 #> @ radius: num 3 #> @ start : <degree> #>  @ degree: num 25 #> @ end   : <degree> #>  @ degree: num 75 #> @ theta : <degree> #>  @ degree: num 50 #> Other props: label, wedge, alpha, arrow_head, arrow_fins, #>              arrowhead_length, length_head, length_fins, color, #>              fill, lineend, linejoin, linewidth, linewidth_fins, #>              linewidth_head, linetype, n, resect, resect_fins, #>              resect_head, stroke_color, stroke_width, apothem, #>              sagitta, bounding_box, chord, length, style, tibble, #>              geom, angle_at, autolabel, midpoint, point_at, #>              tangent_at, aesthetics bp +   {p1 <- ob_point(0, 0)} +    {a1 <- ob_arc(     center = p1,     radius = {r <- 4},     start = {ang_start <- degree(25)},     end = {ang_end <- degree(75)}     )} +   ob_label(     label = paste0(\"Center \", p1@auto_label),      p = p1,      vjust = 1.1) +    connect(     p1,      a1@midpoint(),      label = paste0(\"Radius = \", r)) +    ob_label(     label = ang_start,      p = a1@midpoint(0),     polar_just = ob_polar(ang_start + degree(-90), 1.3),      plot_point = TRUE) +   ob_label(     label = ang_end,      p = a1@midpoint(1),      polar_just = ob_polar(ang_end + degree(90), 1),      plot_point = TRUE)"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcs.html","id":"starting-or-ending-points-of-arcs","dir":"Articles","previous_headings":"","what":"Starting or ending points of arcs","title":"Arcs","text":"Sometimes know center arc . Instead, want arc start end specific point. example, might want specify start point end point. Figure 1: Fixing start end points arc","code":"bp +   {p1 <- ob_point(0, 0)} +   ob_arc(start = -45,        end = 45,        radius = 2,       color = \"red\",        start_point = p1)  +   ob_arc(start = -45,        end = 45,        radius = 2,       color = \"blue\",        end_point = p1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcs.html","id":"midpoints","dir":"Articles","previous_headings":"","what":"Midpoints","title":"Arcs","text":"midpoint function can find one midpoints different positions. default position .5. Figure 2: Default midpoint arc starting ending points position 0 1, respectively. Figure 3: Multiple midpoints can specified","code":"bp +   a1 +   a1@midpoint() bp +   a1 +   a1@midpoint(position = c(0,1))"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcs.html","id":"labelling-arcs","dir":"Articles","previous_headings":"","what":"Labelling arcs","title":"Arcs","text":"default, arc label appear outside midpoint arc Figure 4: labelled arc label needed elsewhere, can set label function’s position property. Figure 5: Multiple labels arc orientation label needs changed, can set vjust, hjust, polar_just. Figure 6: arc’s labels can adjusted. cases arc already created label needed. Although label can added arc created, position set manually (otherwise position 0,0 default). cases, auto_label function can help place label correctly. default, auto_label show theta property (.e., end − start). Figure 7: Using arc’s autolabel However, label can inserted position. Figure 8: Adjusting arc’s autolabel","code":"bp +   ob_arc(radius = 3,        start = 20,        end = 120,        label = degree(100)) bp +   ob_arc(radius = 3,        start = 20,        end = 120,        label = ob_label(c(\"Start\", \"Middle\", \"End\"),                      position = c(0,.5, 1),                      plot_point = TRUE)) bp +    ob_arc(radius = 3,        start = 20,        end = 120,       label = ob_label(\"A\",                      vjust = 1.2,                      hjust = .75)) bp +    {a1 <- ob_arc(radius = 3,        start = 20,        end = 120)} +    a1@autolabel() bp +    a1 +   a1@autolabel(label = \"Start\", position = 0)"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcs.html","id":"arcs-with-arrows","dir":"Articles","previous_headings":"","what":"Arcs with arrows","title":"Arcs","text":"arc object plotted using ggarrow::arrow. means arrows can placed either end arc. Figure 9: Arcs arrowheads","code":"my_arrow_head <- arrowheadr::arrow_head_deltoid(d = 2.2)  bp +    ob_arc(radius = 3,        start = 0,        end = 180,        arrow_head = my_arrow_head,       arrow_fins = my_arrow_head,        linewidth = .75,       arrowhead_length = 8)"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcs.html","id":"wedges","dir":"Articles","previous_headings":"","what":"Wedges","title":"Arcs","text":"ob_arc@wedge property set TRUE, ob_arc function plot wedge using ggplot2::geom_polygon. Figure 10: Arc wedges","code":"theta <- c(0, 120, 180, 360) bp +   ob_arc(radius = 3,        start = theta[-length(theta)],        end = theta[-1],        wedge = TRUE,       fill = c(\"dodgerblue4\", \"orchid4\", \"darkgreen\"),        color = \"white\",        linewidth = 1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/bezier.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Bézier Curves","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(geomtextpath)"},{"path":"https://wjschne.github.io/ggdiagram/articles/bezier.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Bézier Curves","text":"avoid repetitive code, set defaults make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5 my_arrowhead <- arrowheadr::arrow_head_deltoid(2.1) # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size)) update_geom_defaults(\"arrow_segment\", list(length_head = 5)) update_geom_defaults(\"arrow\", list(linewidth = 2)) update_geom_defaults(\"labelpath\", list(family = my_font))  theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/bezier.html","id":"base-plot-1","dir":"Articles","previous_headings":"","what":"Base plot","title":"Bézier Curves","text":"avoid repetitive code, set defaults make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5 my_arrowhead <- arrowheadr::arrow_head_deltoid(2.1) # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size)) update_geom_defaults(\"arrow_segment\", list(length_head = 5)) update_geom_defaults(\"arrow\", list(linewidth = 2)) update_geom_defaults(\"labelpath\", list(family = my_font))  theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/bezier.html","id":"bézier-curves","dir":"Articles","previous_headings":"","what":"Bézier curves","title":"Bézier Curves","text":"ob_bezier function creates object specifies control points bézier curve. bézier curve extremely useful way making elegantly curved lines points. Figure 1: Bézier curve contol points like make list control points setting start end points first. find internal control points offsetting end points—adding subtracting point specified x y distance (angle using polar function). c function creates list points, bind function binds list single point object containing points. Figure 2: Bézier curve contol points label","code":"bp +    {control_points <- ob_point(     x = c(-4,4,4),      y = c(4,-4, 0))} +    ob_path(control_points, linetype = \"dashed\", linewidth = .25) +   ob_bezier(control_points) # start and end of control points p_start <- ob_point(-4,-2) p_end <- ob_point(4, 2) # Offset ob_point from the endpoints p_offset <- ob_point(5,6)  # Make list of points and bind them into a single ob_point p <- c(p_start,         p_start + p_offset,         p_end - p_offset,         p_end) |>    bind()   bp +    ob_path(p,         linetype = \"dashed\",         color = \"gray\",        linewidth = .25) +   p +    ob_bezier(p,            label = ob_label(\"Labels can follow the path of the bézier curve.\"))"},{"path":"https://wjschne.github.io/ggdiagram/articles/bezier.html","id":"multiple-bézier-paths","dir":"Articles","previous_headings":"","what":"Multiple bézier paths","title":"Bézier Curves","text":"multiple point objects supplied list (concatenated c function), bézier curve created point object list. Figure 3: Multiple bézier paths","code":"control_point_list <- c(       ob_point(         x = c(-4, -3, 4),          y = c(.1,  4, .1),          color = my_colors[1]),       ob_point(         x = c(-4, 3, 4),          y = c(-.1, -4, -.1),          color = my_colors[2] )       ) bp +    ob_bezier(control_point_list) +   ob_path(control_point_list, linetype = \"dashed\", linewidth = .25) +   lapply(control_point_list, as.geom)"},{"path":"https://wjschne.github.io/ggdiagram/articles/causalpaths.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Path Diagrams","text":"","code":"library(ggplot2) library(ggdiagram) library(tibble) library(dplyr) library(purrr)"},{"path":"https://wjschne.github.io/ggdiagram/articles/causalpaths.html","id":"path-diagrams","dir":"Articles","previous_headings":"","what":"Path diagrams","title":"Path Diagrams","text":"Structural equation models often displayed path diagrams. visual vocabulary path diagrams fairly simple. observed variable square (rectangular) latent variable (.e., observed) circular (elliptical). Often omitted clarity, means intercepts constants can depicted triangles. Figure 1: Elements path diagram Figure 2: Relationships path diagram Figure 3: Regression Model Figure 4: latent variable three observed indicators three latent error terms. Figure 5: structural equation path diagram   Figure 6: latent variable 3 indicators","code":"ggplot() +    coord_equal() +    theme_void() +   {lv <- ob_circle(label = \"Latent<br>Variable\")} +   {r <- ob_rectangle(width = sqrt(pi),                   height = sqrt(pi),                   label = \"Observed<br>Variable\") |>     place(lv, \"right\", .5)} +   {i <- ob_circle(n = 3,                 radius = 1.25,                 label = \"Mean/<br>Intercept\") |>      place(r, \"right\", .3) + ob_point(0, -.25)} ggplot() +    coord_equal() +    theme_void() +   {this <- ob_circle(label = ob_label(\"This\", size = 40))} +   {that <- ob_circle(label = ob_label(\"That\", size = 40)) |>     place(this, \"right\")} +   connect(this, that, label = \"Causes\", resect = 2) +   {A <- this |>      place(this, \"below\")} +   {B <- that |>      place(that, \"below\")} +   covariance(A, B, label = ob_label(\"Correlates with\", vjust = 0)) ggplot() +    coord_equal() +    theme_void() +   {X <- ob_ellipse(     label = ob_label(\"*X*\",                    size = 60,                    nudge_y = -.15),      m1 = 15)} +   {Y <- ob_ellipse(     label = ob_label(\"*Y*\",                    size = 60,                    nudge_y = -.15),      m1 = 15) |>      place(X, \"right\")} +   {X_Y <- connect(X,Y,                    label = ob_label(\"*b*~1~\"),                    resect = 2)} +    {sigma_x <- variance(X,                         bend = -20,                         where = degree(\"south\"))} +   {sigma_e <- variance(Y,                         bend = -20,                         where = \"south\")} +   {i <- ob_polygon({icenter <- ob_polar(degree(60),                                 distance(X@center,                                         Y@center))} +                ob_polar(degree(c(90,210, 330))),               fill = NA,               color = \"black\",               label = ob_label(1,                             size = 40))} +   connect(intersection(i, ob_segment(icenter, X@center)),            X,            label = ob_label(\"*&mu;~X~*\", angle = 0),            resect = 2) +   connect(intersection(i, ob_segment(icenter, Y@center)),            Y,            label = ob_label(\"*b*~0~\", angle = 0),            resect = 2)    # ggimage::geom_image(   #   data = tibble(x = sigma_x@midpoint()@x,   #                 y = sigma_x@midpoint()@y),   #   aes(x = x,   #       y = y,   #       image = \"sigma2x.pdf\"),   #   size = .05) +   # ggimage::geom_image(   #   data = tibble(x = sigma_e@midpoint()@x,   #                 y = sigma_e@midpoint()@y),   #   aes(x = x,   #       y = y,   #       image = \"sigma2e.pdf\"),   #   size = .05) ggplot() +    coord_equal() +    theme_void() +   # Place a latent variable at the top   {l1 <- ob_circle(radius = 2)} +   # Place an array of observed variables below the circle   {o3 <- ob_ellipse(m1 = 9) |>      place(from = l1,            where = \"below\",            sep = 2) |>      shape_array(       k = 3,       where = 0,       sep = .4)} +   # Connect the latent to the observed variables at the north anchor point   {l1_o3 <- connect(l1,                      o3@point_at(\"north\"),                      resect = 2)} +    # Place error terms below each observed variable   {e3 <- ob_circle(radius = .75) |>     place(o3,           where = \"below\",           sep = .85)} +   # Connect the error terms to the observed variables   {e3_o3 <- connect(e3, o3, resect = 2)} +   # latent variance1   {v_l1 <- variance(l1, where = \"north\")} +   # label(1, v_l1@midpoint()) +    {v_e3 <- variance(     e3,     where = \"south\",     looseness = 1.5,     resect = unit(3, \"pt\"),     arrowhead_length = unit(7, \"pt\"),      arrow_head = arrowheadr::arrow_head_deltoid(2.4),     arrow_fins = arrowheadr::arrow_head_deltoid(2.4))} my_fills <- viridis::viridis(n = 3, begin = .3, end = .6) %>%    class_color() %>%    set_props(saturation = .6, brightness = .5) %>%    c()  my_path_color <- \"gray40\" my_resect <- 1 broad <- c(\"Gv\", \"Gf\", \"Gc\") my_arrowhead <- arrowheadr::arrow_head_deltoid(2.3) # my_arrowhead <- ggarrow::arrow_head_wings() g2broad <- c(Gv = .84, Gf = .95, Gc = .80) broad2indicator <- list(Gv = c(.78, .84, .91),                      Gf = c(.88, .81, .74),                      Gc = c(.74, .91, .93)) broad_variance <- 1 - g2broad ^ 2    latent <- redefault(ob_circle,                      color = NA)     lb_latent <- redefault(ob_label,                              size = 30,                              fill = NA,                              color = \"white\")  observed <- redefault(ob_ellipse,                             a = .5,                             b = .5,                             m1 = 10,                             # fill = my_fill,                            color = NA)  lb_observed <- redefault(ob_label,                              size = 15,                              fill = NA,                              color = \"white\",                             nudge_y = -.04)  lb_path <- redefault(ob_label,                           size = 11,                           fill = \"white\",                           color = my_path_color)  direct <- redefault(   connect,   resect = my_resect,   color = my_path_color,   arrow_head = my_arrowhead,   linewidth = .5,   length_head = 6 )   var_latent <- redefault(   variance,    theta = 40,   resect = my_resect,   color = my_path_color,    looseness = .9,    linewidth = .5,   arrow_head = my_arrowhead,   arrow_fins = my_arrowhead,   arrowhead_length = 6)      ggplot() +    coord_equal() +    theme_void() +   {g <- latent(label = lb_latent(\"*g*\"), fill = \"gray15\")} +    var_latent(g, label = lb_path(1)) +   {Gx <- place(g, g,where = \"below\", sep = 1.6) |>      shape_array(k = 3,                  sep = 2,                  label = lb_latent(broad,                                    vjust = .6),                 fill = my_fills)} +   var_latent(Gx,               where = \"left\",               color = Gx@fill,              label = lb_path(                round_probability(broad_variance,                                   phantom_text = \".\"),                color = Gx@fill)) +   {pGx <- direct(g, Gx, color = Gx@fill)} +   {lb_path(     label = round_probability(g2broad,                                phantom_text = \".\"),      p = pGx@line@point_at_y(pGx[2]@midpoint(       position = .47)@y),     color = Gx@fill)} +   # list----   purrr::map(as.list(Gx), \\(b) {     o1 <- place(observed(fill = b@fill),                  from = b,                  where = \"south\",                 sep = 1.6)          o <- shape_array(       o1,       k = 3,        sep = .2,       fill = purrr::map_chr(c(.6, .75, .9), tinter::lighten, x = o1@fill),       label = lb_observed(         paste0(           b@label@label,            \"~\",            1:3,            \"~\")))          p <- direct(b, o@point_at(\"north\"), color = b@fill)     l <- lb_path(round_probability(       broad2indicator[[b@label@label]],        phantom_text = \".\"),        p = p@line@point_at_y(p[2]@midpoint(position = .47)@y),       color = b@fill)     v <- variance(       o,       where = \"south\",       bend = -15,       looseness = 1.7,       resect = my_resect,       color = b@fill,       theta = 70,       linewidth = .5,       label = lb_path(         round_probability(sqrt(1 - broad2indicator[[b@label@label]] ^ 2)),         color = b@fill),       arrow_head = my_arrowhead,       arrow_fins = my_arrowhead,       arrowhead_length = 6     )          c(o, p, v, l) %>%        lapply(as.geom)   }) ggplot() +    coord_equal() +    theme_void() +   {g <- latent(label = lb_latent(\"*g*\"), fill = \"gray15\")} +    var_latent(g, label = lb_path(1), arrow_head = arrowheadr::arrow_head_deltoid() %>% arrowheadr::nudger(c(.5,0)) %>% arrowheadr::rescaler(.5)) +   {Gx <- place(g, g,where = \"below\", sep = 3) |>      shape_array(k = 3,                  sep = 3,                  label = lb_latent(broad,                                    vjust = .6,                                   color = \"gray15\"),                 fill = \"gray15\")} +   var_latent(Gx, \"left\",               label = lb_path(                round_probability(broad_variance,                                   phantom_text = \".\"),                color =  my_fills),              color = my_fills) +   {pGx <- direct(g, Gx, color = Gx@fill)} +   {lb_path(     label = round_probability(g2broad,                                phantom_text = \".\"),      p = pGx@line@point_at_y(pGx[2]@midpoint(       position = .47)@y),     color = Gx@fill)} +    ob_arc(center = Gx@center,           start = turn(.5) + turn(broad_variance) / 2,           end = turn(.5) - turn(broad_variance) / 2,           wedge = TRUE, fill = my_fills) +    lb_latent(broad, p = Gx@center, vjust = .6) ggplot() +   coord_equal() +   theme_void() +   {g <- latent(label = lb_latent(\"*g*\"), fill = \"gray15\")} +   {start <- degree(90 - 25)    end <- degree(90 + 25)     p_start <- g@point_at(start)    p_end <- g@point_at(end)    p_center <- intersection(g@tangent_at(start), g@tangent_at(end))    v_circle <- ob_circle(p_center, radius = distance(p_start, p_center))    ob_arc(     center = p_center,     radius = v_circle@radius,     end = v_circle@angle_at(p_start),     start = v_circle@angle_at(p_end) + degree(360),     resect = 2,     arrow_head = my_arrowhead,     arrow_fins = my_arrowhead,     arrowhead_length = 7,     linewidth = .5    )    } ggplot() + coord_equal() + theme_void() +   # Latent Variable   {Gc <- ob_circle(       fill = \"dodgerblue4\",       alpha = .6,       color = NA,       label = ob_label(         \"Gc\",         nudge_y = -.05,         fill = NA,         color = \"white\",         size = 60))} +   # Observed Variables   {Gc_3 <- ob_ellipse(a = .5,                    b = .5,                    m1 = 10,                    fill = \"dodgerblue4\") |>      place(from = Gc, where = \"below\", sep = 1.25) |>      shape_array(       k = 3,       where = 0,       sep = .2,       color = NA,       alpha = c(.55,.7,.85),       label = ob_label(subscript(\"Gc\", seq(3)),                      size = 24,                     nudge_y = -.05,                     color = \"white\",                      fill = NA))} +   # Paths from latent to observed   {pGc_Gc_3 <- connect(Gc, Gc_3@point_at(\"north\"),                          resect = 2,                          color = \"gray30\",                          alpha = 1)} +    # Place labels on a horizontal line   ob_label(label = round_probability(c(.75, .65, .89)),          p = pGc_Gc_3@line@point_at_y(pGc_Gc_3[2]@midpoint()@y)) +   # Place errors below observed variables   {e_Gc_3 <- ob_circle(radius = .3,                          fill = \"dodgerblue4\",                          color = NA,                         alpha = c(.55,.7,.85) - .2) |>      place(from = Gc_3,            where = \"below\",            sep = .4)} +    # Paths from errors to observed variables   connect(x = e_Gc_3,            y = Gc_3,            color = \"gray30\",            resect = 2,            alpha = 1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base plot","title":"Circles","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5 # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size))   theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))     bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"specifying-a-circle","dir":"Articles","previous_headings":"","what":"Specifying a Circle","title":"Circles","text":"Circles can specified point circle’s center (x0, y0) radius r (distance center circle’s edge). (x−x0)2+(y−y0)2=r2 (x-x_0)^2+(y-y_0)^2=r^2 Figure 1: circle can specified center radius, Figure 2: Point ellipse 45° x-axis.","code":"p <- ob_point(0,0) r <- 3 c1 <-  ob_circle(center = p, radius = 3) c1 #> <ob_circle> #> @ center: <ob_point> #>  @ x: num 0 #>  @ y: num 0 #> @ radius: num 3 #> Other props: label, alpha, color, fill, linewidth, linetype, n, #>              area, bounding_box, circumference, diameter, length, #>              style, tibble, geom, angle_at, normal_at, tangent_at, #>              point_at, aesthetics bp +   c1 +   c1@center@label(vjust = 1.2, plot_point = T) +   ob_segment(     c1@center,     c1@point_at(0),     color = my_colors[1],     label = ob_label(paste0(\"*r* = \", c1@radius), angle = 0, vjust = 0)   ) c1@point_at(degree(60)) #> <ob_polar> #> @ x    : num 1.5 #> @ y    : num 2.6 #> @ r    : num 3 #> @ theta: <radian> #>  @ radian: num 1.05 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, style, tibble, xy, geom, label, #>              aesthetics deg <- degree(60)  bp +    c1 +   {p45 <- c1@point_at(deg)} +   p45@label(hjust = 0, vjust = 0) +   ob_segment(c1@center, p45) +   ob_arc(radius = 1, start = degree(0), end = deg, label = deg)"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"point-on-the-circle-at-a-specific-angle","dir":"Articles","previous_headings":"","what":"Point on the circle at a specific angle","title":"Circles","text":"Figure 2: Point ellipse 45° x-axis.","code":"c1@point_at(degree(60)) #> <ob_polar> #> @ x    : num 1.5 #> @ y    : num 2.6 #> @ r    : num 3 #> @ theta: <radian> #>  @ radian: num 1.05 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, style, tibble, xy, geom, label, #>              aesthetics deg <- degree(60)  bp +    c1 +   {p45 <- c1@point_at(deg)} +   p45@label(hjust = 0, vjust = 0) +   ob_segment(c1@center, p45) +   ob_arc(radius = 1, start = degree(0), end = deg, label = deg)"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"placing-circles","dir":"Articles","previous_headings":"","what":"Placing circles","title":"Circles","text":"place function places object specified direction distance another object. Figure 3: Place Circle B one unit right Circle argument can take degrees named positions: east, east-northeast, northeast, north-northeast, north, north-northwest, northwest, west-northwest, west, west-southwest, southwest, south-southwest, south, south-southeast, southeast, east-southeast, right, top right, top, top left, left, bottom left, bottom, bottom right, , Multiple circles can created named directions: Figure 4: Place mutliple circles using named directions numbers (degrees): Figure 5: Place mutliple circles using degrees styles: Figure 6: Place mutliple circles styling works placing circles next . create point center, place six circles around , place 12 points around circle. Figure 7: Place circles around point, points around circle Figure 8: Placing line one unit northeast circle","code":"bp +    {A <- ob_circle(     center = ob_point(-2, 0),      radius = 1,      label = ob_label(\"A\", size = 30))} +    place(     ob_circle(radius = 1.5,            label = ob_label(\"B\", size = 30)),     from = A,     where = \"right\",     sep = 1) bp +    {c3 <- ob_circle(ob_point(0, 0), radius = 1)} +    place(ob_circle(radius = .5),          from = c3,          where = c(\"northwest\",                    \"northeast\",                    \"south-southeast\",                    \"south-southwest\"),          sep = 1) bp +    c3 +    place(ob_circle(radius = .5),          from = c3,          where = c(0, 30, -30),          sep = 1) bp +   {c4 <- ob_circle(       radius = 1,       color = NA,       fill = \"gray35\")} +   place(     ob_circle(       color = NA,       fill = class_color(viridis::viridis(         n = 6,          option = \"D\"))@lighten(.7)@color     ),     from = c4,     where = degree(seq(0, 300, 60)),     sep = 1   ) bp +    {p1 <- ob_point(0,0)} +   {c6 <- place(x = ob_circle(radius = .5,                            fill = viridis::viridis(6),                            color = NA),          from = p1,          where = degree(seq(0,300,60)),          sep = 2)} +   purrr::map(as.list(c6),               \\(x) ob_point(color = x@fill) |>                 place(from = x,                       where = degree(seq(0, 330, 30)),                       sep = .5) |>                 as.geom()) bp +   {c7 <- ob_circle()} +   place(ob_line(), c7, where = degree(45), sep = 1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"placing-circles-next-to-each-other","dir":"Articles","previous_headings":"","what":"Placing circles next to each other","title":"Circles","text":"place function places object specified direction distance another object. Figure 3: Place Circle B one unit right Circle argument can take degrees named positions: east, east-northeast, northeast, north-northeast, north, north-northwest, northwest, west-northwest, west, west-southwest, southwest, south-southwest, south, south-southeast, southeast, east-southeast, right, top right, top, top left, left, bottom left, bottom, bottom right, , Multiple circles can created named directions: Figure 4: Place mutliple circles using named directions numbers (degrees): Figure 5: Place mutliple circles using degrees styles: Figure 6: Place mutliple circles styling","code":"bp +    {A <- ob_circle(     center = ob_point(-2, 0),      radius = 1,      label = ob_label(\"A\", size = 30))} +    place(     ob_circle(radius = 1.5,            label = ob_label(\"B\", size = 30)),     from = A,     where = \"right\",     sep = 1) bp +    {c3 <- ob_circle(ob_point(0, 0), radius = 1)} +    place(ob_circle(radius = .5),          from = c3,          where = c(\"northwest\",                    \"northeast\",                    \"south-southeast\",                    \"south-southwest\"),          sep = 1) bp +    c3 +    place(ob_circle(radius = .5),          from = c3,          where = c(0, 30, -30),          sep = 1) bp +   {c4 <- ob_circle(       radius = 1,       color = NA,       fill = \"gray35\")} +   place(     ob_circle(       color = NA,       fill = class_color(viridis::viridis(         n = 6,          option = \"D\"))@lighten(.7)@color     ),     from = c4,     where = degree(seq(0, 300, 60)),     sep = 1   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"placing-circles-next-to-points-and-points-next-to-circles","dir":"Articles","previous_headings":"","what":"Placing circles next to points and points next to circles","title":"Circles","text":"works placing circles next . create point center, place six circles around , place 12 points around circle. Figure 7: Place circles around point, points around circle","code":"bp +    {p1 <- ob_point(0,0)} +   {c6 <- place(x = ob_circle(radius = .5,                            fill = viridis::viridis(6),                            color = NA),          from = p1,          where = degree(seq(0,300,60)),          sep = 2)} +   purrr::map(as.list(c6),               \\(x) ob_point(color = x@fill) |>                 place(from = x,                       where = degree(seq(0, 330, 30)),                       sep = .5) |>                 as.geom())"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"placing-lines-next-to-circles","dir":"Articles","previous_headings":"","what":"Placing lines next to circles","title":"Circles","text":"Figure 8: Placing line one unit northeast circle","code":"bp +   {c7 <- ob_circle()} +   place(ob_line(), c7, where = degree(45), sep = 1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"drawing-path-connectors-between-circles","dir":"Articles","previous_headings":"","what":"Drawing path connectors between circles","title":"Circles","text":"Let’s make two circles draw arrow path Figure 9: Connect two circles fine, often need labels styling make scientific diagrams. example: Figure 10: Connect two circles labels styles","code":"bp +    {c1 <- ob_circle(ob_point(-2, 2), radius = 1)} +    {c2 <- ob_circle(ob_point(1.5,-1.5), radius = 1.5)} +   connect(c1, c2) bp +   {cthis <- ob_circle(     ob_point(-2, 2),     radius = 1,     fill = my_colors[1],     color = NA,     label = ob_label(       \"This\",       color = \"white\",       fill = NA,       size = 35     )   )} +    {cthat <- ob_circle(     ob_point(1.5, -1.5),     radius = 1.5,     fill = my_colors[2],     color = NA,     label = ob_label(       \"That\",       color = \"white\",       fill = NA,       size = 55     )   )} +   connect(cthis, cthat,         resect = 2,         label = ob_label(\"Causes\", size = 20, vjust = 0),        color = \"black\")"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"paths-between-circles-and-lines","dir":"Articles","previous_headings":"","what":"Paths between circles and lines","title":"Circles","text":"Figure 11: Connect circle line line circle","code":"bp +    c1 +   {l1 <- ob_line(slope = 2, intercept = 0)} +   connect(c1, l1) +   {c2 <- ob_circle(ob_point(2, -2))} +    connect(l1, c2)"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base plot","title":"Ellipses","text":"avoid repetitive code, make base plot: common way specify ellipse center point two distances center point c horizontal vertical edges, b, respectively. (x−cxa)2+(y−cyb)2=1\\left(\\frac{x-c_x}{}\\right)^2+\\left(\\frac{y-c_y}{b}\\right)^2=1 Figure 1: ellipse can specified center, semi-major radii.","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5 # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(   geom = \"richtext\",    new = list(family = my_font,               size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size))   theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))     bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered,                       limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   ) a <- 4 b <- 3 c1 <- ob_point(0,0) e1 <- ob_ellipse(c1, a = a, b = b) bp +    e1 +    ob_segment(c1,            ob_point(c(a, 0), c(0, b)),            color = my_colors,            label = ob_label(             label = paste0(c(\"*a* = \", \"*b* = \"),                             c(a, b)),              angle = 0)) +   c1"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"foci","dir":"Articles","previous_headings":"","what":"Foci","title":"Ellipses","text":"circle one focus, center. ≠ b, ellipse two foci. Figure 2: ellipse two foci point P ellipse, sum PF1 PF2 2a > b 2b b > . Figure 3: sum distances foci constant.","code":"bp +    e1 +    ob_label(\"*F*~1~\", e1@focus_1, plot_point = T, vjust = 1.2) +   ob_label(\"*F*~2~\", e1@focus_2, plot_point = T, vjust = 1.2) deg <- degree(61.5)  bp +    e1 +    ob_label(\"*F*~1~\", e1@focus_1, plot_point = T, vjust = 1.2) +   ob_label(\"*F*~2~\", e1@focus_2, plot_point = T, vjust = 1.2) +    {P <- e1@point_at(deg)} +   P@label(\"*P*\", polar_just = ob_polar(deg, 1.5)) +   ob_segment(e1@focus_1,            P,            label = paste0(\"*PF*~1~ = \",                          distance(e1@focus_1, P) |>                            round())) +    ob_segment(P,            e1@focus_2,            label = paste0(\"*PF*~2~ = \",                          distance(e1@focus_2, P) |>                             round())) +    ob_label(\"*PF*~1~ + *PF*~2~ = 2*a* = 8\",          p = ob_point(0,4),          size = 20)"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"point-on-the-ellipse-at-a-specific-angle","dir":"Articles","previous_headings":"","what":"Point on the ellipse at a specific angle","title":"Ellipses","text":"@point_at property ob_ellipse object function can find point specific angle. Figure 4: Point ellipse 45° x-axis.","code":"e1@point_at(degree(60)) #> <ob_point> #> @ x: num 1.59 #> @ y: num 2.75 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics deg <- degree(60) bp +   e1 +   {p45 <- e1@point_at(deg)} +   p45@label(polar_just = ob_polar(deg, 1.5)) +   ob_segment(e1@center, p45) +   ob_arc(     center = e1@center,     radius = 1,     start = degree(0),     end = deg,     label = deg   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"point-on-the-ellipse-using-definitional-parameter-t","dir":"Articles","previous_headings":"","what":"Point on the ellipse using definitional parameter t","title":"Ellipses","text":"angle expected @point_at function true angle. However, parametric equation ellipses parameter t looks like angle, actually direct geometric interpretation: t=[0,2π)(x,y)=(acos(t),bsin(t)) \\begin{align} t&=[0,2\\pi)\\\\ (x,y) &= (\\cos(t),b\\sin(t)) \\end{align} Figure 5: ellipse’s definitional parameter t always line angles circle definitional point t desired:","code":"theta <- degree(seq(0, 350, 30))  bp +    {c1 = ob_circle(radius = 3.6, color = \"gray30\")} +   {e1 <- ob_ellipse(a = 2.8)} +   {p1 <- c1@point_at(theta)} +   ob_label(theta, p1, polar_just = ob_polar(theta, r = 1.5)) +   ob_segment(ob_point(), p1, linewidth = .2) +   {p2 <- e1@point_at(theta, definitional = T, color = \"dodgerblue\")} +   ob_segment(ob_point(), p2) +    ob_label(theta@degree, p2, polar_just = ob_polar(theta, r = 1.5)) +   theme_void() ob_ellipse(a = 2)@point_at(degree(60), definitional = TRUE) #> <ob_point> #> @ x: num 1 #> @ y: num 1.73 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"tangent-lines","dir":"Articles","previous_headings":"","what":"Tangent lines","title":"Ellipses","text":"Like @point_at property, @tangent property function find tangent line specified angle point. Figure 6: Tangent lines ellipse @tangent function can also take point instead angle.  point ellipse, tangent point’s projection onto ellipse:","code":"bp +    {e1 <- ob_ellipse(a = 3, b = 2)} +    e1@point_at(60, color = \"firebrick4\") +    e1@tangent_at(60, color = \"firebrick4\") bp +    e1 +    {p1 <- e1@point_at(60)} +   e1@tangent_at(p1) bp +    e1 +    {p1 <- ob_point(3, 2, color = \"firebrick4\")} +   e1@tangent_at(p1) +    projection(p1, e1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"superellipses","dir":"Articles","previous_headings":"","what":"Superellipses","title":"Ellipses","text":"standard formula ellipse can altered squared entities can raised positive number. (x−cxa)m1+(y−cyb)m2=1 \\left(\\frac{x-c_x}{}\\right)^{m_1}+\\left(\\frac{y-c_y}{b}\\right)^{m_2}=1 m2 set equal m1 unless otherwise specified. m1 4, b equal, can make squircle, square-ish circle. Figure 7: squircle increase m1 high value like 10, can rectangle pleasingly rounded corners. Figure 8: superellipse can look like rectangle rounded corners.","code":"bp +    ob_ellipse(a = 3,            b = 3,            m1 = 4) bp +   ob_ellipse(     a = 3,     b = 3,     m1 = 10,     color = NA,     fill = \"dodgerblue\",     label = ob_label(       label = \"My<br>Variable\",       fill = NA,       color = \"white\",       size = 70     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"connection-paths-among-ellipses","dir":"Articles","previous_headings":"","what":"Connection Paths Among Ellipses","title":"Ellipses","text":"Figure 9: Connections ellipses","code":"bp +    {e1 <- ob_ellipse(ob_point(-2,0), a = 2)} +   {e2 <- ob_ellipse(ob_point(3,2), b = 2)} +   connect(e1, e2, resect = 2)"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"placing-ellipses","dir":"Articles","previous_headings":"","what":"Placing Ellipses","title":"Ellipses","text":"place function set object position distance another object. set ellipse right e1 (.e., “east” 0 degrees) separation 2. Figure 10: Place ellipse 2 units right another ellipse. sep parameter place function necessarily shortest distance ellipses. Instead, distance ellipses segment connecting center points. Figure 11: separation distance ellipses along path connects centers. can place many ellipses . Figure 12, 12 ellipses placed around central ellipse. Connection paths drawn ellipse. Figure 12: Many ellipses can placed . Lines can placed relation ellipses: Figure 13: line placed 3 units 45 degrees squircle.","code":"bp +    {e1 <- ob_ellipse(center = ob_point(-2, 0),                   a = 2)} +   place(ob_ellipse(b = 2),          from = e1,          where = \"right\",          sep = 2) deg <- degree(30)  bp +    {e1 <- ob_ellipse(ob_point(-2,-1,                         color =  \"dodgerblue4\"),                   a = 2,                   b = 1.5)} +   {e2 <- place(ob_ellipse(ob_point(color = \"orchid4\"),                        b = 2),                 from = e1,                 where = deg,                 sep = 2)} +    connect(e1, e2,         arrow_head = ggarrow::arrow_head_minimal(),         linetype = \"dashed\",         label = ob_label(2, vjust = 0)) +   ob_arc(e1@center, end = deg, label = deg) +    ob_segment(e1@center, e1@point_at(deg)) +    ob_segment(e2@center, e2@point_at(deg + degree(180))) +    ob_label(\"*e*~1~\", e1@center) +    ob_label(\"*e*~2~\", e2@center) # Number of ellipses k <- 12  # Colors e_fills <- hsv(h = seq(0, 1 - 1 / k, length.out = k),                 s = .4,                 v = .6)  bp +    {e_0 <- ob_ellipse(m1 = 6,                   label = ob_label(\"*e*~0~\",                                 size = 40,                                 color = \"white\",                                 fill = \"gray20\"),                  color = NA,                  fill = \"gray20\")} +    {e_x <- place(     x = ob_ellipse(a = .4,                  b = .4,                  m1 = 6,                  label = ob_label(paste0(\"*e*~\", seq(k), \"~\"),                                color = \"white\",                                fill = e_fills),                 color = NA,                 fill = e_fills),     from = e_0,     where = degree(seq(0, 360 - 360 / k, 360 / k)),     sep = 2   )} +   connect(e_0,            e_x,            resect = 2,            color = e_fills) +    theme_void() bp +    {e1 <- ob_ellipse(m1 = 4)} +   {l1 <- place(x = ob_line(),                 from = e1,                 where = {deg1 <- degree(45)},                 sep = {d = 3})} +    connect(e1, l1,            label = paste0(\"Distance = \", d),                      arrow_fins = arrowheadr::arrow_head_deltoid(),            length_fins = 8,            length_head = 8,            resect = 1) +    ob_label(label = l1@equation,          p = ob_polar(theta = deg1,                    r = e1@point_at(deg1)@r + d),          angle = l1@angle,          vjust = 0) n <- 5  e1 <- ob_ellipse(ob_point(runif(n,-2,2),                        runif(n,-2,2)),                 a = runif(n, .5, 1.5),                 b = runif(n, .5, 1.5),                 m1 = runif(n,2,10),                 angle = degree(runif(n, 0, 360)))  # d_rect <- e1@tibble |> #         dplyr::mutate(group = dplyr::row_number(), #                       d = purrr::pmap(list(x0 = x0, #                                            y0 = y0, #                                            a = a, #                                            b = b, #                                            angle = angle, #                                            m1 = m1, #                                            m2 = m2), #                                       \\(x0, y0,a,b,angle, m1,m2) { #                                         th <- degree(seq(0,359.5,.5)) #                                         cs <- cos(th) #                                         sn <- sin(th) #                                         x <- a * (abs(cs) ^ (2 / m1)) * sign(cs) #                                         y <- b * (abs(sn) ^ (2 / m2)) * sign(sn) #                                         xy <- rotate2columnmatrix( #                                           cbind(x,y), angle) #                                         xr <- xy[,1] + x0 #                                         yr <- xy[,2] + y0 #                                         tibble(xmin = min(xr), #                                                xmax = max(xr), #                                                ymin = min(yr), #                                                ymax = max(yr)) #                                       })) |> #         tidyr::unnest(d) %>%  #         dplyr::summarise(xmin = min(xmin), #                          xmax = max(xmax), #                          ymin = min(ymin), #                          ymax = max(ymax))          ggplot() + coord_equal() + theme_minimal() +   e1 +    e1@bounding_box # rectangle(southwest = ob_point(d_rect$xmin, d_rect$ymin),   #               northeast = ob_point(d_rect$xmax, d_rect$ymax))"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Lines","text":"avoid repetitive code, make base plot:","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5 # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size))   theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))     bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Lines","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext)"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base plot","title":"Lines","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5 # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size))   theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))     bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"making-lines","dir":"Articles","previous_headings":"","what":"Making Lines","title":"Lines","text":"Lines can constructed slope intercept: Figure 1: line slope 2 intercept 1 default slope 0, horizontal ob_line can set just intercept: Figure 2: horizontal line intercept 2 vertical line can set x-intercept: Figure 3: Vertical line x = −2 line—horizontal, vertical, sloped—can constructed coefficients general form line: ax++c=0 ax++c=0 Figure 4: Line slope = 0 intercept = −2 respect general form, slope equal −ab-\\frac{}{b}, y-intercept equal −cb-\\frac{c}{b}, x-intercept equal −ca-\\frac{c}{}","code":"l <- ob_line(slope = 2, intercept = 1, color = my_colors[1]) l #> <ob_line> #> @ slope     : num 2 #> @ intercept : num 1 #> @ xintercept: num -0.5 bp +   l +   l@point_at_y(0)@label(l@equation, angle = l@angle) h <- ob_line(intercept = 2, color = my_colors[1]) h #> <ob_line> #> @ slope     : num 0 #> @ intercept : num 2 #> @ xintercept: num -Inf bp +    h +    h@point_at_x(0)@label(h@equation) v <- ob_line(xintercept = -2, color = my_colors[1]) v #> <ob_line> #> @ slope     : num -Inf #> @ intercept : num -Inf #> @ xintercept: num -2 bp +    v +    v@point_at_y(0)@label(equation(v), angle = v@angle * -1) l_123 <- ob_line(a = 1, b = 2, c = 3, color = my_colors[1]) bp +   l_123 +   l_123@point_at_x(     x = 0)@label(       equation(l_123, type = \"general\"),        angle = l_123@angle)"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Lines","text":"point can “projected” onto line. Imagine shining light point direction perpendicular line. point’s shadow line shortest distance line point. shortest distance point line can calculated. Figure 5: Shortest distance line point","code":"p <- ob_point(3,-2, color = my_colors[2]) l <- ob_line(slope = 2, intercept = 2, color = my_colors[1]) # Point p projected onto line l p_projected <- projection(p, l)  # Alternately: l@projection(p) #> <ob_point> #> @ x: num -1 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics # distance from point p to line l distance(p, l) #> [1] 4.472136  # Equivalently: ob_segment(p, l@projection(p))@distance #> [1] 4.472136 bp +   l +   l@point_at_x(.5)@label(     label = l@equation,      angle = l@angle) +   {s_projected <- ob_segment(       p1 = l@projection(p),       p2 = p,       linetype = \"dashed\",       label = paste0(\"Distance = \",                       distance(l@projection(p), p) |>                        round(digits = 2) |>                        as.character()))} +    s_projected@midpoint(c(0, 1))@label(     polar_just = degree(s_projected@line@angle) + c(180, 0),     plot_point = TRUE)"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"projections-and-distances","dir":"Articles","previous_headings":"","what":"Projections and Distances","title":"Lines","text":"point can “projected” onto line. Imagine shining light point direction perpendicular line. point’s shadow line shortest distance line point. shortest distance point line can calculated. Figure 5: Shortest distance line point","code":"p <- ob_point(3,-2, color = my_colors[2]) l <- ob_line(slope = 2, intercept = 2, color = my_colors[1]) # Point p projected onto line l p_projected <- projection(p, l)  # Alternately: l@projection(p) #> <ob_point> #> @ x: num -1 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics # distance from point p to line l distance(p, l) #> [1] 4.472136  # Equivalently: ob_segment(p, l@projection(p))@distance #> [1] 4.472136 bp +   l +   l@point_at_x(.5)@label(     label = l@equation,      angle = l@angle) +   {s_projected <- ob_segment(       p1 = l@projection(p),       p2 = p,       linetype = \"dashed\",       label = paste0(\"Distance = \",                       distance(l@projection(p), p) |>                        round(digits = 2) |>                        as.character()))} +    s_projected@midpoint(c(0, 1))@label(     polar_just = degree(s_projected@line@angle) + c(180, 0),     plot_point = TRUE)"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Paths","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(geomtextpath)"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Paths","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5 my_arrowhead <- arrowheadr::arrow_head_deltoid(2.1) # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(geom = \"labelpath\",                       new = list(family = my_font,                                 size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size)) update_geom_defaults(\"arrow_segment\", list(length_head = 5)) update_geom_defaults(\"arrow\", list(linewidth = 2))  theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"base-plot-1","dir":"Articles","previous_headings":"","what":"Base plot","title":"Paths","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5 my_arrowhead <- arrowheadr::arrow_head_deltoid(2.1) # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(geom = \"labelpath\",                       new = list(family = my_font,                                 size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size)) update_geom_defaults(\"arrow_segment\", list(length_head = 5)) update_geom_defaults(\"arrow\", list(linewidth = 2))  theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"paths","dir":"Articles","previous_headings":"","what":"Paths","title":"Paths","text":"path function creates object connects points along path. Figure 1: Plotting path.","code":"p <- ob_point(c(-4,-3,4), c(0,-2, 0), color = \"dodgerblue\") bp +    ob_path(p) +   p"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"path-labels","dir":"Articles","previous_headings":"","what":"Path Labels","title":"Paths","text":"label path created geomtextpath::geom_labelpath, thus curve path curved. Figure 2: path curved label can control position path label either label’s position hjust properties. Figure 3: path curved label position .1","code":"p_curve <- tibble(x = seq(-4, 4, .1),                    y = (pnorm(x) * 8 - 4)) |>   ob_point()    bp +   ob_path(     p = p_curve,     label = ob_label(       \"A path label will curve along the path.\",       vjust = -.1,       size = 20,       color = \"dodgerblue4\"     ),     arrowhead_length = 8,     arrow_head = my_arrowhead   ) bp +   ob_path(     p = p_curve,     label = ob_label(       \"A path label will curve along the path.\",       vjust = -.1,       size = 20,       color = \"dodgerblue4\",       position = .1     ),     arrowhead_length = 8,     arrow_head = my_arrowhead   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"multiple-paths","dir":"Articles","previous_headings":"","what":"Multiple paths","title":"Paths","text":"create multiple paths , specify list vector point objects. Figure 4: Multiple paths","code":"bp +   ob_path(c(p_curve,           p_curve * .5 + ob_point(2,-2),          p_curve * .5 + ob_point(-2,2)),         color = c(\"orchid4\",                  \"dodgerblue3\",                  \"firebrick4\"),        label = c(\".52\", \".42\", \".61\"))"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Points","text":"avoid repetitive code, make base plot:","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(arrowheadr) my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 3 my_arrow_head <- arrowheadr::arrow_head_deltoid() update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size))  theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5, face = \"italic\"))) bp <- ggplot() +   coord_equal(xlim = c(0, 5), ylim = c(0, 5))"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Points","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(arrowheadr)"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base plot","title":"Points","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 3 my_arrow_head <- arrowheadr::arrow_head_deltoid() update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size))  theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5, face = \"italic\"))) bp <- ggplot() +   coord_equal(xlim = c(0, 5), ylim = c(0, 5))"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"points","dir":"Articles","previous_headings":"","what":"Points","title":"Points","text":"Points x y coordinates. Figure 1: Creating points point’s x y coordinates can specified polar coordinates @r: distance origin point (.e., vector’s magnitude) @theta: angle (radians) line x-axis line containing vector. Figure 2: Polar Coordinates point can created polar coordinates angle numeric instead angle, assumed radians.","code":"p1 <- ob_point(1, 2, color = \"firebrick\") p2 <- ob_point(3, 4, color = \"royalblue3\")  bp +    p1 +    p2 p2 #> <ob_point> #> @ x: num 3 #> @ y: num 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p2@r #> [1] 5 p2@theta #> 0.3π ggplot() +   coord_equal(xlim = c(-p2@r, p2@r),                ylim = c(-p2@r, p2@r)) +   scale_x_continuous(breaks = -10:10,                       minor_breaks = NULL,                       labels = WJSmisc::signs_centered) +   scale_y_continuous(breaks = -10:10,                       minor_breaks = NULL,                       labels = signs::signs) +   ob_circle(radius = p2@r) +   p2@label(plot_point = TRUE,             polar_just = ob_polar(p2@theta, r = 1.5)) +   ob_segment(p1 = ob_point(),            p2 = p2,            label = paste0(\"*r* = \", round(p2@r, 2))) +    ob_arc(end = p2@theta,        color = \"royalblue3\",        label = paste0(\"&theta; = \", degree(p2@theta))) ob_polar(r = 5, theta = degree(60)) #> <ob_polar> #> @ x    : num 2.5 #> @ y    : num 4.33 #> @ r    : num 5 #> @ theta: <radian> #>  @ radian: num 1.05 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, style, tibble, xy, geom, label, #>              aesthetics ob_polar(r = 1, theta = pi)@theta #> π"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"polar-coordinates","dir":"Articles","previous_headings":"","what":"Polar Coordinates","title":"Points","text":"point’s x y coordinates can specified polar coordinates @r: distance origin point (.e., vector’s magnitude) @theta: angle (radians) line x-axis line containing vector. Figure 2: Polar Coordinates point can created polar coordinates angle numeric instead angle, assumed radians.","code":"p2 #> <ob_point> #> @ x: num 3 #> @ y: num 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p2@r #> [1] 5 p2@theta #> 0.3π ggplot() +   coord_equal(xlim = c(-p2@r, p2@r),                ylim = c(-p2@r, p2@r)) +   scale_x_continuous(breaks = -10:10,                       minor_breaks = NULL,                       labels = WJSmisc::signs_centered) +   scale_y_continuous(breaks = -10:10,                       minor_breaks = NULL,                       labels = signs::signs) +   ob_circle(radius = p2@r) +   p2@label(plot_point = TRUE,             polar_just = ob_polar(p2@theta, r = 1.5)) +   ob_segment(p1 = ob_point(),            p2 = p2,            label = paste0(\"*r* = \", round(p2@r, 2))) +    ob_arc(end = p2@theta,        color = \"royalblue3\",        label = paste0(\"&theta; = \", degree(p2@theta))) ob_polar(r = 5, theta = degree(60)) #> <ob_polar> #> @ x    : num 2.5 #> @ y    : num 4.33 #> @ r    : num 5 #> @ theta: <radian> #>  @ radian: num 1.05 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, style, tibble, xy, geom, label, #>              aesthetics ob_polar(r = 1, theta = pi)@theta #> π"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"convert-to-tibble","dir":"Articles","previous_headings":"","what":"Convert to tibble","title":"Points","text":"extract styles set. convenience, tibble associated point object can accessed @tibble property.","code":"get_tibble(ob_point(1,2,                   color = \"red\",                   shape = 16)) #> # A tibble: 1 × 4 #>       x     y color shape #>   <dbl> <dbl> <chr> <dbl> #> 1     1     2 red      16 ob_point(1:5,2,        color = \"blue\",        shape = 1:5)@tibble #> # A tibble: 5 × 4 #>       x     y color shape #>   <int> <dbl> <chr> <int> #> 1     1     2 blue      1 #> 2     2     2 blue      2 #> 3     3     2 blue      3 #> 4     4     2 blue      4 #> 5     5     2 blue      5"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Points","text":"Points can added subtracted: Points can scaled constants x y coordinates can scaled separately points:","code":"p1 <- ob_point(2, 3) p2 <- ob_point(2, 1) p3 <- p1 + p2 p3 #> <ob_point> #> @ x: num 4 #> @ y: num 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p3 - p2 #> <ob_point> #> @ x: num 2 #> @ y: num 3 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p2 * 2 #> <ob_point> #> @ x: num 4 #> @ y: num 2 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p3 / 4 #> <ob_point> #> @ x: num 1 #> @ y: num 1 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p1 / p3 #> <ob_point> #> @ x: num 0.5 #> @ y: num 0.75 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p1 * p3 #> <ob_point> #> @ x: num 8 #> @ y: num 12 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"arithmetic","dir":"Articles","previous_headings":"","what":"Arithmetic","title":"Points","text":"Points can added subtracted: Points can scaled constants x y coordinates can scaled separately points:","code":"p1 <- ob_point(2, 3) p2 <- ob_point(2, 1) p3 <- p1 + p2 p3 #> <ob_point> #> @ x: num 4 #> @ y: num 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p3 - p2 #> <ob_point> #> @ x: num 2 #> @ y: num 3 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p2 * 2 #> <ob_point> #> @ x: num 4 #> @ y: num 2 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p3 / 4 #> <ob_point> #> @ x: num 1 #> @ y: num 1 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p1 / p3 #> <ob_point> #> @ x: num 0.5 #> @ y: num 0.75 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics p1 * p3 #> <ob_point> #> @ x: num 8 #> @ y: num 12 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"distance","dir":"Articles","previous_headings":"","what":"Distance","title":"Points","text":"distance two points: shortest distance point line: shortest distance point circle’s edge: Figure 3: Point Circle Distances","code":"distance(p1, p2) #> [1] 2 l1 <- ob_line(slope = 1,             intercept = 2) distance(p1, l1) #> [1] 0.7071068 c1 <- ob_circle(center = ob_point(2, 2), radius = 2) p1 <- c1@center + ob_polar(   r = c1@radius * 1,    theta = degree(115),    color = \"royalblue3\")  p2 <- c1@center + ob_polar(   r = c1@radius * 2,    theta = degree(45),    color = \"firebrick4\")  p3 <- c1@center + ob_polar(   r = c1@radius * .3,    theta = degree(190),    color = \"orchid4\")   # p1 is on circle, so its distance is 0 distance(p1, c1) #> [1] 0 # p2 is outside the circle distance(p2, c1) #> [1] 2 # p3 is inside the circle distance(p3, c1) #> [1] 1.4 intersect_c1_p2 <- c1@point_at((p2 - c1@center)@theta)  seg_style <- ob_style(   arrowhead_length = 7,   arrow_head = my_arrow_head,   arrow_fins = my_arrow_head,   resect = unit(5, \"pt\") )  seg_c1_p2 <- ob_segment(   intersect_c1_p2,   p2,    style = seg_style,    label = scales::number(distance(intersect_c1_p2, p2), .1))  intersect_c1_p3 <- c1@point_at((p3 - c1@center)@theta)  seg_c1_p3 <- ob_segment(   intersect_c1_p3,   p3,   color = p3@color,    label = scales::number(distance(intersect_c1_p3, p3), .1),   style = seg_style)  p_labels <- paste0(\"P<sub>\",1:3, \"<\/sub>\")  bp +   c1 +   p1@label(label = p_labels[1],             plot_point = T,            polar_just = ob_polar(              theta = (p1 - c1@center)@theta,              r = 1.3)) +   seg_c1_p2 +   seg_c1_p2@midpoint(c(0,1)) +   seg_c1_p2@midpoint(1)@label(     label = p_labels[2],      polar_just = ob_polar(theta = seg_c1_p3@line@angle, 1.5)) +   seg_c1_p3 +   seg_c1_p3@midpoint(c(0,1)) +   seg_c1_p3@midpoint(c(1))@label(     label = p_labels[3],      polar_just = ob_polar(theta = seg_c1_p3@line@angle, 1.5))"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"convert-points-to-geoms","dir":"Articles","previous_headings":"","what":"Convert points to geoms","title":"Points","text":".geom function called implicitly whenever point object added ggplot. Figure 4 equivalent Figure 5 equivalent Figure 6 , style information can mapped handled via (identity) function mapping statement (aes). Calling .geom function directly useful overriding style information points. Figure 7 equivalent Figure 8","code":"pts <- ob_point(x = c(3,2),               y = c(4,3),               color = c(\"red\", \"blue\"),              size = c(3, 6))  ggplot() +    pts ggplot() +   as.geom(pts) ggplot() +   geom_point(     aes(       x,       y,       color = I(color),       size = I(size)),      data = get_tibble_defaults(pts)) ggplot() +    as.geom(pts,            stroke = 1.5,           fill = \"yellow\",            shape = \"triangle filled\") ggplot() +   geom_point(     aes(x = x,          y = y,          size = I(size),          color = I(color)),     stroke = 1.5,     fill = \"yellow\",     shape = \"triangle filled\",     data = pts@tibble   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"bounding-box","dir":"Articles","previous_headings":"","what":"Bounding box","title":"Points","text":"possible find rectangle bounds points ob_point object Figure 9: bounding box set points","code":"bp +    {pts <- ob_point(x = 1:4,                 y = c(3,3,4, 2))} +    pts@bounding_box"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Polygons","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(geomtextpath)"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Polygons","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5 my_arrowhead <- arrowheadr::arrow_head_deltoid(2.1) # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(geom = \"labelpath\",                       new = list(family = my_font,                                 size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size)) update_geom_defaults(\"arrow_segment\", list(length_head = 5)) update_geom_defaults(\"arrow\", list(linewidth = 2))  theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"base-plot-1","dir":"Articles","previous_headings":"","what":"Base plot","title":"Polygons","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_text_size <- 20 my_point_size <- 2.5 my_arrowhead <- arrowheadr::arrow_head_deltoid(2.1) # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\") update_geom_defaults(geom = \"richtext\",                       new = list(family = my_font,                                  size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(geom = \"labelpath\",                       new = list(family = my_font,                                 size = .8 * my_text_size / ggplot2::.pt))  update_geom_defaults(\"point\", list(size = my_point_size)) update_geom_defaults(\"arrow_segment\", list(length_head = 5)) update_geom_defaults(\"arrow\", list(linewidth = 2))  theme_set(   theme_minimal(     base_size = my_text_size,      base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggplot() +   coord_equal() +   scale_x_continuous(labels = WJSmisc::signs_centered, limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs, limits = c(-4, 4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"polygons","dir":"Articles","previous_headings":"","what":"Polygons","title":"Polygons","text":"ob_polygon function creates object connects points make polygon. Figure 1: Plotting path.","code":"p <- ob_point(x = c(-4,-3, 4,  3, -1),             y = c( 0, 4, 3, -3, -4)) bp +    ob_polygon(p, fill = \"dodgerblue3\")"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"polygon-labels","dir":"Articles","previous_headings":"","what":"Polygon Labels","title":"Polygons","text":"label ob_polygon object placed, default, centroid polygon. centroid point whose x coordinate average x coordinates polygon’s points whose y coordinate likewise average point’s y coordinates. Figure 2: path curved label","code":"bp +   ob_polygon(     p = p,     label = ob_label(       \"My<br>Polygon\",       size = 20,       color = \"white\"     ),     fill = \"dodgerblue4\"   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"connecting-polygons","dir":"Articles","previous_headings":"","what":"Connecting polygons","title":"Polygons","text":"Connections polygons arrows emanate point towards polygons’ centroids. Figure 3: Arrow two polygons","code":"bp +    {p1 <- ob_polygon(.5 * p - ob_point(1.9,1.9),                fill = \"dodgerblue4\")} +    {p2 <- ob_polygon(.5 * p + ob_point(1.9, 1.9),                fill = \"orchid4\")} +    connect(p1, p2,            resect = 1,            label = \".45\")"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"rounding-polygons","dir":"Articles","previous_headings":"","what":"Rounding polygons","title":"Polygons","text":"@radius property controls radius rounded corners. must length 1. can given ggplot2::unit numeric value. numeric, understood proportion plot area width.","code":"bp +    ob_polygon(p, radius = unit(5, \"mm\"))"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"specifying-a-rectangle","dir":"Articles","previous_headings":"","what":"Specifying a Rectangle","title":"Rectangles","text":"rectangle 4 corners (northeast, northwest, southwest, southeast). center. width height. purpose demonstration, can specify features, though practice necessary. give rectangle function enough information deduce four corners , features calculated. following give rectangle: easy way specify rectangle specify width height points. following rectangles equivalent. Figure 1: Center, Width, Height Figure 2: Specify rectangle height, width, northeast corner Figure 3: Specify rectangle height, width, northwest corner Figure 4: Specify rectangle height, width, southwest corner Figure 5: Specify rectangle height, width, southeast corner rectangle can specified center corner. following rectangles equivalent. Figure 6: Specify rectangle center northeast corner Figure 7: Specify rectangle center northwest corner Figure 8: Specify rectangle center southeast corner Figure 9: Specify rectangle center southwest corner rectangle can specified points opposite corners. rectangles equivalent. Figure 10: Specify rectangle northeast southwest corners Figure 11: Specify rectangle northwest southeast corners rectangle can specified width 2 points left right side. rectangles equivalent. Figure 12: Specify rectangle width left corners Figure 13: Specify rectangle width right corners rectangle can specified height 2 points top bottom side. rectangles equivalent. Figure 14: Specify rectangle height top corners Figure 15: Specify rectangle height top corners","code":"# northeast corner ne <- ob_point(4,2)  # northwest corner nw <- ob_point(0,2) # southwest corner sw <- ob_point(0,0) # southeast corner se <- ob_point(4,0) # center point cent <- ob_point(2,1) # width w <- 4 # height h <- 2 r1 <- ob_rectangle(   width = w,   height = h,   center = cent,   color = my_colors$primary,   fill = my_colors$primary@transparentize(.15),   linewidth = 1 ) r1 #> <ob_rectangle> #> @ center: <ob_point> #>  @ x: num 2 #>  @ y: num 1 #> @ width : num 4 #> @ height: num 2 #> Other props: label, radius, alpha, color, fill, linewidth, #>              linetype, angle, area, bounding_box, perimeter, #>              northeast, northwest, southwest, southeast, east, #>              north, west, south, side, length, style, tibble, geom, #>              normal_at, point_at, aesthetics double_arrowstyle <- ob_style(   arrow_head = arrow_head_deltoid(),   arrow_fins = arrow_head_deltoid(),   color = my_colors$secondar )  s_east <- r1@side@east@nudge(x = .1) s_east@style <- double_arrowstyle  s_north <- r1@side@north@nudge(y = .1) s_north@style <- double_arrowstyle  rc_plot <- ggplot() +   coord_equal(ylim = c(0, 2.2)) +   scale_y_continuous(breaks = -10:10) +   r1  rc_center <- c(   as.geom(r1@center),   as.geom(r1@center@label(     fill = my_colors$primary@lighten(.15),      vjust = -.15)))  rc_width <- as.geom(s_north |> set_props(label = ob_label(     label = paste0(\"Width = \", r1@width),     p = midpoint(s_north),     color = my_colors$secondary,     vjust = 0,     label.margin = ggplot2::margin(2, 2, 2, 2, \"pt\")   )))  rc_height <- as.geom(s_east |>                         set_props(label = ob_label(     label = paste0(\"Height = \", r1@height),     p  = midpoint(s_east),     vjust = 0,     color = my_colors$secondary,     angle = -90)))   rc_nw <- r1@northwest@label(   plot_point = T,   vjust = 1.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_ne <- r1@northeast@label(   plot_point = T,   vjust = 1.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_sw <- r1@southwest@label(   plot_point = T,   vjust = -.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_se <- r1@southeast@label(   plot_point = T,   vjust = -.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_plot + rc_center + rc_width + rc_height r1 == ob_rectangle(width = w,                 height = h,                 northeast = ne) #> [1] FALSE rc_plot + rc_width + rc_height + rc_ne r1 == ob_rectangle(width = w,                 height = h,                 northwest = nw) #> [1] FALSE rc_plot + rc_width + rc_height + rc_nw r1 == ob_rectangle(width = w,                 height = h,                 southwest = sw) #> [1] FALSE rc_plot + rc_width + rc_height + rc_sw r1 == ob_rectangle(width = w,                 height = h,                 southeast = se) #> [1] FALSE rc_plot + rc_width + rc_height + rc_se r1 == ob_rectangle(center = cent,                  northeast = ne) #> [1] FALSE rc_plot + rc_center + rc_ne r1 == ob_rectangle(center = cent,                  northwest = nw) #> [1] FALSE rc_plot + rc_center + rc_nw r1 == ob_rectangle(center = cent,                  southeast = se) #> [1] FALSE rc_plot + rc_center + rc_se r1 == ob_rectangle(center = cent,                  southwest = sw) #> [1] FALSE rc_plot + rc_center + rc_sw r1 == ob_rectangle(   northeast = ne,    southwest = sw) #> [1] FALSE rc_plot + rc_sw + rc_ne r1 == ob_rectangle(   northeast = ne,    southwest = sw) #> [1] FALSE rc_plot + rc_se + rc_nw r1 == ob_rectangle(width = w,                 northwest = nw,                 southwest = sw) #> [1] FALSE rc_plot + rc_width + rc_nw + rc_sw r1 == ob_rectangle(width = w,                 northwest = ne,                 southwest = se) #> [1] FALSE rc_plot + rc_width + rc_ne + rc_se r1 == ob_rectangle(height = h,                 northwest = nw,                 northeast = ne) #> [1] FALSE rc_plot + rc_height + rc_ne + rc_nw r1 == ob_rectangle(height = h,                 southwest = sw,                 southeast = se) #> [1] FALSE rc_plot + rc_sw + rc_se + rc_height"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"give-width-height-and-any-point","dir":"Articles","previous_headings":"","what":"Give width, height, and any point","title":"Rectangles","text":"easy way specify rectangle specify width height points. following rectangles equivalent. Figure 1: Center, Width, Height Figure 2: Specify rectangle height, width, northeast corner Figure 3: Specify rectangle height, width, northwest corner Figure 4: Specify rectangle height, width, southwest corner Figure 5: Specify rectangle height, width, southeast corner","code":"r1 <- ob_rectangle(   width = w,   height = h,   center = cent,   color = my_colors$primary,   fill = my_colors$primary@transparentize(.15),   linewidth = 1 ) r1 #> <ob_rectangle> #> @ center: <ob_point> #>  @ x: num 2 #>  @ y: num 1 #> @ width : num 4 #> @ height: num 2 #> Other props: label, radius, alpha, color, fill, linewidth, #>              linetype, angle, area, bounding_box, perimeter, #>              northeast, northwest, southwest, southeast, east, #>              north, west, south, side, length, style, tibble, geom, #>              normal_at, point_at, aesthetics double_arrowstyle <- ob_style(   arrow_head = arrow_head_deltoid(),   arrow_fins = arrow_head_deltoid(),   color = my_colors$secondar )  s_east <- r1@side@east@nudge(x = .1) s_east@style <- double_arrowstyle  s_north <- r1@side@north@nudge(y = .1) s_north@style <- double_arrowstyle  rc_plot <- ggplot() +   coord_equal(ylim = c(0, 2.2)) +   scale_y_continuous(breaks = -10:10) +   r1  rc_center <- c(   as.geom(r1@center),   as.geom(r1@center@label(     fill = my_colors$primary@lighten(.15),      vjust = -.15)))  rc_width <- as.geom(s_north |> set_props(label = ob_label(     label = paste0(\"Width = \", r1@width),     p = midpoint(s_north),     color = my_colors$secondary,     vjust = 0,     label.margin = ggplot2::margin(2, 2, 2, 2, \"pt\")   )))  rc_height <- as.geom(s_east |>                         set_props(label = ob_label(     label = paste0(\"Height = \", r1@height),     p  = midpoint(s_east),     vjust = 0,     color = my_colors$secondary,     angle = -90)))   rc_nw <- r1@northwest@label(   plot_point = T,   vjust = 1.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_ne <- r1@northeast@label(   plot_point = T,   vjust = 1.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_sw <- r1@southwest@label(   plot_point = T,   vjust = -.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_se <- r1@southeast@label(   plot_point = T,   vjust = -.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_plot + rc_center + rc_width + rc_height r1 == ob_rectangle(width = w,                 height = h,                 northeast = ne) #> [1] FALSE rc_plot + rc_width + rc_height + rc_ne r1 == ob_rectangle(width = w,                 height = h,                 northwest = nw) #> [1] FALSE rc_plot + rc_width + rc_height + rc_nw r1 == ob_rectangle(width = w,                 height = h,                 southwest = sw) #> [1] FALSE rc_plot + rc_width + rc_height + rc_sw r1 == ob_rectangle(width = w,                 height = h,                 southeast = se) #> [1] FALSE rc_plot + rc_width + rc_height + rc_se"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"center-width-and-height","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Center, width, and height","title":"Rectangles","text":"Figure 1: Center, Width, Height","code":"r1 <- ob_rectangle(   width = w,   height = h,   center = cent,   color = my_colors$primary,   fill = my_colors$primary@transparentize(.15),   linewidth = 1 ) r1 #> <ob_rectangle> #> @ center: <ob_point> #>  @ x: num 2 #>  @ y: num 1 #> @ width : num 4 #> @ height: num 2 #> Other props: label, radius, alpha, color, fill, linewidth, #>              linetype, angle, area, bounding_box, perimeter, #>              northeast, northwest, southwest, southeast, east, #>              north, west, south, side, length, style, tibble, geom, #>              normal_at, point_at, aesthetics double_arrowstyle <- ob_style(   arrow_head = arrow_head_deltoid(),   arrow_fins = arrow_head_deltoid(),   color = my_colors$secondar )  s_east <- r1@side@east@nudge(x = .1) s_east@style <- double_arrowstyle  s_north <- r1@side@north@nudge(y = .1) s_north@style <- double_arrowstyle  rc_plot <- ggplot() +   coord_equal(ylim = c(0, 2.2)) +   scale_y_continuous(breaks = -10:10) +   r1  rc_center <- c(   as.geom(r1@center),   as.geom(r1@center@label(     fill = my_colors$primary@lighten(.15),      vjust = -.15)))  rc_width <- as.geom(s_north |> set_props(label = ob_label(     label = paste0(\"Width = \", r1@width),     p = midpoint(s_north),     color = my_colors$secondary,     vjust = 0,     label.margin = ggplot2::margin(2, 2, 2, 2, \"pt\")   )))  rc_height <- as.geom(s_east |>                         set_props(label = ob_label(     label = paste0(\"Height = \", r1@height),     p  = midpoint(s_east),     vjust = 0,     color = my_colors$secondary,     angle = -90)))   rc_nw <- r1@northwest@label(   plot_point = T,   vjust = 1.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_ne <- r1@northeast@label(   plot_point = T,   vjust = 1.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_sw <- r1@southwest@label(   plot_point = T,   vjust = -.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_se <- r1@southeast@label(   plot_point = T,   vjust = -.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_plot + rc_center + rc_width + rc_height"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"northeast-corner-width-and-height","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Northeast corner, width, and height","title":"Rectangles","text":"Figure 2: Specify rectangle height, width, northeast corner","code":"r1 == ob_rectangle(width = w,                 height = h,                 northeast = ne) #> [1] FALSE rc_plot + rc_width + rc_height + rc_ne"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"northwest-corner-width-and-height","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Northwest corner, width, and height","title":"Rectangles","text":"Figure 3: Specify rectangle height, width, northwest corner","code":"r1 == ob_rectangle(width = w,                 height = h,                 northwest = nw) #> [1] FALSE rc_plot + rc_width + rc_height + rc_nw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"southwest-corner-width-and-height","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Southwest corner, width, and height","title":"Rectangles","text":"Figure 4: Specify rectangle height, width, southwest corner","code":"r1 == ob_rectangle(width = w,                 height = h,                 southwest = sw) #> [1] FALSE rc_plot + rc_width + rc_height + rc_sw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"southeast-corner-width-and-height","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Southeast corner, width, and height","title":"Rectangles","text":"Figure 5: Specify rectangle height, width, southeast corner","code":"r1 == ob_rectangle(width = w,                 height = h,                 southeast = se) #> [1] FALSE rc_plot + rc_width + rc_height + rc_se"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"give-the-center-and-any-of-the-4-corners","dir":"Articles","previous_headings":"","what":"Give the center and any of the 4 corners","title":"Rectangles","text":"rectangle can specified center corner. following rectangles equivalent. Figure 6: Specify rectangle center northeast corner Figure 7: Specify rectangle center northwest corner Figure 8: Specify rectangle center southeast corner Figure 9: Specify rectangle center southwest corner","code":"r1 == ob_rectangle(center = cent,                  northeast = ne) #> [1] FALSE rc_plot + rc_center + rc_ne r1 == ob_rectangle(center = cent,                  northwest = nw) #> [1] FALSE rc_plot + rc_center + rc_nw r1 == ob_rectangle(center = cent,                  southeast = se) #> [1] FALSE rc_plot + rc_center + rc_se r1 == ob_rectangle(center = cent,                  southwest = sw) #> [1] FALSE rc_plot + rc_center + rc_sw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"northeast-corner-and-center","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Northeast corner and center","title":"Rectangles","text":"Figure 6: Specify rectangle center northeast corner","code":"r1 == ob_rectangle(center = cent,                  northeast = ne) #> [1] FALSE rc_plot + rc_center + rc_ne"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"northwest-corner-and-center","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Northwest corner and center","title":"Rectangles","text":"Figure 7: Specify rectangle center northwest corner","code":"r1 == ob_rectangle(center = cent,                  northwest = nw) #> [1] FALSE rc_plot + rc_center + rc_nw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"southeast-corner-and-center","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Southeast corner and center","title":"Rectangles","text":"Figure 8: Specify rectangle center southeast corner","code":"r1 == ob_rectangle(center = cent,                  southeast = se) #> [1] FALSE rc_plot + rc_center + rc_se"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"southeast-corner-and-center-1","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Southeast corner and center","title":"Rectangles","text":"Figure 9: Specify rectangle center southwest corner","code":"r1 == ob_rectangle(center = cent,                  southwest = sw) #> [1] FALSE rc_plot + rc_center + rc_sw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"give-opposite-corners","dir":"Articles","previous_headings":"","what":"Give opposite corners","title":"Rectangles","text":"rectangle can specified points opposite corners. rectangles equivalent. Figure 10: Specify rectangle northeast southwest corners Figure 11: Specify rectangle northwest southeast corners","code":"r1 == ob_rectangle(   northeast = ne,    southwest = sw) #> [1] FALSE rc_plot + rc_sw + rc_ne r1 == ob_rectangle(   northeast = ne,    southwest = sw) #> [1] FALSE rc_plot + rc_se + rc_nw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"northeast-and-southwest-corners","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Northeast and southwest corners","title":"Rectangles","text":"Figure 10: Specify rectangle northeast southwest corners","code":"r1 == ob_rectangle(   northeast = ne,    southwest = sw) #> [1] FALSE rc_plot + rc_sw + rc_ne"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"northwest-and-southeast-corners","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Northwest and southeast corners","title":"Rectangles","text":"Figure 11: Specify rectangle northwest southeast corners","code":"r1 == ob_rectangle(   northeast = ne,    southwest = sw) #> [1] FALSE rc_plot + rc_se + rc_nw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"give-width-and-two-points-on-either-side","dir":"Articles","previous_headings":"","what":"Give width and two points on either side","title":"Rectangles","text":"rectangle can specified width 2 points left right side. rectangles equivalent. Figure 12: Specify rectangle width left corners Figure 13: Specify rectangle width right corners","code":"r1 == ob_rectangle(width = w,                 northwest = nw,                 southwest = sw) #> [1] FALSE rc_plot + rc_width + rc_nw + rc_sw r1 == ob_rectangle(width = w,                 northwest = ne,                 southwest = se) #> [1] FALSE rc_plot + rc_width + rc_ne + rc_se"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"give-height-and-two-points-on-top-or-bottom","dir":"Articles","previous_headings":"","what":"Give height and two points on top or bottom","title":"Rectangles","text":"rectangle can specified height 2 points top bottom side. rectangles equivalent.","code":""},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"height-and-top-corners","dir":"Articles","previous_headings":"","what":"Height and top corners","title":"Rectangles","text":"Figure 14: Specify rectangle height top corners","code":"r1 == ob_rectangle(height = h,                 northwest = nw,                 northeast = ne) #> [1] FALSE rc_plot + rc_height + rc_ne + rc_nw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"height-and-bottom-corners","dir":"Articles","previous_headings":"","what":"Height and bottom corners","title":"Rectangles","text":"Figure 15: Specify rectangle height top corners","code":"r1 == ob_rectangle(height = h,                 southwest = sw,                 southeast = se) #> [1] FALSE rc_plot + rc_sw + rc_se + rc_height"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"rectangle-points","dir":"Articles","previous_headings":"","what":"Rectangle points","title":"Rectangles","text":"corners side midpoints can extracted. north point (.e., midpoint north side): Figure 16: named points rectangle Points angle Figure 17: point rectangle angle θ = 60°","code":"r1@north #> <ob_point> #> @ x: num 2 #> @ y: num 2 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics rc_plot +   purrr::map(     c(       \"east\",       \"north\",       \"west\",       \"south\",       \"northeast\",       \"northwest\",       \"southeast\",       \"southwest\",       \"center\"     ),     \\(x) {       v <- ifelse(grepl(x = x, \"north\"),         1.1,         ifelse(grepl(x = x, \"south|center\"),                 -.1,                 .5))       h <- ifelse(grepl(x = x, \"east\"),                   1.1,                   ifelse(grepl(x = x, \"west\"), -.1, .5))       c(         as.geom(           prop(r1, x)@label(             label = x,             hjust = h,             vjust = v,             fill = my_colors$primary@lighten(.15)           )         ),         as.geom(           prop(r1, x)@label(hjust = 1 - h, vjust = 1 - v),           fill = ifelse(x == \"center\",                          my_colors$primary@lighten(.15),                          \"white\")         ),         as.geom(prop(r1, x))       )     }   ) +   coord_equal(xlim = c(-.25, 4.25), ylim = c(-.25, 2.25)) theta <- degree(60) r1@point_at(theta) #> <ob_point> #> @ x: num 2.58 #> @ y: num 2 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics r1_theta <- r1@point_at(theta)  rc_plot +   ob_segment(r1@center, r1_theta) +   r1_theta@label(     polar_just = ob_polar(theta, 1.5),      plot_point = T) +   ob_arc(center = r1@center,       radius = .5,       end = theta,       label = ob_label(theta,                      fill = my_colors$primary@lighten(.15),                      color = my_colors$primary@color))"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"rectangle-sides","dir":"Articles","previous_headings":"","what":"Rectangle sides","title":"Rectangles","text":"side rectangle can extracted. example, north side segment: Figure 18: north side rectangle","code":"r1@side@north #> <ob_segment> #> @ p1: <ob_point> #>  @ x: num 0 #>  @ y: num 2 #> @ p2: <ob_point> #>  @ x: num 4 #>  @ y: num 2 rc_plot +    r1@side@north |>     set_props(color = my_colors$secondary@color, linewidth = 2) +   r1@north@label(label = \"North Side\",                  vjust = -.1,                   size = 20,                  color = my_colors$secondary)"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"rounded-corners","dir":"Articles","previous_headings":"","what":"Rounded corners","title":"Rectangles","text":"@radius property controls radius rounded corners. must length 1. can given ggplot2::unit numeric value. numeric, understood proportion plot area width. Rounding affect location corners. Figure 19: Specify rectangle height top corners","code":"ggplot() +   coord_equal(xlim = c(-4, 4),                ylim = c(-4, 4)) +   ob_rectangle(     ob_point(0, 0),     width = 6,     height = 4,     radius = unit(5, \"mm\")   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"rotation-angle","dir":"Articles","previous_headings":"","what":"Rotation angle","title":"Rectangles","text":"possible rotate rectangle. Figure 20: rectangle rotated 30° Many angles can specified : Figure 21: Many rotated rectangles","code":"ggplot() +   coord_equal(xlim = c(-4, 4),                ylim = c(-4, 4)) +   ob_rectangle(     center = ob_point(0, 0),     width = 6,     height = 2,     angle = 30   ) # Angles th <- degree(seq(0, 355, 5)) # Radius of middle space r_middle <- sqrt(2) # Rectangle width w <- 4 - r_middle  ggplot() +   coord_equal(xlim = c(-4, 4),                ylim = c(-4, 4)) +   ob_rectangle(     center = ob_polar(theta = th,                     r = w / 2 + r_middle),     width = w,     height = .15,     angle = th,     color = NA,     fill = hcl(th@degree)   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Segments","text":"ease plotting, define base plot:","code":"library(ggdiagram) library(ggplot2) library(ggtext) my_font <- \"Roboto Condensed\" update_geom_defaults(\"richtext\",                       list(family = my_font,                            size = 0.8 * 20 / ggplot2::.pt)) update_geom_defaults(\"line\", list(linewidth = .75)) update_geom_defaults(\"segment\", list(linewidth = .75)) update_geom_defaults(\"point\", list(size = 2))    bp <- ggplot() +   theme_minimal(base_size = 20, base_family = my_font) +   theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +   coord_equal(xlim = c(-4, 4), ylim = c(-4, 4)) +   scale_x_continuous(labels = WJSmisc::signs_centered, breaks = seq(-4,4)) +   scale_y_continuous(labels = signs::signs, breaks = seq(-4,4)) +   theme_minimal(base_size = 16) +   theme(     axis.title.x =  element_text(face = \"italic\"),     axis.title.y = element_text(       face = \"italic\",       angle = 0,       hjust = .5,       vjust = .5     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"specifying-a-segment","dir":"Articles","previous_headings":"","what":"Specifying a segment","title":"Segments","text":"segment portion line two points. Figure 1: Plotting segment endpoints","code":"p1 <- ob_point(-3,-1) p2 <- ob_point(3,3) s1 <- ob_segment(p1, p2) bp + s1 + p1 + p2"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"styling-a-segment","dir":"Articles","previous_headings":"","what":"Styling a segment","title":"Segments","text":"primary options styling segment alpha, color, linetype, linewidth. However, can take style ggarrow::geom_arrow_segment sure properties can set, see @aesthetics@style slot. Styles can specified segment created.  Styles can modified segment created:  .geom function passes style arguments ggarrow::geom_arrow_segment function without modifying segment’s style property: Figure 2: Make s1 appear red temporarily using .geom function alternative, geom property function calls .geom. Figure 3: Make s1 appear red temporarily via geom property verify s1 changed color: Figure 4: `s1 object changed “pipe-friendly” way modify ggdiagram object use S7’s set_props function, re-exported ggdiagram sake convenience. Like .geom, function modify s1, unlike .geom, set_props can used save new object specified modifications assigning new variable. , .geom creates ggplot2 geom, whereas set_props create modified ggdiagram object (S7 class).","code":"s1@aesthetics@style #>  [1] \"alpha\"            \"arrow_head\"       \"arrow_fins\"       \"arrowhead_length\" #>  [5] \"color\"            \"length_head\"      \"length_fins\"      \"lineend\"          #>  [9] \"linejoin\"         \"linewidth\"        \"linewidth_fins\"   \"linewidth_head\"   #> [13] \"linetype\"         \"resect\"           \"resect_fins\"      \"resect_head\"      #> [17] \"stroke_color\"     \"stroke_width\" s2 <- ob_segment(p1,p2, color = \"green4\") bp + s2 s2@linewidth <- 3 bp + s2 bp +   as.geom(s1, color = \"red4\") bp + s1@geom(color = \"blue3\") bp + s1 bp +   s1 |>     set_props(color = \"red\")"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"features-of-a-segment","dir":"Articles","previous_headings":"","what":"Features of a segment","title":"Segments","text":"Alternately: line passes segment contains information segment, slope, intercept, angle. access line passes points: Figure 5: Line passing segment default, midpoint function’s position argument .5, finds point halfway point segment: Figure 6: Midpoint segment find midpoint 25% distance endpoints segment: Figure 7: Midpoint Multiple midpoints can specified: Figure 8: Selecting multiple midpoints quick way get endpoints segment specify “midpoints” positions 0 1: Figure 9: Selecting segment’s endpoints via midpoint property.","code":"s1@distance #> [1] 7.211103 distance(s1) #> [1] 7.211103 s1@line #> <ob_line> #> @ slope     : num 0.667 #> @ intercept : num 1 #> @ xintercept: num -1.5 s1@line@slope #> [1] 0.6666667 s1@line@intercept #> [1] 1 s1@line@angle #> 34° bp +   s1@line |> set_props(color = \"royalblue4\") +   s1@midpoint(position = c(0,1))@label(     polar_just = ob_polar(s1@line@angle + degree(90), 1.5),      plot_point = TRUE) +   ob_label(c(equation(s1@line),            paste0(\"Distance = \", round(s1@distance, 2))),          p = midpoint(s1),          vjust = c(-.2, 1.1),          angle = s1@line@angle) s1@midpoint() #> <ob_point> #> @ x: num 0 #> @ y: num 1 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics bp +   s1 +   s1@midpoint()@label(\"Midpoint\", hjust = 0, vjust = 1) +   s1@midpoint(c(0, .5, 1))@label(plot_point = TRUE,                              hjust = 1,                              vjust = 0) s1@midpoint(position = .25) #> <ob_point> #> @ x: num -1.5 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics bp +   s1 +   {p25 <- s1@midpoint(.25)} +   p25@label(     label = c(       p25@auto_label,       \"Midpoint a quarter the<br>way between endpoints\"     ),     vjust = c(0, 1),     hjust = c(1, 0)   ) +   s1@midpoint(c(0, 1))@label(plot_point = TRUE,                              hjust = 1,                              vjust = 0) bp +    s1 +      s1@midpoint(seq(0,1,.2)) bp +    s1 +    s1@midpoint(c(0,1))"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"distance-between-points","dir":"Articles","previous_headings":"","what":"Distance between points","title":"Segments","text":"Alternately:","code":"s1@distance #> [1] 7.211103 distance(s1) #> [1] 7.211103"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"line-passing-through-the-segment","dir":"Articles","previous_headings":"","what":"Line passing through the segment","title":"Segments","text":"line passes segment contains information segment, slope, intercept, angle. access line passes points: Figure 5: Line passing segment","code":"s1@line #> <ob_line> #> @ slope     : num 0.667 #> @ intercept : num 1 #> @ xintercept: num -1.5 s1@line@slope #> [1] 0.6666667 s1@line@intercept #> [1] 1 s1@line@angle #> 34° bp +   s1@line |> set_props(color = \"royalblue4\") +   s1@midpoint(position = c(0,1))@label(     polar_just = ob_polar(s1@line@angle + degree(90), 1.5),      plot_point = TRUE) +   ob_label(c(equation(s1@line),            paste0(\"Distance = \", round(s1@distance, 2))),          p = midpoint(s1),          vjust = c(-.2, 1.1),          angle = s1@line@angle)"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"midpoints","dir":"Articles","previous_headings":"","what":"Midpoints","title":"Segments","text":"default, midpoint function’s position argument .5, finds point halfway point segment: Figure 6: Midpoint segment find midpoint 25% distance endpoints segment: Figure 7: Midpoint Multiple midpoints can specified: Figure 8: Selecting multiple midpoints quick way get endpoints segment specify “midpoints” positions 0 1: Figure 9: Selecting segment’s endpoints via midpoint property.","code":"s1@midpoint() #> <ob_point> #> @ x: num 0 #> @ y: num 1 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics bp +   s1 +   s1@midpoint()@label(\"Midpoint\", hjust = 0, vjust = 1) +   s1@midpoint(c(0, .5, 1))@label(plot_point = TRUE,                              hjust = 1,                              vjust = 0) s1@midpoint(position = .25) #> <ob_point> #> @ x: num -1.5 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics bp +   s1 +   {p25 <- s1@midpoint(.25)} +   p25@label(     label = c(       p25@auto_label,       \"Midpoint a quarter the<br>way between endpoints\"     ),     vjust = c(0, 1),     hjust = c(1, 0)   ) +   s1@midpoint(c(0, 1))@label(plot_point = TRUE,                              hjust = 1,                              vjust = 0) bp +    s1 +      s1@midpoint(seq(0,1,.2)) bp +    s1 +    s1@midpoint(c(0,1))"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"segment-chains","dir":"Articles","previous_headings":"","what":"Segment chains","title":"Segments","text":"point object multiple points placed p1 slot p2 slot left empty, series segments chained together created. Figure 10: Chained segments","code":"bp +    ob_segment(ob_point(c(-4, -2, -1, 2,  4),                  c(-2,  1, -2, 3, -3)))"},{"path":"https://wjschne.github.io/ggdiagram/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"W. Joel Schneider. Author, maintainer.","code":""},{"path":"https://wjschne.github.io/ggdiagram/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schneider W (2024). ggdiagram: Object-oriented diagram plots ggplot2. R package version 0.0.0.9000, https://wjschne.github.io/ggdiagram/, https://github.com/wjschne/ggdiagram.","code":"@Manual{,   title = {ggdiagram: Object-oriented diagram plots with ggplot2},   author = {W. Joel Schneider},   year = {2024},   note = {R package version 0.0.0.9000,     https://wjschne.github.io/ggdiagram/},   url = {https://github.com/wjschne/ggdiagram}, }"},{"path":"https://wjschne.github.io/ggdiagram/index.html","id":"ggdiagram-","dir":"","previous_headings":"","what":"Object-oriented diagram plots with ggplot2","title":"Object-oriented diagram plots with ggplot2","text":"ggdiagram package takes object-oriented approach making diagrams (using S7) plots results using ggplot2. package preliminary state. structural beams bit plumbing yet capable fulfilling eventual purpose. motivation making ggdiagram find way approach functionality TikZ flexibility convenience R. ggdiagram package built atop S7 integrated ggplot2, making heavy use ggtext, ggforce, ggarrow. ggdiagram package replacement standard ggplot2 functions. underlying grammar ggplot2 well designed visualizing data. ggdiagram functions designed creating small number visual objects interrelate. anything, can thought extensions ggplot2::annotate.","code":""},{"path":"https://wjschne.github.io/ggdiagram/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Object-oriented diagram plots with ggplot2","text":"can install development version ggpathdiagramr like :","code":"remotes::install_github(\"wjschne/ggdiagram\")"},{"path":[]},{"path":"https://wjschne.github.io/ggdiagram/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://wjschne.github.io/ggdiagram/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":null,"dir":"Reference","previous_headings":"","what":"as.geom function — as.geom","title":"as.geom function — as.geom","text":"Converts ggdiagram shape ggplot2 geom","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.geom function — as.geom","text":"","code":"as.geom(x, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.geom function — as.geom","text":"x shape ... <dynamic-dots> Pass arguments ggplot2::geom_point","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"as.geom function — as.geom","text":"Usually .geom function necessary call explicitly called whenever ggdiagram shape added ggplot. However, complex situations (e.g., making function assembles many objects), sometimes necessary make call explicitly.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"as.geom function — as.geom","text":"","code":"library(ggplot2) c1 <- ob_circle(radius = 3) ggplot() +   as.geom(c1, fill = \"black\") +   coord_equal()"},{"path":"https://wjschne.github.io/ggdiagram/reference/bind.html","id":null,"dir":"Reference","previous_headings":"","what":"bind method — bind","title":"bind method — bind","text":"bind method","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bind method — bind","text":"","code":"bind(x, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bind method — bind","text":"x list objects bind ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/bind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bind method — bind","text":"","code":"bind(c(ob_point(1,2), ob_point(3,4))) #> <ob_point> #> @ x: num [1:2] 1 3 #> @ y: num [1:2] 2 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics bind(c(ob_circle(ob_point(0,0), radius = 1),        ob_circle(ob_point(1,1), radius = 2))) #> <ob_circle> #> @ center: <ob_point> #>  @ x: num [1:2] 0 1 #>  @ y: num [1:2] 0 1 #> @ radius: num [1:2] 1 2 #> Other props: label, alpha, color, fill, linewidth, linetype, n, #>              area, bounding_box, circumference, diameter, length, #>              style, tibble, geom, angle_at, normal_at, tangent_at, #>              point_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/circle_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"circle_pie — circle_pie","title":"circle_pie — circle_pie","text":"pie wedges","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/circle_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"circle_pie — circle_pie","text":"","code":"circle_pie(   center = ob_point(0, 0),   radius = 1,   proportion_list = list(c(0.5, 0.5)),   start = degree(0) )"},{"path":"https://wjschne.github.io/ggdiagram/reference/circle_pie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"circle_pie — circle_pie","text":"center center point pie radius length circle radius proportion_list list proportions start angle pie wedges start color_list color wedge borders fill_list color wedge fills","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_aesthetics_list.html","id":null,"dir":"Reference","previous_headings":"","what":"class_aesthetics_list — class_aesthetics_list","title":"class_aesthetics_list — class_aesthetics_list","text":"list aesthetics","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_aesthetics_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"class_aesthetics_list — class_aesthetics_list","text":"","code":"class_aesthetics_list(   geom = class_missing,   style = class_missing,   mappable_bare = class_missing,   mappable_identity = class_missing,   not_mappable = class_missing,   required_aes = class_missing,   omit_names = class_missing,   inherit.aes = class_missing )"},{"path":"https://wjschne.github.io/ggdiagram/reference/class_aesthetics_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"class_aesthetics_list — class_aesthetics_list","text":"geom geom function converts shape style vector style names mappable_bare aesthetics used without identity function mappable_identity aesthetics used identity function not_mappable properties mapped thus created separate geom objects unique combination values required_aes required aesthetics omit_names properties ignored inherit.aes Defaults FALSE ggdiagram objects interfere layers ggplot","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":null,"dir":"Reference","previous_headings":"","what":"color class — class_color","title":"color class — class_color","text":"color class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"color class — class_color","text":"","code":"class_color(color = class_missing)"},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"color class — class_color","text":"color character (R color hex code) saturation get set luminance color luminance get set luminance color","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"color class — class_color","text":"transparentize function return color new transparency (.e., alpha) lighten function return lighter color darken function return darker color","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"color class — class_color","text":"","code":"mycolor <- class_color(\"blue\") mycolor #> <class_color> #> @ color: chr \"#0000FFFF\" #> Other props: transparentize, lighten, darken, saturation, hue, #>              brightness c(mycolor) #> [1] \"#0000FFFF\" mycolor@transparentize(.5) #> <class_color> #> @ color: chr \"#0000FF80\" #> Other props: transparentize, lighten, darken, saturation, hue, #>              brightness mycolor@lighten(.5) #> <class_color> #> @ color: chr \"#8282FFFF\" #> Other props: transparentize, lighten, darken, saturation, hue, #>              brightness mycolor@darken(.5) #> <class_color> #> @ color: chr \"#000082FF\" #> Other props: transparentize, lighten, darken, saturation, hue, #>              brightness"},{"path":"https://wjschne.github.io/ggdiagram/reference/connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrow connect one shape to another — connect","title":"Arrow connect one shape to another — connect","text":"Arrow connect one shape another","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrow connect one shape to another — connect","text":"","code":"connect(x, y, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrow connect one shape to another — connect","text":"x first shape object y second shape object ... <dynamic-dots> Arguments passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/covariance.html","id":null,"dir":"Reference","previous_headings":"","what":"create double-headed arrow paths indicating variance — covariance","title":"create double-headed arrow paths indicating variance — covariance","text":"create double-headed arrow paths indicating variance","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/covariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create double-headed arrow paths indicating variance — covariance","text":"","code":"covariance(   x,   y,   where = NULL,   bend = 0,   looseness = 1,   arrow_head = arrowheadr::arrow_head_deltoid(),   resect = 2,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/covariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create double-headed arrow paths indicating variance — covariance","text":"x object y object exit angle bend Angle control points rotated looseness distance control points ratio distance object's center (e.g., circle radius 1, looseness = 1.5 means control points 1.5 units start end points.) ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance between 2 points — distance","title":"Calculate distance between 2 points — distance","text":"Calculate distance 2 points","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance between 2 points — distance","text":"","code":"distance(x, y, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance between 2 points — distance","text":"x point, line, segment, circle object y point, line, circle object ... <dynamic-dots> used","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance between 2 points — distance","text":"numeric","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distance between 2 points — distance","text":"","code":"# Distance between two objects p1 <- ob_point(0, 0) p2 <- ob_point(3, 4) distance(p1, p2) #> [1] 5  # Distance between the endpoints of a segment s1 <- ob_segment(p1, p2) distance(s1) #> [1] 5  # Distance between a point and a line l1 <- ob_line(slope = 0, intercept = 1) distance(p1, l1) #> [1] 1  # Shortest distance between the edges of 2 circles c1 <- ob_circle(p1, radius = 1) c2 <- ob_circle(p2, radius = 2) distance(c1, c2) #> [1] 2"},{"path":"https://wjschne.github.io/ggdiagram/reference/equation.html","id":null,"dir":"Reference","previous_headings":"","what":"equation — equation","title":"equation — equation","text":"Get equation object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/equation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"equation — equation","text":"","code":"equation(x, type = c(\"y\", \"general\", \"parametric\"), digits = 2)"},{"path":"https://wjschne.github.io/ggdiagram/reference/equation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"equation — equation","text":"x object type equation type. Can y, general, parametric digits rounding digits","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/get_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Get object data with styles in a tibble — get_tibble","title":"Get object data with styles in a tibble — get_tibble","text":"Get object data styles tibble Get object data tibble, filling missing styles defaults","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/get_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get object data with styles in a tibble — get_tibble","text":"","code":"get_tibble(x)  get_tibble_defaults(x)"},{"path":"https://wjschne.github.io/ggdiagram/reference/get_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get object data with styles in a tibble — get_tibble","text":"x object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ggdiagram-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggdiagram: Object-oriented diagram plots with ggplot2 — ggdiagram-package","title":"ggdiagram: Object-oriented diagram plots with ggplot2 — ggdiagram-package","text":"ggdiagram package creates path diagrams object-oriented approach plots diagrams ggplot2.","code":""},{"path":[]},{"path":"https://wjschne.github.io/ggdiagram/reference/ggdiagram-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggdiagram: Object-oriented diagram plots with ggplot2 — ggdiagram-package","text":"Maintainer: W. Joel Schneider w.joel.schneider@gmail.com (ORCID)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/inside.html","id":null,"dir":"Reference","previous_headings":"","what":"is an ob_point inside a shape ? — inside","title":"is an ob_point inside a shape ? — inside","text":"ob_point inside shape ?","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/inside.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is an ob_point inside a shape ? — inside","text":"","code":"inside(x, y)"},{"path":"https://wjschne.github.io/ggdiagram/reference/inside.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is an ob_point inside a shape ? — inside","text":"x object y object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection.html","id":null,"dir":"Reference","previous_headings":"","what":"intersection of 2 objects (e.g., lines) — intersection","title":"intersection of 2 objects (e.g., lines) — intersection","text":"intersection 2 objects (e.g., lines)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"intersection of 2 objects (e.g., lines) — intersection","text":"","code":"intersection(x, y, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"intersection of 2 objects (e.g., lines) — intersection","text":"x object y object ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the angle of the intersection of two objects — intersection_angle","title":"Compute the angle of the intersection of two objects — intersection_angle","text":"Compute angle intersection two objects","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the angle of the intersection of two objects — intersection_angle","text":"","code":"intersection_angle(x, y)"},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the angle of the intersection of two objects — intersection_angle","text":"x object (point, segment, line) y object (point, segment, line)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/label_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic label for objects — label_object","title":"Automatic label for objects — label_object","text":"Automatic label objects","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/label_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic label for objects — label_object","text":"","code":"label_object(object, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/label_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic label for objects — label_object","text":"object object ... additional arguments","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/midpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Get one or more points at positions from 0 to 1 — midpoint","title":"Get one or more points at positions from 0 to 1 — midpoint","text":"possible get one midpoint specifying position vector length greater 1. Position values outside 0 1 usually work, outside object.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/midpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get one or more points at positions from 0 to 1 — midpoint","text":"","code":"midpoint(x, y, position = 0.5, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/midpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get one or more points at positions from 0 to 1 — midpoint","text":"x object y object (can omitted segments arcs) position numeric vector. 0 start, 1 end. Defaults .5 ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/nudge.html","id":null,"dir":"Reference","previous_headings":"","what":"Move an object — nudge","title":"Move an object — nudge","text":"Move object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/nudge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move an object — nudge","text":"","code":"nudge(object, x, y, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/nudge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move an object — nudge","text":"object object x nudge right left y nudge ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/nudge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move an object — nudge","text":"","code":"ob_circle() |> nudge(x = 2) #> <ob_circle> #> @ center: <ob_point> #>  @ x: num 2 #>  @ y: num 0 #> @ radius: num 1 #> Other props: label, alpha, color, fill, linewidth, linetype, n, #>              area, bounding_box, circumference, diameter, length, #>              style, tibble, geom, angle_at, normal_at, tangent_at, #>              point_at, aesthetics # Alternative to nudge: ob_circle() + ob_point(2, 0) #> <ob_circle> #> @ center: <ob_point> #>  @ x: num 2 #>  @ y: num 0 #> @ radius: num 1 #> Other props: label, alpha, color, fill, linewidth, linetype, n, #>              area, bounding_box, circumference, diameter, length, #>              style, tibble, geom, angle_at, normal_at, tangent_at, #>              point_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_angle — ob_angle","title":"ob_angle — ob_angle","text":"Creates angle metric radians, degrees, turns.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_angle — ob_angle","text":"","code":"ob_angle(.data = class_missing)  degree(degree = class_missing)  radian(radian = class_missing)  turn(turn = class_missing)"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_angle — ob_angle","text":".data real number indicating number turns. degree degrees radian radians turn proportion full turns circle (1 turn = 2 * pi radians)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ob_angle — ob_angle","text":"Angles turns can real number, degrees displayed values -360 +360, radians -2pi +2pi.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ob_angle — ob_angle","text":"","code":"# Three Different ways to make a right angle ## 90 degrees degree(90) #> 90°   ## half pi radians radian(.5 * pi) #> 0.5π   ## A quarter turn turn(.25) #> .25   # Operations degree(30) + degree(20) #> 50°  degree(350) + degree(20) #> 10°  degree(30) - degree(30) #> 0°  degree(30) - degree(50) #> −20°   degree(30) * 2 #> 60°  degree(30) / 3 #> 10°   radian(1) + 1 # added or subtracted numbers are radians #> 0.64π  degree(10) + 10 # added or subtracted numbers are degrees #> 20°  turn(.25) + .25 # added or subtracted numbers are turns #> .50   # Trigonometric functions work as normal sin(degree(30)) #> [1] 0.5 cos(degree(30)) #> [1] 0.8660254 tan(degree(30)) #> [1] 0.5773503"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_arc class — ob_arc","title":"ob_arc class — ob_arc","text":"ob_arc class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_arc class — ob_arc","text":"","code":"ob_arc(   center = ob_point(0, 0),   radius = 1,   start = 0,   end = 0,   label = class_missing,   start_point = class_missing,   end_point = class_missing,   n = 360,   wedge = FALSE,   alpha = class_missing,   arrow_head = class_missing,   arrow_fins = class_missing,   arrowhead_length = class_missing,   length_head = class_missing,   length_fins = class_missing,   color = class_missing,   fill = class_missing,   lineend = class_missing,   linejoin = class_missing,   linewidth = 0.25,   linewidth_fins = class_missing,   linewidth_head = class_missing,   linetype = class_missing,   resect = class_missing,   resect_fins = class_missing,   resect_head = class_missing,   stroke_color = class_missing,   stroke_width = class_missing,   style = class_missing,   x0 = class_missing,   y0 = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_arc class — ob_arc","text":"center point center arc (default = ob_point(0,0)) radius distance center edge arc (default = 1) start start angle (default = 0 degrees) end end angle (default = 0 degrees) label character, angle, label object start_point Specify arc starts. Overrides @center end_point Specify arc ends Overrides @center n number points arc (default = 360) wedge Draw wedge instead arc (default = FALSE) alpha numeric value alpha transparency arrow_head 2-column matrix polygon points arrow_fins 2-column matrix polygon points arrowhead_length Determines size arrow ornaments. parameter becomes length parameter ggarrow functions. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. length_head Determines size arrow head. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_fins Determines size arrow fins. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. color character string color fill character string fill color lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linewidth Width lines linewidth_fins Line width arrow fins linewidth_head Line width arrow fins linetype type lines resect numeric(1) denoting millimeters  shorten arrow head fins. resect_fins numeric(1) denoting millimeters  shorten arrow fins resect_head numeric(1) denoting millimeters  shorten arrow head. stroke_color Color point border line stroke_width Stroke width arrows style style object ... <dynamic-dots> arguments passed style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_arc class — ob_arc","text":"aesthetics list information arc's aesthetic properties angle_at function finds angle specified point relation arc's center geom function converts object geom. additional parameters passed ggarrow::geom_arrow. length number arcs arc object point_at function finds point arc specified angle. tangent_at function finds tangent line specified angle. theta interior angle (end - start) tibble Gets tibble (data.frame) containing parameters styles used ggarrow::geom_arrow.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ob_arc class — ob_arc","text":"","code":"library(ggplot2)  # center point p_center <- ob_point(0,0)  # 90-degree arc a_90 <- ob_arc(  center = p_center,  radius = 6,  start = degree(0),  end = degree(90)  )   # Print arc  a #> Error: object 'a' not found  # Plot arc and its center point ggplot() + coord_equal() + theme_minimal() +  p_center +  a_90"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":null,"dir":"Reference","previous_headings":"","what":"The ob_bezier (i.e., bezier curve) class — ob_bezier","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"ob_bezier specified ob_point object contains least 2 points, start end. \"curve\" actually straight line segment. three points specified, middle point control point, quadratic bezier curve result. Higher-order bezier curves can created control points middle.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"","code":"ob_bezier(   p = class_missing,   label = class_missing,   label_sloped = TRUE,   n = 360,   alpha = class_missing,   arrow_head = class_missing,   arrow_fins = class_missing,   arrowhead_length = class_missing,   length_head = class_missing,   length_fins = class_missing,   color = class_missing,   fill = class_missing,   lineend = class_missing,   linejoin = class_missing,   linewidth = 0.75,   linewidth_fins = class_missing,   linewidth_head = class_missing,   linetype = class_missing,   resect = class_missing,   resect_fins = class_missing,   resect_head = class_missing,   stroke_color = class_missing,   stroke_width = class_missing,   style = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"p ob_point list ob_points label character, angle, label object n Number points polygon, circle, arc, ellipse alpha numeric value alpha transparency arrow_head 2-column matrix polygon points arrow_fins 2-column matrix polygon points arrowhead_length Determines size arrow ornaments. parameter becomes length parameter ggarrow functions. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. length_head Determines size arrow head. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_fins Determines size arrow fins. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. color character string color fill character string fill color lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linewidth Width lines linewidth_fins Line width arrow fins linewidth_head Line width arrow fins linetype type lines resect numeric(1) denoting millimeters  shorten arrow head fins. resect_fins numeric(1) denoting millimeters  shorten arrow fins resect_head numeric(1) denoting millimeters  shorten arrow head. stroke_color Color point border line stroke_width Stroke width arrows style Gets sets styles associated ob_beziers ... <dynamic-dots>  properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"wish specify multiple bezier curves, must supply list ob_point objects. plotted, ob_bezier function uses bezier::bezier function create point coordinates curve ggarrow::geom_arrow function create geom.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"length number curves ob_bezier object tibble Gets tibble (data.frame) containing parameters styles used ggarrow::geom_arrow. geom function converts object geom. additional parameters passed ggarrow::geom_arrow. midpoint function selects 1 midpoints ob_bezier. position argument can 0 1. Additional arguments passed ob_point's style object. aesthetics list information ob_bezier's aesthetic properties","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"","code":"library(ggplot2) control_points <- ob_point(c(0,1,2,4), c(0,4,0,0)) ggplot() + coord_equal() +   ob_bezier(control_points, color = \"blue\") +   ob_path(control_points, linetype = \"dashed\", linewidth = .5) +   control_points"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_circle class — ob_circle","title":"ob_circle class — ob_circle","text":"ob_circle class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_circle class — ob_circle","text":"","code":"ob_circle(   center = ob_point(0, 0),   radius = 1,   label = class_missing,   alpha = class_missing,   color = class_missing,   fill = class_missing,   linewidth = class_missing,   linetype = class_missing,   n = class_missing,   style = class_missing,   x0 = class_missing,   y0 = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_circle class — ob_circle","text":"center point center circle radius distance center edge circle label character, angle, label object alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines n number points circle (default = 360) style ob_style object x0 x-coordinate circle's center. Overrides @center@x y0 y-coordinate circle's center. Overrides `@center@y ... <dynamic-dots> arguments passed style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_circle class — ob_circle","text":"aesthetics list information circle's aesthetic properties angle_at function finds angle specified point relation circle's center geom function converts object geom. additional parameters passed ggforce::geom_circle. length number circles circle object point_at function finds point circle specified angle. tangent_at function finds tangent line specified angle. tibble Gets tibble (data.frame) containing parameters styles used ggforce::geom_cirlce.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ob_circle class — ob_circle","text":"","code":"# specify center point and radius p <- ob_point(0,0) ob_circle(p, radius = 6) #> <ob_circle> #> @ center: <ob_point> #>  @ x: num 0 #>  @ y: num 0 #> @ radius: num 6 #> Other props: label, alpha, color, fill, linewidth, linetype, n, #>              area, bounding_box, circumference, diameter, length, #>              style, tibble, geom, angle_at, normal_at, tangent_at, #>              point_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_ellipse class — ob_ellipse","title":"ob_ellipse class — ob_ellipse","text":"Makes ellipses superellipses","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_ellipse class — ob_ellipse","text":"","code":"ob_ellipse(   center = ob_point(0, 0),   a = 1,   b = a,   angle = 0,   m1 = class_missing,   m2 = class_missing,   label = class_missing,   alpha = class_missing,   color = class_missing,   fill = class_missing,   linewidth = class_missing,   linetype = class_missing,   n = class_missing,   style = class_missing,   x0 = class_missing,   y0 = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_ellipse class — ob_ellipse","text":"center point center ellipse. Settable. distance semi-major axis. Settable. b distance semi-minor axis. Settable. angle ellipse rotation. Settable. m1 exponent semi-major axis. Settable. Controls roundedness superellipse m2 exponent semi-minor axis. Settable. default equal m1. different, functions may work expected (e.g., point_at). label character, angle, label object alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines n number points ellipse (default = 360). Settable. style gets sets style parameters ... <dynamic-dots> arguments passed style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_ellipse class — ob_ellipse","text":"length Gets number ellipses tibble Gets tibble (data.frame) containing parameters styles used ggforce::geom_ellipse. geom function converts object geom. additional parameters passed ggforce::geom_ellipse. normal_at function finds point perpendicular ellipse angle theta specified distance. definitional parameter passed point_at function. point supplied instead angle, point projected onto ellipse normal calculated found projected point. point_at function finds point ellipse angle theta. definitional FALSE (default), theta interpreted angle. TRUE, theta parameter definition ellipse polar coordinates. tangent_at function finds tangent line ellipse. Uses point_at find tangent point angle theta returns tangent line point. point supplied instead angle, point projected onto ellipse tangent line found .","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ob_ellipse class — ob_ellipse","text":"","code":"# specify center point and semi-major axes p <- ob_point(0,0) ob_ellipse(p, a = 2, b = 3) #> <ob_ellipse> #> Error in dplyr::mutate(self@tibble, group = dplyr::row_number(), d = purrr::pmap(list(x0 = x0,     y0 = y0, a = a, b = b, angle = angle, m1 = m1, m2 = m2),     function(x0, y0, a, b, angle, m1, m2) {        th <- degree(seq(0, 359.5, 0.5))        cs <- cos(th)        sn <- sin(th)        x <- a * (abs(cs)^(2/m1)) * sign(cs)        y <- b * (abs(sn)^(2/m2)) * sign(sn)        xy <- rotate2columnmatrix(cbind(x, y), angle)        xr <- xy[, 1] + x0        yr <- xy[, 2] + y0        tibble(xmin = min(xr), xmax = max(xr), ymin = min(yr),             ymax = max(yr))    })): ℹ In argument: `d = purrr::pmap(...)`. #> Caused by error in `purrr::pmap()`: #> ℹ In index: 1. #> Caused by error in `tibble()`: #> ! could not find function \"tibble\""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_label.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_label class — ob_label","title":"ob_label class — ob_label","text":"ob_label class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_label class — ob_label","text":"","code":"ob_label(   label = class_missing,   p = class_missing,   angle = class_missing,   alpha = class_missing,   color = class_missing,   family = class_missing,   fill = class_missing,   fontface = class_missing,   hjust = class_missing,   label.color = class_missing,   label.margin = ggplot2::margin(1, 1, 1, 1, \"pt\"),   label.padding = ggplot2::margin(2, 2, 2, 2, \"pt\"),   label.r = class_missing,   label.size = class_missing,   lineheight = class_missing,   polar_just = class_missing,   nudge_x = class_missing,   nudge_y = class_missing,   size = class_missing,   straight = class_missing,   text.color = class_missing,   vjust = class_missing,   style = class_missing,   plot_point = FALSE,   position = 0.5,   x = class_missing,   y = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_label class — ob_label","text":"label text label p ob_point angle angle text alpha numeric value alpha transparency color character string color family font family fill character string fill color fontface Can plain, bold, italic, bold.italic hjust horizontal justification. label.color Color label outline. label.margin Amount distance around label. Unit vector length four. Usually created ggplot2::margin. label.padding Amount padding around label. Unit vector length four. Usually created ggplot2::margin. label.r Radius rounded corners. Defaults 0.15 lines. label.size Width label outline. lineheight Height line text polar_just angle, polar point, point alters hjust vjust (polar polar_just stored style) nudge_x Horizontal adjustment nudge labels . nudge_y Vertical adjustment nudge labels . size numeric size straight logical. TRUE, make bzpath label text straight instead curved. text.color Color label text. vjust vertical justification style style list plot_point plot ob_point (default = FALSE) position position (used conjunction place function) ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_line.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_line class — ob_line","title":"ob_line class — ob_line","text":"Creates line","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_line class — ob_line","text":"","code":"ob_line(   slope = class_missing,   intercept = class_missing,   xintercept = class_missing,   a = class_missing,   b = class_missing,   c = class_missing,   alpha = class_missing,   color = class_missing,   lineend = class_missing,   linejoin = class_missing,   linewidth = class_missing,   linetype = class_missing,   style = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_line class — ob_line","text":"slope coefficient y = slope * x + intercept intercept value y x 0 xintercept value x y 0 coefficient general form: * x + b * y + c = 0 b coefficient general form: * x + b * y + c = 0 c constant general form: * x + b * y + c = 0 alpha numeric value alpha transparency color character string color lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linewidth Width lines linetype type lines style style list ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":null,"dir":"Reference","previous_headings":"","what":"The ob_path class — ob_path","title":"The ob_path class — ob_path","text":"ob_path specified ob_point object contains least 2 points, start end. number intermediate points possible.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ob_path class — ob_path","text":"","code":"ob_path(   p = class_missing,   label = class_missing,   alpha = class_missing,   arrow_head = class_missing,   arrow_fins = class_missing,   arrowhead_length = class_missing,   length_head = class_missing,   length_fins = class_missing,   color = class_missing,   fill = class_missing,   lineend = class_missing,   linejoin = class_missing,   linewidth = 0.75,   linewidth_fins = class_missing,   linewidth_head = class_missing,   linetype = class_missing,   resect = class_missing,   resect_fins = class_missing,   resect_head = class_missing,   stroke_color = class_missing,   stroke_width = class_missing,   style = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The ob_path class — ob_path","text":"p ob_point list ob_points label character, angle, label object alpha numeric value alpha transparency arrow_head 2-column matrix polygon points arrow_fins 2-column matrix polygon points arrowhead_length Determines size arrow ornaments. parameter becomes length parameter ggarrow functions. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. length_head Determines size arrow head. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_fins Determines size arrow fins. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. color character string color fill character string fill color lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linewidth Width lines linewidth_fins Line width arrow fins linewidth_head Line width arrow fins linetype type lines resect numeric(1) denoting millimeters  shorten arrow head fins. resect_fins numeric(1) denoting millimeters  shorten arrow fins resect_head numeric(1) denoting millimeters  shorten arrow head. stroke_color Color point border line stroke_width Stroke width arrows style Gets sets styles associated paths ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The ob_path class — ob_path","text":"wish specify multiple paths, must supply list ob_point objects. plotted, ob_path function uses ggarrow::geom_arrow function create geom.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The ob_path class — ob_path","text":"length number paths ob_path object tibble Gets tibble (data.frame) containing parameters styles used ggarrow::geom_arrow.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_point.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_point — ob_point","title":"ob_point — ob_point","text":"Points specified x y coordinates. Polar points ordinary points specified angle (theta) radial distance (r)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_point — ob_point","text":"","code":"ob_point(   x = 0,   y = 0,   alpha = class_missing,   color = class_missing,   fill = class_missing,   shape = class_missing,   size = class_missing,   stroke = class_missing,   style = class_missing,   ... )  ob_polar(   theta = class_missing,   r = class_missing,   alpha = class_missing,   color = class_missing,   fill = class_missing,   shape = class_missing,   size = class_missing,   stroke = class_missing,   style = class_missing )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_point — ob_point","text":"x Vector coordinates x-axis (also can take tibble/data.frame 2-column matrix input.) y Vector coordinates y-axis alpha numeric value alpha transparency color character string color fill character string fill color shape Point shape type. Can specified integer (0 25), single character (uses character plotting symbol), . draw smallest rectangle visible (.e., one pixel), NA draw nothing, mapping discrete variable. size numeric size stroke Width point border line style Gets sets styles associated points ... <dynamic-dots> properties passed style theta Angle vector origin ob_point r Radius = Distance origin ob_point","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_point.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_point — ob_point","text":"auto_label Gets x y coordinates makes label \"(x,y)\" length number points ob_point object tibble Gets tibble (data.frame) containing parameters styles used ggplot2::geom_point. xy Gets 2-column matrix x y coordinates ob_point object. geom function converts object geom. additional parameters passed ggplot2::geom_point.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"The ob_polygon (polygon) class — ob_polygon","title":"The ob_polygon (polygon) class — ob_polygon","text":"polygon specified obpoint contains least 3 points, start end. number intermediate points possible.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ob_polygon (polygon) class — ob_polygon","text":"","code":"ob_polygon(   p = class_missing,   label = class_missing,   radius = class_missing,   alpha = class_missing,   color = class_missing,   fill = class_missing,   linewidth = 0.75,   linetype = class_missing,   style = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The ob_polygon (polygon) class — ob_polygon","text":"p ob_point list ob_point objects label character, angle, label object radius numeric unit vector length one,  specifying corner radius alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines style Gets sets styles associated polygons ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The ob_polygon (polygon) class — ob_polygon","text":"wish specify multiple polygons, must supply list ob_points. plotted, ob_polygon function uses ggplot2::geom_polygon function create geom.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The ob_polygon (polygon) class — ob_polygon","text":"length number polygons ob_polygon object tibble Gets tibble (data.frame) containing parameters styles used ggplot2::geom_polygon.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_rectangle.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_rectangle class — ob_rectangle","title":"ob_rectangle class — ob_rectangle","text":"ob_rectangle class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_rectangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_rectangle class — ob_rectangle","text":"","code":"ob_rectangle(   center = class_missing,   width = class_missing,   height = class_missing,   northeast = class_missing,   northwest = class_missing,   southwest = class_missing,   southeast = class_missing,   angle = 0,   radius = class_missing,   label = class_missing,   alpha = class_missing,   color = \"black\",   fill = NA_character_,   linewidth = 0.5,   linetype = class_missing,   style = class_missing,   x = class_missing,   y = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_rectangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_rectangle class — ob_rectangle","text":"center point center circle width width height height northeast upper right point northwest upper left point southwest lower left point southeast lower right point angle angle text label character, angle, label object alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines style style object ... <dynamic-dots> arguments passed style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_rectangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ob_rectangle class — ob_rectangle","text":"","code":"# specify center point and radius p <- ob_point(0,0) ob_rectangle(p, width = 2, height = 2) #> <ob_rectangle> #> @ center: <ob_point> #>  @ x: num 0 #>  @ y: num 0 #> @ width : num 2 #> @ height: num 2 #> Other props: label, radius, alpha, color, fill, linewidth, #>              linetype, angle, area, bounding_box, perimeter, #>              northeast, northwest, southwest, southeast, east, #>              north, west, south, side, length, style, tibble, geom, #>              normal_at, point_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_segment class — ob_segment","title":"ob_segment class — ob_segment","text":"ob_segment class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_segment class — ob_segment","text":"","code":"ob_segment(   p1 = class_missing,   p2 = class_missing,   label = class_missing,   alpha = class_missing,   arrow_head = ggarrow::arrow_head_minimal(90),   arrow_fins = class_missing,   arrowhead_length = 4,   length_head = class_missing,   length_fins = class_missing,   color = class_missing,   lineend = class_missing,   linejoin = class_missing,   linewidth = 0.5,   linewidth_fins = class_missing,   linewidth_head = class_missing,   linetype = class_missing,   resect = class_missing,   resect_fins = class_missing,   resect_head = class_missing,   stroke_color = class_missing,   stroke_width = class_missing,   style = class_missing,   x = class_missing,   xend = class_missing,   y = class_missing,   yend = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_segment class — ob_segment","text":"p1 starting point p2 end point label character, angle, label object alpha numeric value alpha transparency arrow_head 2-column matrix polygon points arrow_fins 2-column matrix polygon points arrowhead_length Determines size arrow ornaments. parameter becomes length parameter ggarrow functions. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. length_head Determines size arrow head. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_fins Determines size arrow fins. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. color character string color lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linewidth Width lines linewidth_fins Line width arrow fins linewidth_head Line width arrow fins linetype type lines resect numeric(1) denoting millimeters  shorten arrow head fins. resect_fins numeric(1) denoting millimeters  shorten arrow fins resect_head numeric(1) denoting millimeters  shorten arrow head. stroke_color Color point border line stroke_width Stroke width arrows style style list ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_style.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_style class — ob_style","title":"ob_style class — ob_style","text":"ob_style class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_style class — ob_style","text":"","code":"ob_style(   alpha = class_missing,   angle = class_missing,   arrow_head = class_missing,   arrow_fins = class_missing,   arrow_mid = class_missing,   color = class_missing,   family = class_missing,   fill = class_missing,   fontface = class_missing,   hjust = class_missing,   justify = class_missing,   label.color = class_missing,   label.margin = class_missing,   label.padding = class_missing,   label.r = class_missing,   label.size = class_missing,   arrowhead_length = class_missing,   length_head = class_missing,   length_fins = class_missing,   length_mid = class_missing,   lineend = class_missing,   lineheight = class_missing,   linejoin = class_missing,   linewidth_fins = class_missing,   linewidth_head = class_missing,   linewidth = class_missing,   linetype = class_missing,   n = class_missing,   nudge_x = class_missing,   nudge_y = class_missing,   polar_just = class_missing,   resect = class_missing,   resect_fins = class_missing,   resect_head = class_missing,   shape = class_missing,   size = class_missing,   size.unit = class_missing,   straight = class_missing,   stroke = class_missing,   stroke_color = class_missing,   stroke_width = class_missing,   text.color = class_missing,   vjust = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_style class — ob_style","text":"alpha numeric value alpha transparency angle angle text arrow_head 2-column matrix polygon points arrow_fins 2-column matrix polygon points arrow_mid 2-column matrix polygon points color character string color family font family fill character string fill color fontface Can plain, bold, italic, bold.italic hjust horizontal justification. justify numeric(1) 0 1 control arrows drawn relative path's endpoints. value 0 sets arrow's tips path's end, whereas value 1 sets arrow's base path's end. ggarrow. label.color Color label outline. label.margin Amount distance around label. Unit vector length four. Usually created ggplot2::margin. label.padding Amount padding around label. Unit vector length four. Usually created ggplot2::margin. label.r Radius rounded corners. Defaults 0.15 lines. label.size Width label outline. arrowhead_length Determines size arrow ornaments. parameter becomes length parameter ggarrow functions. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. length_head Determines size arrow head. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_fins Determines size arrow fins. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_mid Determines size middle arrows. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. lineend Line end style (round, butt, square). lineheight Height line text linejoin Line join style (round, mitre, bevel). linewidth_fins Line width arrow fins linewidth_head Line width arrow fins linewidth Width lines linetype type lines n Number points polygon, circle, arc, ellipse nudge_x Horizontal adjustment nudge labels . nudge_y Vertical adjustment nudge labels . polar_just angle, polar point, point alters hjust vjust (polar polar_just stored style) resect numeric(1) denoting millimeters  shorten arrow head fins. resect_fins numeric(1) denoting millimeters  shorten arrow fins resect_head numeric(1) denoting millimeters  shorten arrow head. shape Point shape type. Can specified integer (0 25), single character (uses character plotting symbol), . draw smallest rectangle visible (.e., one pixel), NA draw nothing, mapping discrete variable. size numeric size size.unit size aesthetic interpreted: points (\"pt\"), millimeters (\"mm\"), centimeters (\"cm\"), inches (\"\"), picas (\"pc\"). straight logical. TRUE, make bzpath label text straight instead curved. stroke Width point border line stroke_color Color point border line stroke_width Stroke width arrows text.color Color label text. vjust vertical justification ... unused","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/perpendicular_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Find point perpendicular to 2 points — perpendicular_point","title":"Find point perpendicular to 2 points — perpendicular_point","text":"Find point perpendicular 2 points","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/perpendicular_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find point perpendicular to 2 points — perpendicular_point","text":"","code":"e1 %|-% e2  e1 %-|% e2"},{"path":"https://wjschne.github.io/ggdiagram/reference/perpendicular_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find point perpendicular to 2 points — perpendicular_point","text":"e1 first ob_point e2 second ob_point","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/perpendicular_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find point perpendicular to 2 points — perpendicular_point","text":"","code":"x <- ob_point(0,0) y <- ob_point(1,1) # Find point perpendicular to x and y going vertically first x %|-% y #> <ob_point> #> @ x: num 0 #> @ y: num 1 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics # Find point perpendicular to x and y going horizontally first x %-|% y #> <ob_point> #> @ x: num 1 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, length, r, theta, style, tibble, xy, #>              geom, label, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://wjschne.github.io/ggdiagram/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/place.html","id":null,"dir":"Reference","previous_headings":"","what":"Place an object a specified distance from another object — place","title":"Place an object a specified distance from another object — place","text":"Place object specified distance another object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/place.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Place an object a specified distance from another object — place","text":"","code":"place(x, from, where = \"right\", sep = 1, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/place.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Place an object a specified distance from another object — place","text":"x shape object shape x placed relation named direction, angle, number (degrees) sep separation distance ... <dynamic-dots> Arguments passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/polar2just.html","id":null,"dir":"Reference","previous_headings":"","what":"polar2just — polar2just","title":"polar2just — polar2just","text":"Convert hjust vjust parameters polar coordinates","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/polar2just.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"polar2just — polar2just","text":"","code":"polar2just(x, multiplier = 1.2, axis = c(\"h\", \"v\"))"},{"path":"https://wjschne.github.io/ggdiagram/reference/polar2just.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"polar2just — polar2just","text":"x angle multiplier distance axis vertical (v) horizontal (h)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Find projection of a point on an object (e.g., line or segment) — projection","title":"Find projection of a point on an object (e.g., line or segment) — projection","text":"Find projection point object (e.g., line segment)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find projection of a point on an object (e.g., line or segment) — projection","text":"","code":"projection(p, object, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find projection of a point on an object (e.g., line or segment) — projection","text":"p ob_point object object (e.g., line segment) ... <dynamic-dots> arguments passed style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/redefault.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a variant of a function with alternate defaults — redefault","title":"Make a variant of a function with alternate defaults — redefault","text":"Makes copy function new defaults. Similar purrr::partial except arguments new defaults still accept input.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/redefault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a variant of a function with alternate defaults — redefault","text":"","code":"redefault(.f, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/redefault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a variant of a function with alternate defaults — redefault","text":".f function ... new defaults","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/redefault.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a variant of a function with alternate defaults — redefault","text":"function","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/redefault.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a variant of a function with alternate defaults — redefault","text":"","code":"squircle <- redefault(ob_ellipse, m1 = 4) squircle(a = 3) #> <ob_ellipse> #> Error in dplyr::mutate(self@tibble, group = dplyr::row_number(), d = purrr::pmap(list(x0 = x0,     y0 = y0, a = a, b = b, angle = angle, m1 = m1, m2 = m2),     function(x0, y0, a, b, angle, m1, m2) {        th <- degree(seq(0, 359.5, 0.5))        cs <- cos(th)        sn <- sin(th)        x <- a * (abs(cs)^(2/m1)) * sign(cs)        y <- b * (abs(sn)^(2/m2)) * sign(sn)        xy <- rotate2columnmatrix(cbind(x, y), angle)        xr <- xy[, 1] + x0        yr <- xy[, 2] + y0        tibble(xmin = min(xr), xmax = max(xr), ymin = min(yr),             ymax = max(yr))    })): ℹ In argument: `d = purrr::pmap(...)`. #> Caused by error in `purrr::pmap()`: #> ℹ In index: 1. #> Caused by error in `tibble()`: #> ! could not find function \"tibble\""},{"path":"https://wjschne.github.io/ggdiagram/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. S7 prop, props, set_props","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/resect.html","id":null,"dir":"Reference","previous_headings":"","what":"resect — resect","title":"resect — resect","text":"Shorten segments","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/resect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resect — resect","text":"","code":"resect(x, distance, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/resect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"resect — resect","text":"x object distance resect distance ... <dynamic-dots> properties passed style resect numeric distance","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/rotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate an object in 2 dimensions — rotate","title":"Rotate an object in 2 dimensions — rotate","text":"Rotate object 2 dimensions","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/rotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate an object in 2 dimensions — rotate","text":"","code":"rotate(x, theta, ..., origin = ob_point(0, 0))"},{"path":"https://wjschne.github.io/ggdiagram/reference/rotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate an object in 2 dimensions — rotate","text":"x object theta angle ... <dynamic-dots> properties passed style origin length 2 vector  point rotation occurs","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/round_probability.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability rounding — round_probability","title":"Probability rounding — round_probability","text":"Rounds significant digits, removing leading zeros.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/round_probability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability rounding — round_probability","text":"","code":"round_probability(   p,   accuracy = 0.01,   digits = NULL,   max_digits = NULL,   remove_leading_zero = TRUE,   round_zero_one = TRUE,   phantom_text = NULL,   phantom_color = NULL )"},{"path":"https://wjschne.github.io/ggdiagram/reference/round_probability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability rounding — round_probability","text":"p probability accuracy smallest increment digits significant digits max_digits maximum rounding digits remove_leading_zero remove leading zero round_zero_one round 0 1 phantom_text invisible text inserted right phantom_color color phantom text","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/round_probability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability rounding — round_probability","text":"character vector","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/round_probability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability rounding — round_probability","text":"","code":"round_probability(c(0, .0012, .012, .12, .99, .992, .9997, 1), digits = 2) #> [1] \"0\"     \".0012\" \".012\"  \".12\"   \".99\"   \".992\"  \".9997\" \"1\""},{"path":"https://wjschne.github.io/ggdiagram/reference/shape_array.html","id":null,"dir":"Reference","previous_headings":"","what":"make an array of shapes along a line — shape_array","title":"make an array of shapes along a line — shape_array","text":"make array shapes along line","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/shape_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make an array of shapes along a line — shape_array","text":"","code":"shape_array(x, k = 2, sep = 1, where = \"east\", anchor = \"center\", ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/shape_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make an array of shapes along a line — shape_array","text":"x shape k number duplicate shapes make sep separation distance shapes angle named direction (e.g.,northwest, east, , left) anchor bounding box anchor ... <dynamic-dots> properties passed shape","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/subscript.html","id":null,"dir":"Reference","previous_headings":"","what":"Create subscripts — subscript","title":"Create subscripts — subscript","text":"Create subscripts Create superscript","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/subscript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create subscripts — subscript","text":"","code":"subscript(x, subscript = seq(length(x)))  superscript(x, superscript = 2)"},{"path":"https://wjschne.github.io/ggdiagram/reference/subscript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create subscripts — subscript","text":"x text subscript text","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/subscript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create subscripts — subscript","text":"text text","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/subscript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create subscripts — subscript","text":"","code":"subscript(\"X\", 1:3) #> [1] \"X<sub>1<\/sub>\" \"X<sub>2<\/sub>\" \"X<sub>3<\/sub>\" superscript(c(\"A\", \"B\"), 2) #> [1] \"A<sup>2<\/sup>\" \"B<sup>2<\/sup>\""},{"path":"https://wjschne.github.io/ggdiagram/reference/variance.html","id":null,"dir":"Reference","previous_headings":"","what":"create double-headed arrow paths indicating variance — variance","title":"create double-headed arrow paths indicating variance — variance","text":"create double-headed arrow paths indicating variance","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create double-headed arrow paths indicating variance — variance","text":"","code":"variance(   x,   where = \"north\",   theta = 50,   bend = 0,   looseness = 1,   arrow_head = arrowheadr::arrow_head_deltoid(),   resect = 2,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create double-headed arrow paths indicating variance — variance","text":"x object angle named direction (e.g.,northwest, east, , left) theta angle width bend Angle control points rotated looseness distance control points ratio distance object's center (e.g., circle radius 1, looseness = 1.5 means control points 1.5 units start end points.) ... <dynamic-dots> properties passed style","code":""}]
