[{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Angles","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) my_font <- \"Roboto Condensed\" my_arrow_head <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"angles","dir":"Articles","previous_headings":"","what":"Angles","title":"Angles","text":"Angles different kinds units associated : turns (1 turn = one full rotation circle), degrees (1 turn = 360 degrees), radians (1 turn = 2π2\\pi = τ\\tau). like π just fine, agree Michael Hartl’s Tau Manifesto better recognized number radians complete full turn circle (τ = 2π ≈ 6.283185) fundamental number radians complete half turn (π). Figure 1: Angle Metrics One can create equivalent angles three metrics. Although methods convenient printing, hood ob_angle objects can retrieve angle three metrics.","code":"theta <- degree(seq(0,330, 30)) angle_types <- c(\"Turns\", \"Radians\", \"Degrees\") theta_list <- lapply(list(turn, radian, degree), \\(.f) .f(theta))  p <- ob_polar(theta, r = 1)   r <- seq(1, .5, length.out = length(angle_types)) my_shades <- (tinter::tinter(\"royalblue\",                              steps = 7,                              direction = \"tints\")[seq(length(angle_types))])  ggplot() +   coord_equal() +   theme_void() +   ob_circle(     center = ob_point(),     radius = r,     fill = my_shades,     color = NA,     linewidth = .25   ) +   ob_segment(ob_point(), p, linewidth = .25) +   purrr::pmap(     .l = list(r, theta_list, my_shades),      .f = \\(rs, ts, ss) {       ob_circle(radius = rs - 1/8)@point_at(ts)@label(ts, fill = ss, size = 16)@geom(family = my_font)       }) +   ob_point(0, y = r - 1/18)@label(angle_types,                                 fill = my_shades,                                 fontface = \"bold\",                                 family = my_font,                                size = 16) degree(90) #> 90° turn(1 / 4) #> .25 radian(pi / 2) #> 0.5π radian(pi) #> π radian(pi)@degree #> [1] 180 radian(pi)@turn #> [1] 0.5  degree(180) #> 180° degree(180)@turn #> [1] 0.5 degree(180)@radian #> [1] 3.141593  turn(.5) #> .50 turn(.5)@radian #> [1] 3.141593 turn(.5)@degree #> [1] 180"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"character-printing","dir":"Articles","previous_headings":"","what":"Character Printing","title":"Angles","text":"labeling, sometimes convenient convert angles text: metrics can converted :","code":"as.character(degree(90)) #> [1] \"90°\" as.character(turn(.25)) #> [1] \".25\" as.character(radian(.5 * pi)) #> [1] \"0.5π\" a <- degree(degree = 270) a #> 270° radian(a) #> 1.5π turn(a) #> .75"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"angle-metric-conversions","dir":"Articles","previous_headings":"","what":"Angle Metric Conversions","title":"Angles","text":"metrics can converted :","code":"a <- degree(degree = 270) a #> 270° radian(a) #> 1.5π turn(a) #> .75"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"arithmetic-operations","dir":"Articles","previous_headings":"","what":"Arithmetic Operations","title":"Angles","text":"Angles can added, subtracted, multiplied, divided. underlying value stored can real number (turn units), degrees, radians, turns always displayed −1 +1 turns, ±360 degrees, ±2π radians. 30° + 60° = 90° Figure 2: 30° + 60° = 90° Adding number degree class assumes number degree metric. Likewise, adding number radian (angle default) makes radian: Turns work way: degrees outside range ±360, recalculate: 80∘+300∘=380∘=380∘−360∘=20∘ \\begin{aligned} 80^{\\circ} + 300^\\circ &= 380^\\circ\\\\ &= 380^\\circ-360^\\circ\\\\ &=20^\\circ\\end{aligned} Figure 3: 80° + 300° = 380° = 20° 20∘−40∘=−20∘=340∘ \\begin{aligned} 20^\\circ - 40^\\circ &= -20^\\circ\\\\&=340^\\circ \\end{aligned} Figure 4: 40° − 60° = −20° 2⋅20∘=40∘2\\cdot20^\\circ=40^\\circ 2⋅180=360∘=0∘ \\begin{aligned} 2\\cdot180 &= 360^\\circ\\\\&=0^\\circ \\end{aligned}","code":"make_angles <- function(a = c(80, 300),                          r = c(.1, .2, .3),                          label_adjust = c(0,0,0),                          multiplier = c(1.4,1.4,1.4)) { start_angles <- degree(c(0,a[1], 0)) end_angles <- degree(c(a[1], sum(a), degree(sum(a))@degree))  arc_labels <- as.character(end_angles - start_angles)  mycolors <- c(\"firebrick4\", \"royalblue3\", \"orchid4\")   arc_labels[3] <- paste0(arc_labels[1],                         \" + \",                          arc_labels[2],                         \" = \",                          arc_labels[3])  arcs <- ob_arc(radius = r,        start = start_angles,        end = end_angles,       label = ob_label(arc_labels,                         color = mycolors,                         family = my_font),       linewidth = .25,       length_head = 10,       arrow_head =  arrowheadr::arrow_head_deltoid(),       color = mycolors)    ggplot() +   theme_void() +   coord_equal()  +   arcs +   ob_segment(     p1 = ob_point(),      p2 = ob_polar(theta = degree(c(0,a[1],sum(a))), r = 1),      length_head = 5,     linewidth = .75,     arrow_head =  arrowheadr::arrow_head_deltoid(),     color = c(\"firebrick\", \"firebrick\", \"royalblue\"))  } make_angles(a = c(30, 60),              r = c(.12,.24, .36),              multiplier = c(1.5,1.5,1.5)) degree(30) + degree(60) #> 90° degree(30) + 10 #> 40° radian(pi) + 0.5 * pi #> 1.5π turn(.1) + .2 #> .30 make_angles(c(80, 300)) degree(80) + degree(300) #> 20° make_angles(c(40, -60)) degree(40) - degree(60) #> −20° 2 * degree(20) #> 40° 2 * degree(180) #> 0°"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"trigonometry","dir":"Articles","previous_headings":"","what":"Trigonometry","title":"Angles","text":"outputs degree, radian, turn can take three standard trigonometric functions Figure 5: Trigonometric functions Benefits using trigonometric functions angles instead numeric radians include: Angle metric conversions handled automatically. hood, cospi, sinpi, tanpi functions used get rounding right key locations (e.g., 90 degrees, 180 degrees) example, tan(pi) slightly true value 0. contrast, tan(radian(pi)) rounds 0 exactly.","code":"theta <- degree(60) cos(theta) #> [1] 0.5 sin(theta) #> [1] 0.8660254 tan(theta) #> [1] 1.732051 o <- ob_point(0, 0) p <- ob_polar(theta, 1)  # col <- purrr::map2_chr(scico::scico(6, palette = \"hawaii\"), #                        c(0.01,0.01,0.01,0.01,.15, .4),  #                        tinter::darken)  my_colors <- c(\"#8C0172\", \"#944046\", \"#9B7424\",                 \"#8EB63B\", \"#53BD91\", \"#6C939A\") ggdiagram() +   ob_circle(fill = NA, color = \"gray\") +   # axes   ob_line(intercept = 0,        color = \"gray\",        linewidth = .25) +   ob_line(xintercept = 0,        color = \"gray\",        linewidth = .25) +   # degree arc   ob_arc(     end = theta,     radius = .25,     label = theta,     linewidth = .2   ) +   # angle arrow   connect(o, p, label = \"*r* = 1\", resect_head = 1) +   # sin(theta)   ob_segment(     ob_polar(theta = 0, r = cos(theta)),     p,     label = paste0(\"sin(\",                     theta,                      \") = \",                     round(sin(theta), 2)),     color = my_colors[1],     linewidth = .5   ) +   # cos(theta)   ob_segment(     ob_point(0, sin(theta)),     ob_point(cos(theta), sin(theta)),     label = ob_label(       paste0(         \"cos(\",         theta,         \") = \",         round(cos(theta), 2)), vjust = 1),     color = my_colors[2],     linewidth = .5   ) +   # tan(theta)   ob_segment(     p,     p + ob_polar(theta - 90, r = tan(theta)),     label = paste0(       \"tan(\",       theta,       \") = \",       round(tan(theta), 2)),     color = my_colors[3],     linewidth = .5   ) +   # sec(theta)   ob_segment(     o,     ob_point(1 / cos(theta)),     label = ob_label(       label = paste0(         \"sec(\",         theta,         \") = \",         round(1 / cos(theta), 2)),       vjust = 1     ),     color = my_colors[5]   ) +   # cot(theta)   ob_segment(     p + ob_polar(theta + 90, r = 1 / tan(theta)),     p,     label = paste0(       \"cot(\",       theta,       \") = \",       round(1 / tan(theta), 2)),     color = my_colors[4],     linewidth = .5   ) +   # csc(theta)   ob_segment(     o,     ob_point(0, 1 / sin(theta)),     label = paste0(       \"csc(\",       theta,       \") = \",       round(1 / sin(theta), 2)),     color = my_colors[6]   ) tan(pi) #> [1] -1.224647e-16 tan(radian(pi)) #> [1] 0"},{"path":"https://wjschne.github.io/ggdiagram/articles/angles.html","id":"retrieving-the-underlying-data-from-a-ob_angle-object","dir":"Articles","previous_headings":"","what":"Retrieving the underlying data from a ob_angle object","title":"Angles","text":"Angles created degree, radian, turn function ob_angle objects. ob_angle function exists meant used directly. underlying data vector numeric data representing number turns. underlying turn data ob_angle object can extracted c function (S7::S7_data function).","code":"theta <- degree(c(0,180,360, 720)) # Degrees range: 0<= degree < 360 theta@degree #> [1]   0 180   0   0 # Underlying data in turns c(theta) #> [1] 0.0 0.5 1.0 2.0 # Alternative method of extracting data S7::S7_data(theta) #> [1] 0.0 0.5 1.0 2.0"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcwedges.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Arcs and Wedges","text":"avoid repetitive code, make base plot:","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(2.3, n = 101)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcwedges.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Arcs and Wedges","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow)"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcwedges.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Arcs and Wedges","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(2.3, n = 101)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcwedges.html","id":"arcs","dir":"Articles","previous_headings":"","what":"Arcs","title":"Arcs and Wedges","text":"Just segment part line two points line, arc part circle two points (circle). Thus, arc properties circle, addition starting ending points. sake simplicity, starting points specified angles. Arc starting ending points can specified angle unit. number used, interpreted degree unit.  Arc starting ending angles center point.","code":"ob_arc(center = ob_point(1,2),      start = 25,      end = 75,      radius = 3) #> <ggdiagram::ob_arc> #> @ center: <ggdiagram::ob_point> #>  @ x: num 1 #>  @ y: num 2 #> @ radius: num 3 #> @ start : <ggdiagram::degree> #>  @ degree: num 25 #> @ end   : <ggdiagram::degree> #>  @ degree: num 75 #> @ theta : <ggdiagram::degree> #>  @ degree: num 50 #> Other props: label, type, alpha, arrow_head, arrow_fins, #>              arrowhead_length, length_head, length_fins, color, #>              fill, lineend, linejoin, linewidth, linewidth_fins, #>              linewidth_head, linetype, n, resect, resect_fins, #>              resect_head, stroke_color, stroke_width, apothem, #>              arc_length, sagitta, bounding_box, circle, chord, #>              length, end_point, polygon, start_point, style, #>              tibble, geom, angle_at, autolabel, hatch, midpoint, #>              normal_at, place, point_at, tangent_at, aesthetics ggtext::GeomRichText$default_aes #> Aesthetic mapping:  #> * `colour`       -> \"black\" #> * `fill`         -> \"white\" #> * `size`         -> 7.029196 #> * `angle`        -> 0 #> * `hjust`        -> 0.5 #> * `vjust`        -> 0.5 #> * `alpha`        -> NA #> * `family`       -> \"Roboto Condensed\" #> * `fontface`     -> 1 #> * `lineheight`   -> 1.2 #> * `text.colour`  -> NULL #> * `label.colour` -> NULL #> * `label.size`   -> 0.25 bp +   {p1 <- ob_point(0, 0)} +    {a1 <- ob_arc(     center = p1,     radius = {r <- 4},     start = {ang_start <- degree(25)},     end = {ang_end <- degree(75)}     )} +   ob_label(     label = paste0(\"Center \", p1@auto_label),      center = p1,      vjust = 1.1) +    connect(     p1,      a1@midpoint(),      label = paste0(\"Radius = \", r)) +    ob_label(     label = ang_start,      center = a1@midpoint(0),     polar_just = ob_polar(ang_start + degree(-90), 1.3),      plot_point = TRUE) +   ob_label(     label = ang_end,      center = a1@midpoint(1),      polar_just = ob_polar(ang_end + degree(90), 1),      plot_point = TRUE)"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcwedges.html","id":"starting-or-ending-points-of-arcs","dir":"Articles","previous_headings":"","what":"Starting or ending points of arcs","title":"Arcs and Wedges","text":"Sometimes know center arc . Instead, want arc start end specific point. example, might want specify start point end point. Figure 1: Fixing start end points arc example, used start_point argument recreate fun meme “square” object 4 equal sides meet right angles: Figure 2: “square” four equal “sides” meet “right” angles.","code":"p1 <- ob_point(0, 0)  bp +     ob_arc(start = -45,        end = 45,        radius = 2,       color = \"orchid4\",        start_point = p1)  +   ob_arc(start = -45,        end = 45,        radius = 2,       color = \"forestgreen\",        end_point = p1) +   p1 little_r <- 1 / (2 * pi - 1) ggdiagram(font_family = my_font,           font_size = my_font_size) +   {p1 <- ob_point(0,0)} +   {p2 <- ob_point(1,0)} +   ob_segment(p1, p2) +   {a1 <- ob_arc(start = 0, end = radian(1), radius = 1 + little_r, start_point = p2)} +   {p3 <- a1@midpoint(1)} +   {p4 <- a1@normal_at(radian(1), distance = -1)} +   ob_segment(p3, p4) +    ob_arc(start_point = p4,           radius = little_r,           start = radian(1),           end = turn(1))"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcwedges.html","id":"midpoints","dir":"Articles","previous_headings":"","what":"Midpoints","title":"Arcs and Wedges","text":"midpoint function can find one midpoints different positions. default position .5. Figure 3: Default midpoint arc starting ending points position 0 1, respectively. Figure 4: Multiple midpoints can specified","code":"bp +   a1 +   a1@midpoint() bp +   a1 +   a1@midpoint(position = c(0,1))"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcwedges.html","id":"labelling-arcs","dir":"Articles","previous_headings":"","what":"Labelling arcs","title":"Arcs and Wedges","text":"default, arc label appear outside midpoint arc Figure 5: labelled arc label needed elsewhere, can set label function’s position property. Figure 6: Multiple labels arc orientation label needs changed, can set vjust, hjust, polar_just. Figure 7: arc’s labels can adjusted. cases arc already created label needed. Although label can added arc created, position set manually (otherwise position 0,0 default). cases, auto_label function can help place label correctly. default, auto_label show theta property (.e., end − start). Figure 8: Using arc’s autolabel However, label can inserted position. Figure 9: Adjusting arc’s autolabel","code":"bp +   ob_arc(radius = 3,        start = 20,        end = 120,        label = ob_label(degree(100))) bp +   ob_arc(     radius = 3,     start = 20,     end = 120,     label = ob_label(       c(\"Start\", \"Middle\", \"End\"),       position = c(0, .5, 1),       plot_point = TRUE     )   ) bp +   ob_arc(     radius = 3,     start = 20,     end = 120,     label = ob_label(       \"A\",       vjust = 1.2,       hjust = .75     )   ) bp +    {a1 <- ob_arc(radius = 3,        start = 20,        end = 120)} +    a1@autolabel() bp +    a1 +   a1@autolabel(label = \"Start\",                 position = 0)"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcwedges.html","id":"arcs-with-arrows","dir":"Articles","previous_headings":"","what":"Arcs with arrows","title":"Arcs and Wedges","text":"arc object plotted using ggarrow::arrow. means arrows can placed either end arc. Figure 10: Arcs arrowheads","code":"my_arrow_head <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  bp +    ob_arc(radius = 3,        start = 0,        end = 180,        arrow_head = my_arrow_head,       arrow_fins = my_arrow_head,        arrowhead_length = 8)"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcwedges.html","id":"wedges","dir":"Articles","previous_headings":"","what":"Wedges","title":"Arcs and Wedges","text":"ob_arc function @type property can set \"arc\", \"wedge\", \"segment\". set arc, arc drawn geom::arrow arc endpoints can arrows. Otherwise, @type wedge segment, ob_arc drawn ggplot2::geom_polygon. ob_wedge function convenient wrapper function ob_arc sets @type property wedge. Figure 11: Arc wedges","code":"theta <- c(0, 120, 180, 360) bp +   ob_wedge(radius = 3,        start = theta[-length(theta)],        end = theta[-1],        fill = c(\"dodgerblue4\", \"orchid4\", \"darkgreen\"),        color = \"white\",        linewidth = 1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/arcwedges.html","id":"circular-segments","dir":"Articles","previous_headings":"","what":"Circular Segments","title":"Arcs and Wedges","text":"circular segment arc made polygon. ob_circular_segment function convenient wrapper function ob_arc sets @type property segment. Figure 12: Three circular segments Objects made ob_arc, ob_wedge, ob_circular_segment can return important features arcs, including chord, sagitta, arc_length. Figure 13, chord ob_segment connects endpoints arc. sagitta ob_segment arc’s midpoint chord’s midpoint. shown Figure 13, apothem ob_segment arc’s center point midpoint chord. radius sum distances spanned apothem sagitta. Figure 13: circular segment arc chord. Fun fact: geometric concepts arc, chord, sagitta archery terms, deriving Latin words arcus (bow), chorda (string), sagitta (arrow).","code":"ggdiagram() +   ob_circular_segment(     start = c(30, 150, 270),     end = c(150, 270, 390),     fill = c(\"dodgerblue4\", \"orchid4\", \"darkgreen\")   ) bp +   {cs <- ob_circular_segment(       radius = 3,       start = radian(-acos(1 / 3)),       end = radian(acos(1 / 3)),       fill = \"dodgerblue3\"     )} +   ob_arc(     radius = 3,     start = cs@end,     end = cs@start + degree(360),     linetype = \"dashed\"   ) +   cs@chord@midpoint()@label(     paste0(\"Chord Length = \", round(cs@chord@distance, 2)),     angle = cs@chord@line@angle,     vjust = -.1,     color = \"black\",     size = 18   ) +   cs@sagitta %>% set_props(color = \"white\") +   cs@sagitta@midpoint()@label(     paste0(\"Sagitta = \", round(cs@sagitta@distance, 2)),     vjust = 0,     size = 18,     fill = NA,      color = \"white\"   ) +   ob_path(     ob_point(       cs@polygon %>%          mutate(id = dplyr::row_number()) %>%          arrange(-id) %>%          select(x, y)     ),     label = ob_label(       paste0(\"Arc Length = \", round(cs@arc_length, 2)),       vjust = -0.1,       size = 18,       color = \"black\"     ),     color = \"dodgerblue3\"   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/automation.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Repetition and Automation","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(purrr)"},{"path":"https://wjschne.github.io/ggdiagram/articles/automation.html","id":"object-lists","dir":"Articles","previous_headings":"","what":"Object Lists","title":"Repetition and Automation","text":"ggdiagram object made ob_* functions can made list, either list function c function.","code":"p1 <- ob_point(1, 2) p2 <- ob_point(3, 4) c(p1,p2) #> [[1]] #> <ggdiagram::ob_point> #> @ x: num 1 #> @ y: num 2 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics #>  #> [[2]] #> <ggdiagram::ob_point> #> @ x: num 3 #> @ y: num 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/articles/automation.html","id":"binding-lists-of-objects-into-a-single-object","dir":"Articles","previous_headings":"","what":"Binding lists of objects into a single object","title":"Repetition and Automation","text":"bind function take list ggdiagram objects create single object. objects list single type (e.g., ob_point), bind return object type. objects multiple types, bind bind type object separately return ob_shape_list. Binding objects can make subsequent tasks easier less repetitive. example, new object p, can create two circles one line code rather two lines otherwise needed create separate circles p1 p2.  two points, time savings small. many objects bound, time savings can substantial. list objects different types, bind function bind objects type resulting list ob_shape_list. Figure 1 bind 2 points 2 circles ob_shape_list 1 ob_point 1 ob_circle. Figure 1: ob_shape_list much benefit making ob_shape_list shown . simpler just include objects one time. However, can useful context large diagram many elements, require separate layer ggplot2. Binding elements first can reduce number ggplot layers number object types ob_shape_list. ob_shape_list’s underlying data named list. names functions used create objects. example,","code":"p <- bind(c(p1,p2)) p #> <ggdiagram::ob_point> #> @ x: num [1:2] 1 3 #> @ y: num [1:2] 2 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics ggdiagram() +   ob_circle(center = p) p1 <- ob_point(0,0) p2 <- ob_point(2,0) c1 <- ob_circle(p1, radius = 2) c2 <- ob_circle(p2, radius = 1.5)  # bind objectins into an ob_shape_list osl <- bind(c(p1, p2, c1, c2)) osl #> <ob_shape_list> #> <ggdiagram::ob_point> #> @ x: num [1:2] 0 2 #> @ y: num [1:2] 0 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics #> <ggdiagram::ob_circle> #> @ center: <ggdiagram::ob_point> #>  @ x: num [1:2] 0 2 #>  @ y: num [1:2] 0 0 #> @ radius: num [1:2] 2 1.5 #> Other props: label, alpha, color, fill, linewidth, linetype, #>              n, area, bounding_box, circumference, diameter, #>              length, polygon, style, tibble, geom, arc, angle_at, #>              normal_at, tangent_at, place, point_at, aesthetics  ggdiagram() +   osl osl[[\"ob_point\"]] #> <ggdiagram::ob_point> #> @ x: num [1:2] 0 2 #> @ y: num [1:2] 0 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics osl[[\"ob_circle\"]] #> <ggdiagram::ob_circle> #> @ center: <ggdiagram::ob_point> #>  @ x: num [1:2] 0 2 #>  @ y: num [1:2] 0 0 #> @ radius: num [1:2] 2 1.5 #> Other props: label, alpha, color, fill, linewidth, linetype, #>              n, area, bounding_box, circumference, diameter, #>              length, polygon, style, tibble, geom, arc, angle_at, #>              normal_at, tangent_at, place, point_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/articles/automation.html","id":"use-unbind-to-make-an-object-into-a-list-of-objects","dir":"Articles","previous_headings":"","what":"Use unbind to make an object into a list of objects","title":"Repetition and Automation","text":"unbind function perform opposite operation bind. converts elements object list singleton objects. example, object p two points. Unbinding create list 2 ob_point objects. unbind function needed want loop element using lapply purrr::map. two points want put six points . want connect element one column element column. Note output lapply purrr::map list. make list something ggplot2 can plot, can bind list single object. Figure 2: Using unbind, map, bind loop elements. Alternatively, can convert list item geom .geom. Figure 3: Using unbind, lapply, .geom loop elements.","code":"unbind(p) #> [[1]] #> <ggdiagram::ob_point> #> @ x: num 1 #> @ y: num 2 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics #>  #> [[2]] #> <ggdiagram::ob_point> #> @ x: num 3 #> @ y: num 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics theta <- degree(seq(90, 360, 120)) ggdiagram() +    {p_3 <- ob_polar(         theta = theta,         r = .5,         fill = \"black\",         shape = \"triangle down filled\",         size = 15)} +   unbind(p_3) %>%     purrr::map(       \\(p_i) {         p_i + ob_polar(           theta = theta,            r = .15,            color = \"orchid\",            fill = \"orchid\",            size = 15,            shape = \"triangle filled\")}) %>%    bind() +   scale_x_continuous(NULL, expand = expansion(.15)) ggdiagram() +    {p <- ob_polar(degree(seq(30,330,60)),                   r = 2,                   size = 10,                   color = \"orchid\")} +   unbind(p) %>%      lapply(\\(pp) {       p2 <- pp + ob_polar(         theta = degree(seq(0, 330, 30)),         r = .5)              s <- connect(pp, p2)                as.geom(s)       })"},{"path":"https://wjschne.github.io/ggdiagram/articles/automation.html","id":"use-map_ob-to-loop-through-object-elements","dir":"Articles","previous_headings":"","what":"Use map_ob to loop through object elements","title":"Repetition and Automation","text":"unbind, map, bind can tedious every time loop needed. map_ob function wrapper map unbinds input binds output automatically. Figure 4 ob_map function can output list different object types simultaneously. Figure 5: Outputting list different object types map_ob. practical example, every variable left column connected every variable right. Figure 6: Using map_ob connect variables","code":"ggdiagram() +   {o <- ob_point()} +   {p <- ob_polar(degree(c(0, 90, 180, 270)))} +   connect(o, p, resect = 2) +   p %>%     map_ob(\\(pp) {       p2 <- pp + ob_polar(theta = degree(seq(45, 315, 90)),                           r = sqrt(2) / 3,                           color = \"orchid\")       list(p2,            connect(pp, p2, resect = 2))     }) theta <- degree(seq(0,300, 60))  ggdiagram() +   {e6 <- ob_ellipse(     center = ob_polar(       theta = theta,        r = 60),     m1 = .5,     a = 8,     b = 4,     angle = theta + degree(90),     color = NA,     fill = \"orchid4\",      size = 4)} +   map_ob(e6, \\(e_i) {     p_i <- e_i@center     p_ij <- p_i + ob_polar(theta, 15)     c_ij <- ob_circle(       center = p_ij,        radius = 2,       fill = \"green4\",       color = NA)     p_ijk <- map_ob(p_ij, \\(pt_ij) {       ob_segment(pt_ij, pt_ij + ob_polar(theta, 4) )       })     list(p_ijk, c_ij)   }) k <- 5 clr <- viridis::viridis(k, begin = .3, end = .7) ggdiagram() +   {t1 <- ob_array(ob_circle(), k = k, where = \"north\",                    fill = clr,                   color = clr)} +   {t2 <- ob_circle(fill = clr, color = clr)@place(     from = t1,      where = \"right\",      sep = 10)} +   map_ob(t1, \\(tt) {     connect(tt, t2, resect = 2, color = tt@color)   })"},{"path":"https://wjschne.github.io/ggdiagram/articles/automation.html","id":"subsetting-objects","dir":"Articles","previous_headings":"","what":"Subsetting objects","title":"Repetition and Automation","text":"[ operator can subset ggdiagram objects created ob_* functions. Object p 2 points . select first point : strategic use subsetting can make otherwise repetitive tasks much less tedious. Figure 7 connect ring 12 circles one command rather 12. Figure 7: ring connected circles. Subsetting can used assignment ggdiagram objects. example, Figure 8, first four points changed (1,5) (0,0) Figure 8: Subsetting objects Figure 9, 8 variables 13 arrows connecting . Rather making separate connection arrow, subsetting allows us make 13 connections single connect command. Using subsetting assign variables within loop allows placing variables programmatically. fewer variables desired, setting k another value, create k variables 2k − 3 connections. Figure 9: model 8 variables 13 causal paths","code":"p[1] #> <ggdiagram::ob_point> #> @ x: num 1 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics theta <- degree(seq(0,330,30)) clr <- hsv(theta@degree / 360, s = .4, v = .6) ggdiagram() +   {c12 <- ob_circle(     center = ob_polar(theta, r = 6),     fill = clr,     color = NA)} +   connect(c12, c12[c(2:12, 1)],            resect = 2,            color = clr) p <- ob_point(x = 1:4,                y = 2:5) p[1] <- ob_point(0,0, color = \"firebrick\", size = 5)  ggplot() +    coord_equal() +   p # Number of variables k <- 8L  # Make k variables x <- ob_rectangle(ob_point(rep(0, k), rep(0, k)),                   label = ob_label(                     label = paste0(\"*X*~\", 1:k, \"~\"),                     vjust = .6,                     size = 20,                     family = \"Roboto Condensed\"                   ))    # Place even variables to the right and  # odd variables below the previous variables for (i in 2:k) {   x[i] <- place(x[i], x[i - 1], ifelse((i %% 2) == 0, \"right\", \"below\")) }  # Plot ggdiagram() +    x +   # paths between variables ahead by 1 and by 2   connect(x[c(seq(1,k - 1), seq(1, k - 2))],            x[c(seq(2,k),     seq(3, k))],           resect = 2)"},{"path":"https://wjschne.github.io/ggdiagram/articles/bezier.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Bézier Curves","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(geomtextpath)"},{"path":"https://wjschne.github.io/ggdiagram/articles/bezier.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Bézier Curves","text":"avoid repetitive code, set defaults make base plot:","code":"#| label: baseplot  my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(2.1)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/bezier.html","id":"bézier-curves","dir":"Articles","previous_headings":"","what":"Bézier curves","title":"Bézier Curves","text":"ob_bezier function creates object specifies control points bézier curve. bézier curve extremely useful way making elegantly curved lines points. Figure 1: Bézier curve contol points like make list control points setting start end points first. find internal control points offsetting end points—adding subtracting point specified x y distance (angle using polar function). c function creates list points, bind function binds list single point object containing points. Figure 2: Bézier curve contol points label","code":"bp +    {control_points <- ob_point(     x = c(-4,4,4),      y = c(4,-4, 0))} +    ob_path(control_points, linetype = \"dashed\", linewidth = .25) +   ob_bezier(control_points) # start and end of control points p_start <- ob_point(-4,-2) p_end <- ob_point(4, 2) # Offset ob_point from the endpoints p_offset <- ob_point(5,6)  # Make list of points and bind them into a single ob_point p <- c(p_start,         p_start + p_offset,         p_end - p_offset,         p_end) |>    bind()   bp +    ob_path(p,         linetype = \"dashed\",         color = \"gray\",        linewidth = .25) +   p +    ob_bezier(p,            label = ob_label(\"Labels can follow the path of the bézier curve.\"))"},{"path":"https://wjschne.github.io/ggdiagram/articles/bezier.html","id":"multiple-bézier-paths","dir":"Articles","previous_headings":"","what":"Multiple bézier paths","title":"Bézier Curves","text":"multiple point objects supplied list (concatenated c function), bézier curve created point object list. Figure 3: Multiple bézier paths","code":"control_point_list <- c(       ob_point(         x = c(-4, -3, 4),          y = c(.1,  4, .1),          color = my_colors[1]),       ob_point(         x = c(-4, 3, 4),          y = c(-.1, -4, -.1),          color = my_colors[2] )       ) bp +    ob_bezier(control_point_list) +   ob_path(control_point_list, linetype = \"dashed\", linewidth = .25) +   bind(control_point_list)"},{"path":"https://wjschne.github.io/ggdiagram/articles/causalpaths.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Path Diagrams","text":"","code":"library(ggplot2) library(ggdiagram) library(tibble) library(dplyr) library(purrr) library(ggarrow)"},{"path":"https://wjschne.github.io/ggdiagram/articles/causalpaths.html","id":"path-diagrams","dir":"Articles","previous_headings":"","what":"Path diagrams","title":"Path Diagrams","text":"Structural equation models often displayed path diagrams. visual vocabulary path diagrams fairly simple. seen Figure 1, observed variable square rectangle, latent variable circle ellipse. Often omitted clarity, means intercepts constants can depicted triangles. Figure 1: Elements path diagram Figure 2, two types relationships depicted. single-headed arrow indicates direct causal influence. curved double-headed arrow indicates correlation two variables specify causal nature relationship. Figure 2: Relationships path diagram regression model can stated simply: X predicts Y. time, relationship can stated simplified path diagram like Figure 3. Figure 3: Simplified path diagram regression model simple statement skips large number details, can filled . predictor, X random variable unknown distribution FX. mean μX standard deviation σX. X∼FX(x;μX,σX2)X\\sim F_X(x; \\mu_X,\\sigma^2_X) Regression takes X subjects linear transformation create variable Ŷ: Ŷ=b0+b1X\\hat{Y}=b_0+b_1X regression coefficients b0 b1 known intercept slope, respectively. Ŷ predicted value Y, given X. prediction error e difference actual value Y predicted value Ŷ: e=Y−Ŷe=Y-\\hat{Y} prediction error assumed normally distributed standard deviation σe, known standard error estimate: e∼𝒩(0,σe2)e\\sim \\mathcal{N}(0,\\sigma^2_e) Putting together: Y=b0+b1X⏟Ŷ+eY=\\underbrace{b_0+b_1X}_{\\hat{Y}}+e can communicated succinctly path diagram Figure 4. Figure 4: Full path diagram regression model Path diagrams created Sewall Wright (1920) display path analyses—interconnected regression models sequences direct indirect relationships among variables. example, two regression equations combined make causal system shows variables X1–X4 interrelate. X3=b13X1+b23X2+e3X4=b14X1+b24X2+b34X3+e4 \\begin{aligned} X_3&=b_{13}X_1+b_{23}X_2+e_3\\\\ X_4&=b_{14}X_1+b_{24}X_2+b_{34}X_3+e_4 \\end{aligned} Figure 5: path diagram path analysis model Exploratory factor analysis (EFA) assumes observed variables intercorrelate smaller number latent variables influence multiple observed variables. Figure 6, 6 observed variables x intercorrelate 2 latent factors f act common causes. EFA find loadings latent observed variables best account observed correlations among variables. portion observed variables independent latent factors. independent influences can thought uniquenesses u. Thus, structural model : x=Λf+u x=\\Lambda f+u  x vector observed variables, f vector latent factors, u vector latent uniquenesses, Λ matrix loadings quantify strength effects f x. observed variables x, latent factors f, uniquenesses u covariance matrices: Σ=cov(x)Φ=cov(f)Θ=cov(u) \\begin{aligned} \\Sigma&=\\text{cov}(x)\\\\ \\Phi&=\\text{cov}(f)\\\\ \\Theta&=\\text{cov}(u) \\end{aligned} model-implied covariance matrix observed variables function loading matrix Λ covariance matrices Φ Θ: Σ̂=ΛΦΛ′+Θ=[λ11λ21λ12λ22λ13λ23λ14λ24λ15λ25λ16λ26][ϕ11ϕ12ϕ12ϕ22][λ11λ21λ12λ22λ13λ23λ14λ24λ15λ25λ16λ26]′+[θ11000000θ22000000θ33000000θ44000000θ55000000θ66] \\begin{aligned} \\hat{\\Sigma}&=\\Lambda\\Phi\\Lambda'+\\Theta\\\\ &=\\begin{bmatrix} \\lambda_{11} & \\lambda_{21}\\\\ \\lambda_{12} & \\lambda_{22}\\\\ \\lambda_{13} & \\lambda_{23}\\\\ \\lambda_{14} & \\lambda_{24}\\\\ \\lambda_{15} & \\lambda_{25}\\\\ \\lambda_{16} & \\lambda_{26}\\\\ \\end{bmatrix}\\begin{bmatrix}\\phi_{11} & \\phi_{12}\\\\ \\phi_{12} & \\phi_{22}\\end{bmatrix}\\begin{bmatrix} \\lambda_{11} & \\lambda_{21}\\\\ \\lambda_{12} & \\lambda_{22}\\\\ \\lambda_{13} & \\lambda_{23}\\\\ \\lambda_{14} & \\lambda_{24}\\\\ \\lambda_{15} & \\lambda_{25}\\\\ \\lambda_{16} & \\lambda_{26}\\\\ \\end{bmatrix}'+\\begin{bmatrix} \\theta_{11} & 0 & 0 & 0 & 0 & 0\\\\ 0 & \\theta_{22} & 0 & 0 & 0 & 0\\\\ 0 & 0 & \\theta_{33} & 0 & 0 & 0\\\\ 0 & 0 & 0 & \\theta_{44} & 0 & 0\\\\ 0 & 0 & 0 & 0 & \\theta_{55} & 0\\\\ 0 & 0 & 0 & 0 & 0 & \\theta_{66} \\end{bmatrix} \\end{aligned} Figure 6: Exploratory Factor Analysis Two Latent Factors Six Observed Variables Principal components analysis (PCA) similar exploratory factor analysis (EFA) finds latent factors covariances among observed variables. underlying model PCA differs EFA indicators formative rather reflective. principal components fully determined observed variables, error term. , act weighted summaries observed variables. general, PCA creates latent variables better summarize observed data, EFA creates latent variables better approximate underlying structure data. Figure 7: path diagram principal components analysis model Figure 8 shows primary ingredients latent variable model. Latent variables observed directly inferred correlations among observed variables. Latent variables displayed circles ellipses. variances depicted curved double-headed arrows circle back latent variable. observed variables latent variables inferred called indicator variables. direct effects latent variable indicators called loadings. variability indicator variables explained latent variables explained latent residuals (AKA errors). residual variance. path diagrams, residual variances affixed directly observed variables, residual variables omitted. Figure 8: latent variable three observed indicators three latent error terms. Figure 9: structural equation path diagram Figure 10, model Figure 9 displayed showing variance proportions. observed latent variables area 1. residual effects areas proportional variances. pie wedges endogenous latent variables stacked bars observed variables areas equal variance portions source variables. Figure 10: Latent variable path diagram variables scaled variance sizes. Pie wedges stacked bars display variance proportions source variables color. Figure 11 demonstration ggdiagram can used creating complex models eye aesthetics. Figure 11: hierarchical model cognitive abilities Cattell-Horn-Carroll tradition (Schneider & McGrew, 2018) independence assumption multiple regression requires regression errors independent . data clustered way violates assumption, multilevel model can account within-cluster similarity data (.e., intraclass correlation). multilevel models displayed equations like : Level 1Yij=β0j+β1jX1ij+β2jX2ij+eijσe2=var(e)Level 2β0j=γ00+γ01W1j+u0jβ1j=γ10+γ11W1j+u1jβ2j=γ20+γ21W1j+u2j𝛕=cov(u)=[τ00τ01τ02τ01τ11τ12τ02τ12τ22] \\begin{aligned} \\text{Level 1}\\\\ Y_{ij}&=\\beta_{0j}+\\beta_{1j}X_{1ij}+\\beta_{2j}X_{2ij}+e_{ij}\\\\ \\sigma_e^2&=\\text{var}\\left(e\\right)\\\\ \\text{Level 2}\\\\ \\beta_{0j} &= \\gamma_{00} + \\gamma_{01}W_{1j} + u_{0j}\\\\ \\beta_{1j} &= \\gamma_{10} + \\gamma_{11}W_{1j} + u_{1j}\\\\ \\beta_{2j} &= \\gamma_{20} + \\gamma_{21}W_{1j} + u_{2j}\\\\ \\mathbf{\\tau} &=\\text{cov}\\left(u\\right)\\\\ &=\\begin{bmatrix} \\tau_{00} & \\tau_{01} & \\tau_{02}\\\\ \\tau_{01} & \\tau_{11} & \\tau_{12}\\\\ \\tau_{02} & \\tau_{12} & \\tau_{22} \\end{bmatrix} \\end{aligned} outcome (Y), 2 level-1 predictors (X1 X2), 1 level-2 predictor (W1). random intercept (β0j) fixed component (γ00 + γ01W1j) random component (u0j). random intercept partly predicted level-2 variable, W1j. random slopes also fixed random components, well predicted level-2 variable. τ matrix variance-covariance matrix level-2 random variables u (.e., u0j, u1j, u1j). equations specify model unambiguously, easy lose one’s way . can facilitate interpretation equations presented visual mode. Curran & Bauer (2007) developed set extensions path diagrams incorporate random slopes intercepts multilevel models. core innovation treat random slopes intercepts latent variables sit atop direct paths. example approach Figure 12. displays information equations listed previously, terms easier understand use. Figure 12: path diagram multilevel model","code":"ggdiagram(font_family = my_font, font_size = 16) +   {lv <- ob_circle(label = \"Latent<br>Variable\")} +   {r <- ob_rectangle(width = sqrt(pi),                   height = sqrt(pi),                   label = \"Observed<br>Variable\") |>     place(lv, \"right\", .5)} +   {i <- ob_circle(n = 3,                 radius = 1.25,                 label = \"Mean/<br>Intercept\") |>      place(r, \"right\", .3) + ob_point(0, -.25)} ggdiagram(font_family = my_font, font_size = 16) +   {this <- ob_circle(label = ob_label(\"This\", size = 40))} +   {that <- ob_circle(label = ob_label(\"That\", size = 40)) |>     place(this, \"right\")} +   connect(this, that, label = \"Causes\", resect = 2) +   {A <- this |>      place(this, \"below\")} +   {B <- that |>      place(that, \"below\")} +   ob_covariance(A, B, label = ob_label(\"Correlates with\", vjust = 0), arrowhead_length = 7) observed <- redefault(   ob_ellipse,    m1 = 15) lb_observed <- redefault(   ob_label,    size = 48,    nudge_y = -.15,    fill = NA) direct <- redefault(   connect,    resect = 2) lb_direct <- redefault(   ob_label,    angle = 0,    position = .47)  ggdiagram(font_family = my_font, font_size = 16) +    {X <- observed(label = lb_observed(\"X\"))} +   {Y <- observed(label = lb_observed(\"Y\")) |>      place(X,where = \"right\")} +   direct(X,Y) ln_color <- \"gray40\" lb_color <- \"gray20\"  # Observed variable, label, and variance observed <- redefault(ob_ellipse,                       a = .6,                       m1 = 10,                       color = ln_color)  lb_observed <- redefault(ob_label,                          size = 40,                          nudge_y = -.07,                          color = lb_color)  var_observed <- redefault(ob_variance,                           bend = -25,                            looseness = 1.5,                           color = ln_color)    # Error variable, label, and variance  error <- redefault(ob_circle, color = ln_color, radius = .5)   lb_error <- redefault(ob_label,                        size = 18,                        color = lb_color)  var_error <- redefault(ob_variance,                         looseness = 1.8,                        theta = degree(60),                        where = \"east\",                        color = ln_color)  covariance <- redefault(   ob_covariance,   color = ln_color,   bend = 45,   linewidth = .5,   arrowhead_length = 7,   looseness = 1.2 )  # Direct Effect and label direct <- redefault(connect, resect = 2, color = ln_color)  lb_direct <- redefault(   ob_label,   size = 16,   color = lb_color,   angle = 0,   vjust = .5,   position = .46 )  ggdiagram(font_family = my_font, font_size = 16) +   # Predictor Variable   {X <- observed(label = lb_observed(\"*X*\"))} +   # Predicted Value   {Yhat <- observed(label = lb_observed(\"*Ŷ*\")) |>      place(X, \"right\", sep = 2)} +   # Outcome Variable   {Y <- observed(     label = lb_observed(\"*Y*\")) |>      place(Yhat, \"right\", sep = .75)} +   # Error   {e <- error(label = lb_observed(\"*e*\", nudge_y = 0)) |>      place(Y, \"right\", sep = .75)} +   # Error Variances and labels   {sigma_x <- var_observed(X, where = \"west\")} +   {sigma_e <- var_error(e, where = \"east\")} +   ob_latex(tex = c(     r\"(\\text{\\emph{σ}}^{\\text{2}}_{\\mkern-1.5mu\\text{\\emph{X}}})\",      r\"(\\text{\\emph{σ}}^{\\text{2}}_{\\mkern-1.5mu\\text{\\emph{e}}})\"),      color = lb_color,     center = bind(c(sigma_x, sigma_e))@midpoint(),      width = .4,      family = my_font) +   # Mean / Intercept   {i <- ob_intercept(     center = ob_polar(theta = degree(60),                        distance(X@center,Yhat@center)) +        ob_point(0,-.2),     width = 1.2,     radius = unit(2, \"pt\"),     fill = NA,      linewidth = .5,     color = ln_color,      label = lb_observed(1, size = 30, nudge_y = 0))} +   # Direct paths   direct(X, Yhat, label = lb_direct(\"*b*~1~\")) +    direct(i, X,  label = lb_direct(\"*&mu;~X~*\")) +   direct(i, Yhat, label = lb_direct(\"*b*~0~\")) +   direct(Yhat,Y) +   direct(e, Y) ggdiagram(font_family = my_font, font_size = 16) +    {x1 <- observed()     x2 <- observed() |>      place(x1, \"below\", sep = 2.25)     x3 <- observed() |>      place(midpoint(x1@point_at(\"east\"),                    x2@point_at(\"east\")),            \"right\")     x4 <- observed() |>      place(x3, \"right\", sep = 1.5)    x <- bind(c(x1, x2, x3, x4))} +   lb_observed(paste0(\"*X*~\",1:4,\"~\"), x@center) +    {pred <-    bind(c(x2, x1, x3, x1, x2))    outcome <- bind(c(x3, x3, x4, x4, x4))    direct(pred,outcome,            label = lb_direct(             label = c(\"*b*~23~\",                       \"*b*~13~\",                       \"*b*~34~\",                       \"*b*~14~\",                       \"*b*~24~\")))} +   {endogenous <- bind(c(x3,x4))    e <- error(label = lb_error(paste0(\"*e*~\", 3:4, \"~\"))) |>      place(from = endogenous,            where = c(\"left\", \"right\"),           sep = .5)} +    direct(e, endogenous) +   covariance(x2@point_at(\"west\"),               x1@point_at(\"west\"),              label = lb_direct(\"*r*~12~\", position = .5)) my_fills <- viridis::viridis(n = 3, begin = .3, end = .6) |>    class_color() |>    set_props(saturation = .6, brightness = .5) |>    c()  ggdiagram(font_family = my_font, font_size = 16) +   {x <- ob_array(ob_ellipse(m1 = 8,                                 color = NA,                                fill = my_fills[2]),                      k = 6,                      sep = .25)} +   ob_label(label = paste0(\"*X*~\",1:6, \"~\"),            center = x@center,            size = 20,            fill = NA,            nudge_y = -.1,            color = \"white\") +   {f1 <- ob_circle(radius = x[1:2]@bounding_box@width / 2,                     fill = my_fills[1],                    color = NA,                    label = ob_label(                      \"*f*~1~\",                       size = 48,                      nudge_y = -.2,                      fill = NA,                       color = \"white\")) |>      place(from = midpoint(x[1], x[2]),            where = \"above\",            sep = x[1:4]@bounding_box@width)} +   {f2 <- ob_circle(radius = x[5:6]@bounding_box@width / 2,                     fill = my_fills[3],                    color = NA,                    label = ob_label(                      \"*f*~2~\",                       size = 48,                      nudge_y = -.2,                      fill = NA,                       color = \"white\")) |>      place(midpoint(x[5], x[6]),            where = \"above\",            sep = x[1:4]@bounding_box@width)} +   {f1x <- connect(f1,                    x@point_at(\"top\"),                    resect = 2,                    color = my_fills[1])} +    {f2x <- connect(f2,                    x@point_at(\"top\"),                    resect = 2,                    color = my_fills[3])} +   {a <- intersection(f1@tangent_at(45), f2@tangent_at(135))    ob_arc(center = a,            radius = distance(a, f1@point_at(45)),            start = (f1@point_at(45) - a)@theta,            end = (f2@point_at(135) - a)@theta,           color = my_fills[2],           resect = 2,            linewidth = .5,           arrowhead_length = 7,           arrow_head = arrowheadr::arrow_head_deltoid(),           arrow_fins = arrowheadr::arrow_head_deltoid(),           label = ob_label(\"&phi;~12~\",                            color = my_fills[2],                            vjust = .5,                            size = 14))} +   {ob_label(paste0(\"*&lambda;*~2\", 1:6, \"~\"),              intersection(f1x[6] + ob_point(1.2,0), f2x),              size = 14,             label.padding = margin(),             color = my_fills[3])} +   {ob_label(paste0(\"*&lambda;*~1\", 1:6, \"~\"),              intersection(f2x[1] + ob_point(-1.2,0), f1x),              size = 14,             label.padding = margin(t = 2, l = 2),             color = my_fills[1])} +   ob_variance(     x = f1,     color = my_fills[1],     label = ob_label(\"&phi;~11~\", color = my_fills[1], size = 14)   ) +   ob_variance(     x = f2,     color = my_fills[3],     label = ob_label(\"&phi;~22~\", color = my_fills[3], size = 14)   ) +   {u <- ob_circle(     radius = .75,     color = NA,     fill = my_fills[2],     alpha = .5,     label = ob_label(       paste0(\"*u*~\", 1:6, \"~\"),       fill = NA,       color = \"white\",       size = 14     )   )@place(x, \"below\", sep = 1.2)} +   connect(u, x, color = my_fills[2], resect = 2) +   ob_variance(     u,     where = \"south\",     color = my_fills[2],     theta = 65,     looseness = 2.3,     label = ob_label(       paste0(\"*&theta;*~\", 1:6 * 11, \"~\"),       color = my_fills[2],       label.margin = margin(),       size = 12     )   ) ggdiagram(font_family = my_font) +   # observed variables   {o <- ob_ellipse(m1 = 10, a = .6, color = NA) |>       ob_array(5, sep = .2, fill = class_color(my_fills[2])@lighten(seq(.6, .9, length.out = 5)))} +   # principal components   {pc <- ob_circle(fill = my_fills[c(1,3)], color = NA) |>      place(o[c(2, 4)], \"above\", 2)} +   # direct effects from o to pc   map(     unbind(pc), \\(pci) {       connect(x = o@point_at(\"north\"),                y = pci,                color = pci@fill,               resect = 2)@geom()     }   ) +   # covariances among observed variables   map(1:4, \\(i) {     offset <- c(-1.5, -.5, .5, 1.5) * .11     ob_covariance(       x = o[seq(i + 1, 5)]@point_at(\"south\") +          ob_point(offset[seq(1, 5 - i)], 0),       y = o[i]@point_at(\"south\") +          ob_point(-offset[seq(1, 5 - i)], 0),       bend = 45,       looseness = 1.4,       linewidth = .5,        arrowhead_length = 6,       color = my_fills[2]     )@geom()   }) +    # Labels   ob_label(\"Formative<br>Indicators\", size = 16, fill = NA) |>      place(o@bounding_box@east, sep = .8) +    ob_label(\"Principal<br>Components\", size = 24, fill = NA) |>      place(pc@bounding_box@east, sep = 1.3) +   # Invisible point to prevent label from clipping   ob_point(o@bounding_box@east@x + 1.2, 1, color = \"white\") ggdiagram(font_family = my_font, font_size = 16) +   # Place a latent variable at the top   {l1 <- ob_circle(radius = 2)} +   # Place an array of observed variables below the circle   {o3 <- ob_ellipse(m1 = 9) |>      place(from = l1,            where = \"below\",            sep = 2) |>      ob_array(       k = 3,       where = 0,       sep = .4)} +   # Connect the latent to the observed variables at the north anchor point   {l1_o3 <- connect(l1,                      o3@point_at(\"north\"),                      resect = 2)} +    # Place error terms below each observed variable   {e3 <- ob_circle(radius = .75) |>     place(o3,           where = \"below\",           sep = .85)} +   # Connect the error terms to the observed variables   {e3_o3 <- connect(e3, o3, resect = 2)} +   # latent variance1   {v_l1 <- ob_variance(l1, where = \"north\")} +   # label(1, v_l1@midpoint()) +    {v_e3 <- ob_variance(     e3,     where = \"south\",     looseness = 1.4,     resect = unit(3, \"pt\"),     arrowhead_length = unit(7, \"pt\"),      arrow_head = arrowheadr::arrow_head_deltoid(2.4),     arrow_fins = arrowheadr::arrow_head_deltoid(2.4))} +   {lb_indicator <- ob_label(\"Indicator<br>Variables\",                              color = \"black\") |>     place(o3[1]@point_at(\"west\"), \"west\", sep = 1.2)} +    ob_point(-5, 0, color = \"white\") +   ob_label(\"Loadings\",             lb_indicator@center %|-% midpoint(l1, o3@bounding_box)) +    ob_label(\"Residuals\",             lb_indicator@center %|-% e3@bounding_box@center) +    ob_label(\"Latent<br>Variable\", lb_indicator@center %|-% l1) +    ob_label(\"Latent<br>Variance\",             lb_indicator@center %|-% l1@normal_at(              \"north\",               distance = .5)) +    ob_label(\"Residual<br>Variances\",             lb_indicator@center %|-% e3[1]@normal_at(              \"south\",               distance = .5)) my_fills <- viridis::viridis(n = 3, begin = .3, end = .6) |>    class_color() |>    set_props(saturation = .6, brightness = .5) |>    c()  my_path_color <- \"gray40\" my_resect <- 1 broad <- c(\"Gv\", \"Gf\", \"Gc\") my_arrowhead <- arrowheadr::arrow_head_deltoid(2.5)  g2broad <- c(Gv = .84, Gf = .95, Gc = .80)  broad2indicator <- list(Gv = c(.78, .84, .91),                         Gf = c(.88, .81, .74),                         Gc = c(.74, .91, .93))  broad_variance <- 1 - g2broad ^ 2  latent <- redefault(ob_circle,                      color = NA)    lb_latent <- redefault(ob_label,                              size = 30,                              fill = NA,                              color = \"white\")  observed <- redefault(ob_ellipse,                             a = .5,                             b = .5,                             m1 = 10,                             # fill = my_fill,                            color = NA)  lb_observed <- redefault(   ob_label,    size = 15,    fill = NA,    color = \"white\",   nudge_y = -.04)  direct <- redefault(   connect,   resect = my_resect,   color = my_path_color,   arrow_head = my_arrowhead,   linewidth = .5,   length_head = 6 )  lb_direct <- redefault(   ob_label,   size = 16,   color = lb_color,   angle = 0,   vjust = .5,   position = .46,   label.padding = margin(t = 3, r = 2, b = 0, l = 2, unit = \"pt\") )  var_latent <- redefault(   ob_variance,    theta = 40,   resect = my_resect,   color = my_path_color,    looseness = .9,    linewidth = .5,   arrow_head = my_arrowhead,   arrow_fins = my_arrowhead,   arrowhead_length = 6)  lb_variance <- redefault(   lb_direct,   position = .5,   straight = TRUE )  ggdiagram(font_family = my_font, font_size = 16) +   {g <- latent(label = lb_latent(\"*g*\"), fill = \"gray15\")} +    var_latent(g, label = lb_variance(1)) +   {Gx <- place(g, g,where = \"below\", sep = 1.6) |>      ob_array(k = 3,                  sep = 2,                  label = lb_latent(broad,                                    vjust = .6),                 fill = my_fills)} +   var_latent(Gx,               where = \"left\",               color = Gx@fill,              label = lb_variance(                round_probability(broad_variance,                                   phantom_text = \".\"),                color = Gx@fill)) +   {pGx <- direct(g, Gx, color = Gx@fill)} +   {lb_direct(     label = round_probability(g2broad,                                phantom_text = \".\"),      center = pGx@line@point_at_y(pGx[2]@midpoint(       position = .47)@y),     color = Gx@fill)} +   # list----   {vv <- map_ob(Gx, \\(b) {     o1 <- place(observed(fill = b@fill),                  from = b,                  where = \"south\",                 sep = 1.6)          o <- ob_array(       o1,       k = 3,        sep = .2,       fill = purrr::map_chr(c(.6, .75, .9), tinter::lighten, x = o1@fill),       label = lb_observed(         paste0(           b@label@label,            \"~\",            1:3,            \"~\")))     p <- direct(b, o@point_at(\"north\"), color = b@fill)          l <- lb_direct(       round_probability(         broad2indicator[[b@label@label]],         phantom_text = \".\"),        center = p@line@point_at_y(p[2]@midpoint(position = .47)@y),       color = b@fill)          v <- ob_variance(       o,       where = \"south\",       bend = -15,       looseness = 1.7,       resect = my_resect,       color = b@fill,       theta = 70,       linewidth = .5,       label = lb_variance(         round_probability(sqrt(1 - broad2indicator[[b@label@label]] ^ 2)),         color = b@fill),       arrow_head = my_arrowhead,       arrow_fins = my_arrowhead,       arrowhead_length = 6     )     c(o, p, v, l)   }) } ggdiagram(font_family = my_font, font_size = 13) +   {g <- latent(label = lb_latent(\"*g*\"),                 fill = \"gray15\",                 radius = sqrt(1 / pi))} +    {Gx <- place(g, g,where = \"below\", sep = 1.2) |>      ob_array(k = 3,                  sep = 2.4,                  label = lb_latent(broad,                                    vjust = .6,                                   color = \"gray15\",                                   size = 28),                 fill = \"gray15\")} +   {d_Gx <- ob_circle(     color = NA,     fill = my_fills,     radius = sqrt(broad_variance / pi)) |>      place(Gx, where = \"left\", sep = .45)} +   direct(d_Gx,            Gx,            color = my_fills,            resect = 1) +   {pGx <- direct(g, Gx, color = Gx@fill, resect = 1)} +   {lb_direct(     label = round_probability(g2broad,                               phantom_text = \".\"),     center = pGx@line@point_at_y(pGx[2]@midpoint(       position = .46)@y),     color = Gx@fill)} +   ob_wedge(center = Gx@center,             radius = sqrt(1 / pi),            start = turn(.5) + turn(broad_variance) / 2,            end = turn(.5) - turn(broad_variance) / 2,            fill = my_fills) +    lb_latent(broad, center = Gx@center, vjust = .6) +   {map(1:3, \\(i) {     b <- Gx[i]     p2 <- place(ob_point(), from = b, where = \"south\", sep = 1.2)     p1 <- place(ob_point(), from = p2, where = \"left\", sep = 1.1)     p3 <- place(ob_point(), from = p2, where = \"right\", sep = 1.1)          p <- bind(c(p1,p2,p3))          b_text <- b@label@label          lb_o <- ob_label(paste0(b_text, \"~\", 1:3, \"~\"),                      center = p - ob_point(0,.55),                      color = \"white\",                       size = 20,                      fill = NA)                    b_p <- direct(b, p, color = my_fills[i], resect = 1)          l_b_p <- lb_direct(       round_probability(broad2indicator[[b_text]],                          phantom_text = \".\"),        center = b_p@line@point_at_y(b_p[2]@midpoint(.46)@y),       color = my_fills[i])          r_g <- ob_rectangle(       north = p,        fill = g@fill,       color = NA,       width = 1,        height = (g2broad[b_text] * broad2indicator[[b_text]]) ^ 2)          r_broad <- ob_rectangle(       north = r_g@south,        fill = my_fills[i],       width = 1,        color = NA,       height = (sqrt(broad_variance[b_text]) * broad2indicator[[b_text]]) ^ 2)          error_variance <- 1 - broad2indicator[[b_text]] ^ 2          error_color <- class_color(my_fills[i])@lighten(.5)@color          r_unique <- ob_rectangle(       north = r_broad@south,        fill = error_color,       width = 1,        color = NA,       height = error_variance)          r <- sqrt(error_variance / pi)          error <- ob_circle(r_unique@south - ob_point(0, r + .45), radius = r, color = NA, fill = error_color)          error2observed <- direct(error, r_unique, resect = 1, color = error_color)          list(r_g,           r_broad,           r_unique,           b_p,           l_b_p,           error,           error2observed,           lb_o) |>        lapply(as.geom)   })} my_serif_font <- \"Equity Text A\" str_narrow <- \"Narrow Abilities\" str_tests <- \"Tests\" str_specifics <- \"Specifics\"  # gradient fills black_gradient <- grid::radialGradient(   colours = rev(c(\"gray50\", \"gray2\", \"gray2\")),    stops = c(0, .35, 1)) black_gradient_rev <- grid::radialGradient(   colours = c(\"gray50\", \"black\"))  ggdiagram(font_family = my_serif_font, font_size = 16) +   {g <- ob_circle(       radius = 1.33,       fill = NA,       color = NA     )} +    geom_polygon(     aes(x = x, y = y),      data = ob_circle(radius = 9)@polygon,      color = NA,     fill = black_gradient) +   geom_polygon(     aes(x = x, y = y),      data = g@polygon,     color = NA,      fill = black_gradient_rev) +   {broad_angle <- turn(seq(0, 1, length.out = 9)[-9] + 1 / 16)     broad_color <- hcl(      h = seq(0, 360 - 360 / 8, 360 / 8) + 20,       c = 55,       l = 60)     broad <- ob_circle(       color = NA,        fill = broad_color) |>       place(         from = g,          where = broad_angle,          sep = 1.15)} +    ob_label(         \"*g*\",         color = \"gray90\",         fill = NA,         size = 60,         vjust = .4,         family = my_serif_font       ) +   connect(g, broad,            color = broad_color,            resect = 1,            linewidth = .75,            length_head = 5) +   purrr::map(unbind(broad), \\(b) {     geom_polygon(       data = b@polygon,        aes(x = x, y = y),        fill = grid::radialGradient(         colours = c(tinter::lighten(b@fill, .4),                      tinter::lighten(b@fill, .8)),          stops = c(0,1)))}) +   ob_label(     c(\"Ga\", \"Gc\", \"Gf\", \"Gv\", \"Gs\", \"Gr\", \"Gl\", \"Gwm\"),     broad@center + ob_point(0, -.05),     fill = NA,     family = my_serif_font,     size = 20,     vjust = .55,     angle = broad@center@theta + degree(-90 * sign(broad@center@theta@turn)),     color = \"gray20\"   ) +   ob_path(     broad |>        set_props(radius = c(rep(.66, 4), rep(.59, 4))) |>        unbind() |>        purrr::map(\\(x) {         x@point_at(x@center@theta + degree(seq(-90, 90, 10)))         }),     color = \"gray20\",     alpha = 0,     label = ob_label(       c(\"Auditory\",          \"Knowledge\",          \"Fluid\",          \"Visual-Spatial\",          \"Speed\",          \"Fluency\",          \"Efficiency\",          \"Memory\"),       fill = NA,       family = my_serif_font,       vjust = 1,       size = 9.5,       spacing = 100)) +   ob_path(     broad |>        set_props(radius = c(rep(.59, 4), rep(.66, 4))) |>        unbind() |>        purrr::map(\\(x) {         x@point_at(           x@center@theta + degree(-180) + degree(seq(-90, 90, 10)))}),     label = ob_label(       c(\"Processing\",          \"Comprehension\",          \"Reasoning\",          \"Processing\",          \"Processing\",          \"Retrieval\",          \"Learning\",          \"Working\"),             fill = NA,             family = my_serif_font,             vjust = 1,       size = 9.5,             spacing = 100           ),           color = \"gray20\",           alpha = 0   ) +   {narrow <- ob_circle(     radius = .45,      fill = rep(broad@fill, each = 5)     ) |>     place(from = g,            where = degree(seq(0, 360 - 360/40, 360/40) + 360/80),            sep = 4.3)          geom_polygon(       aes(x = x,           y = y,            group = group,            fill = fill),       data = narrow@polygon,       color = NA)} +    {purrr::imap(unbind(broad), \\(x, idx) {     connect(x, narrow[(idx - 1) * 5 + 1:5],              color = tinter::lighten(x@fill, .5),              linewidth = .5,             length_head = 6,             resect = 1) |>        as.geom()   })} +   {test_theta <- degree(seq(0, 360 - 360/120, 360/120) + 360/240)     tests <- ob_ellipse(       a = .18,           m1 = 8,       angle = test_theta,       color = NA,       fill = rep(tinter::lighten(broad@fill, .2), each = 15)) |>       place(from = g, where = test_theta, sep = 6.2)} +   {specifics <- ob_circle(     radius = .2,      angle = test_theta,      color = NA,      fill = rep(tinter::lighten(broad@fill, .15), each = 15)) |>      place(from = g, where = test_theta, sep = 7.0)} +   connect(specifics, tests,            color = specifics@fill,            linewidth = .3,           length_head = 6,            resect = .5) +   {purrr::imap(unbind(narrow), \\(x, idx) {     connect(x, tests[(idx - 1) * 3 + 1:3],              color = tinter::lighten(x@fill, .5),              resect = 1,              linewidth = .3,             length_head = 6) |>        as.geom()   })} +   scale_fill_manual(     values = map(broad@fill,                   \\(fill) {                     grid::radialGradient(c(tinter::lighten(fill, .15),                                            tinter::lighten(fill, .4)),                                          stops = c(0.2, 1),                                          group = F)}) |>        `names<-`(broad@fill)) +   theme(legend.position = \"none\") +   ob_label(     label = rev(strsplit(str_narrow, split = character(0))[[1]]),     center = narrow[seq(nchar(str_narrow)) + 2]@center,     angle = narrow[seq(nchar(str_narrow)) + 2]@center@theta - degree(90),     fill = NA,     family = my_serif_font,     size = 16,     color = \"gray30\",     vjust = .55   ) +   ob_label(     label = strsplit(str_narrow, split = character(0))[[1]],     center = narrow[seq(nchar(str_narrow)) + 22]@center,     angle = narrow[seq(nchar(str_narrow)) + 22]@center@theta + degree(90),     fill = NA,     family = my_serif_font,     size = 16,     color = \"gray30\",     vjust = .55   ) +   {purrr::map(65 + c(0,15, 30, 45), \\(x) {     ob_label(       label = strsplit(str_tests, split = character(0))[[1]],       center = tests[seq(nchar(str_tests)) + x]@center,       angle = tests[seq(nchar(str_tests)) + x]@center@theta + degree(90),       fill = NA,       family = my_serif_font,       size = 10,       color = \"gray30\",       vjust = .57     )@geom()   })} +   {purrr::map(5 + c(0,15, 30, 45), \\(x) {     ob_label(       label = rev(strsplit(str_tests, split = character(0))[[1]]),       center = tests[seq(nchar(str_tests)) + x]@center,       angle = tests[seq(nchar(str_tests)) + x]@center@theta - degree(90),       fill = NA,       family = my_serif_font,       size = 10,       color = \"gray30\",       vjust = .57     )@geom()})} +   {purrr::map(63 + c(0,15, 30, 45), \\(x) {     ob_label(       label = strsplit(str_specifics, split = character(0))[[1]],       center = specifics[seq(nchar(str_specifics)) + x]@center,       angle = specifics[seq(nchar(str_specifics)) + x]@center@theta + degree(90),       fill = NA,       family = my_serif_font,       size = 9,       color = \"gray30\",       vjust = .53     )@geom()})} +   {purrr::map(3 + c(0,15, 30, 45), \\(x) {     ob_label(       label = rev(strsplit(str_specifics, split = character(0))[[1]]),       center = specifics[seq(nchar(str_specifics)) + x]@center,       angle = specifics[seq(nchar(str_specifics)) + x]@center@theta - degree(90),       fill = NA,       family = my_serif_font,       size = 9,       color = \"gray30\",       vjust = .53     )@geom()})} clr <-   class_color(   c(\"#976A85\",     \"#7385A1\",     \"#4E9C9B\",     \"#66AB7A\",     \"#A4AF5A\"))@darken(.3)@color  clr <- c(\"#6B4B5E\", \"#515E72\", \"#376E6E\", \"#487956\", \"#747C3F\")  intercept <- function(center = ob_point(),                       r = 1,                       vertex_radius = unit(.6, \"mm\"),                       fill = clr[1],                       color = NA,                       ...) {   p <- purrr::map(unbind(center), \\(cc) {     cc + ob_polar(degree(c(90, 210, 330)), r = r)   })   ob_polygon(p,              vertex_radius = vertex_radius,              fill = fill,              color = color,              ...) }  observed <- redefault(ob_ellipse, m1 = 10, color = NA) lb_observed <- redefault(ob_label, fill = NA, color = \"white\", size = 24) lb_slope <- redefault(ob_label, fill = NA, color = \"white\", size = 18)  random_slope <- redefault(ob_circle, color = NA, radius = .5) tau_covariance <- redefault(ob_covariance,                              linewidth = .5,                              head_length = 4,                              resect = 1)  ggdiagram(font_family = my_font, font_size = 13) +    {i1 <- intercept(label = ob_label(     label = \"1~1~\",      color = \"white\",     fill = NA,     size = 24),     fill = clr[1])} +   {x1 <- observed(label = lb_observed(\"*X*~1*ij*~\"),                    fill = clr[2]) |>     place(bind(i1@segment)@midpoint()[2], \"below\", 1.5)} +    {x2 <- observed(label = lb_observed(\"*X*~2*ij*~\"),                   fill = clr[3]) |>      place(x1, \"below\", 1.5)} +    {y = observed(label = lb_observed(\"*Y*~*ij*~\"),                 fill = clr[4]) |>      place(x1, \"right\", sep = 9)} +    {i1_y <- connect(i1, y, resect = 2, color = clr[1])} +    {x1_y <- connect(x1, y, resect = 2, color = clr[2])} +    {x2_y <- connect(x2, y, resect = 2, color = clr[3])} +   {latent_slope_line <- ob_line(slope = -.8, intercept = 1.3)   b0j <- random_slope(     intersection(latent_slope_line, i1_y),     fill = clr[1],     label = lb_slope(\"*&beta;*~0*j*~\")   )} +   {b1j <- random_slope(     intersection(latent_slope_line, x1_y),     fill = clr[2],     label = lb_slope(\"*&beta;*~1*j*~\"))} +   {b2j <- ob_circle(     intersection(latent_slope_line, x2_y),     radius = .5,     fill = clr[3],     color = NA,     label = lb_slope(\"*&beta;*~2*j*~\")   )} +   {i2 <- intercept(width = 2,     rotate(latent_slope_line, degree(90), origin = b0j@center)@point_at_x(b1j@center@x),     label = lb_observed(\"1~2~\")   )} +   {w1 <- observed(     center = i2@center %-|% y@center,     label = lb_observed(\"*W*~1*j*~\"),     fill = clr[5]   )} +   {b <- bind(c(b0j, b1j, b2j))    i2b <- connect(      i2,      b,      color = i2@fill,      resect = 2,      label = ob_label(        paste0(\"*&gamma;*~\", 0:2, \"0~\"),        angle = 0,        size = 16      )   )} +   {w1b <- connect(     w1,     b,     color = w1@fill,     resect = 2,     label = ob_label(       paste0(\"*&gamma;*~\", 0:2, \"1~\"),       angle = 0,       size = 16     )   )} +   {u <- ob_circle(     radius = .4,     color = NA,     fill = b@fill,     label = ob_label(       paste0(\"*u*~\", 0:2, \"*j*~\"),       color = \"white\",       fill = NA,       size = 14     )   ) |> place(b, \"southwest\", .5)} +    connect(     u,     b,     color = b@fill,     resect = 1,     length_head = 4,     linewidth = .5   ) +   tau_covariance(     u[2],     u[1],     color = mean_color(clr[c(1, 2)]),     label = ob_label(\"*&tau;*~01~\",                       color = mean_color(clr[c(1, 2)]))   ) +   tau_covariance(     u[3],     u[2],     color = mean_color(clr[c(2, 3)]),     label = ob_label(\"*&tau;*~12~\", color = mean_color(clr[c(2, 3)]))   ) +   tau_covariance(     u[3]@point_at(210),     u[1]@point_at(260),     color = mean_color(clr[c(1, 3)]),     label = ob_label(\"*&tau;*~02~\", color = mean_color(clr[c(1, 3)])),     bend = 10   ) +    ob_variance(     u,     color = u@fill,     \"east\",     linewidth = .5,     looseness = 1.9,     bend = 5,     arrowhead_length = 4,     resect = 1,     label = ob_label(       paste0(\"*&tau;*~\", 0:2, 0:2, \"~\"),       label.margin = margin(),       label.padding = margin(),       color = b@fill     ),     theta = 60   ) +   {e <- ob_circle(radius = .6, fill = y@fill, color = NA, label = lb_observed(\"*e~ij~*\")) |> place(y, \"right\", .9)} +   connect(e, y, color = y@fill, resect = 2) +   {e_var <- ob_variance(e, \"east\", color = e@fill, looseness = 1.7)} +   ob_latex(r\"(\\text{\\emph{σ}}^{\\text{2}}_{\\mkern-1.5mu\\text{\\emph{e}}})\", e_var@midpoint(), width = .45, family = \"Roboto Condensed\", filename = \"sigma_e_2\", color = e@fill)"},{"path":"https://wjschne.github.io/ggdiagram/articles/causalpaths.html","id":"path-models-for-regression","dir":"Articles","previous_headings":"","what":"Path Models for Regression","title":"Path Diagrams","text":"regression model can stated simply: X predicts Y. time, relationship can stated simplified path diagram like Figure 3. Figure 3: Simplified path diagram regression model simple statement skips large number details, can filled . predictor, X random variable unknown distribution FX. mean μX standard deviation σX. X∼FX(x;μX,σX2)X\\sim F_X(x; \\mu_X,\\sigma^2_X) Regression takes X subjects linear transformation create variable Ŷ: Ŷ=b0+b1X\\hat{Y}=b_0+b_1X regression coefficients b0 b1 known intercept slope, respectively. Ŷ predicted value Y, given X. prediction error e difference actual value Y predicted value Ŷ: e=Y−Ŷe=Y-\\hat{Y} prediction error assumed normally distributed standard deviation σe, known standard error estimate: e∼𝒩(0,σe2)e\\sim \\mathcal{N}(0,\\sigma^2_e) Putting together: Y=b0+b1X⏟Ŷ+eY=\\underbrace{b_0+b_1X}_{\\hat{Y}}+e can communicated succinctly path diagram Figure 4. Figure 4: Full path diagram regression model","code":"observed <- redefault(   ob_ellipse,    m1 = 15) lb_observed <- redefault(   ob_label,    size = 48,    nudge_y = -.15,    fill = NA) direct <- redefault(   connect,    resect = 2) lb_direct <- redefault(   ob_label,    angle = 0,    position = .47)  ggdiagram(font_family = my_font, font_size = 16) +    {X <- observed(label = lb_observed(\"X\"))} +   {Y <- observed(label = lb_observed(\"Y\")) |>      place(X,where = \"right\")} +   direct(X,Y) ln_color <- \"gray40\" lb_color <- \"gray20\"  # Observed variable, label, and variance observed <- redefault(ob_ellipse,                       a = .6,                       m1 = 10,                       color = ln_color)  lb_observed <- redefault(ob_label,                          size = 40,                          nudge_y = -.07,                          color = lb_color)  var_observed <- redefault(ob_variance,                           bend = -25,                            looseness = 1.5,                           color = ln_color)    # Error variable, label, and variance  error <- redefault(ob_circle, color = ln_color, radius = .5)   lb_error <- redefault(ob_label,                        size = 18,                        color = lb_color)  var_error <- redefault(ob_variance,                         looseness = 1.8,                        theta = degree(60),                        where = \"east\",                        color = ln_color)  covariance <- redefault(   ob_covariance,   color = ln_color,   bend = 45,   linewidth = .5,   arrowhead_length = 7,   looseness = 1.2 )  # Direct Effect and label direct <- redefault(connect, resect = 2, color = ln_color)  lb_direct <- redefault(   ob_label,   size = 16,   color = lb_color,   angle = 0,   vjust = .5,   position = .46 )  ggdiagram(font_family = my_font, font_size = 16) +   # Predictor Variable   {X <- observed(label = lb_observed(\"*X*\"))} +   # Predicted Value   {Yhat <- observed(label = lb_observed(\"*Ŷ*\")) |>      place(X, \"right\", sep = 2)} +   # Outcome Variable   {Y <- observed(     label = lb_observed(\"*Y*\")) |>      place(Yhat, \"right\", sep = .75)} +   # Error   {e <- error(label = lb_observed(\"*e*\", nudge_y = 0)) |>      place(Y, \"right\", sep = .75)} +   # Error Variances and labels   {sigma_x <- var_observed(X, where = \"west\")} +   {sigma_e <- var_error(e, where = \"east\")} +   ob_latex(tex = c(     r\"(\\text{\\emph{σ}}^{\\text{2}}_{\\mkern-1.5mu\\text{\\emph{X}}})\",      r\"(\\text{\\emph{σ}}^{\\text{2}}_{\\mkern-1.5mu\\text{\\emph{e}}})\"),      color = lb_color,     center = bind(c(sigma_x, sigma_e))@midpoint(),      width = .4,      family = my_font) +   # Mean / Intercept   {i <- ob_intercept(     center = ob_polar(theta = degree(60),                        distance(X@center,Yhat@center)) +        ob_point(0,-.2),     width = 1.2,     radius = unit(2, \"pt\"),     fill = NA,      linewidth = .5,     color = ln_color,      label = lb_observed(1, size = 30, nudge_y = 0))} +   # Direct paths   direct(X, Yhat, label = lb_direct(\"*b*~1~\")) +    direct(i, X,  label = lb_direct(\"*&mu;~X~*\")) +   direct(i, Yhat, label = lb_direct(\"*b*~0~\")) +   direct(Yhat,Y) +   direct(e, Y)"},{"path":"https://wjschne.github.io/ggdiagram/articles/causalpaths.html","id":"path-diagrams-for-path-analysis","dir":"Articles","previous_headings":"","what":"Path Diagrams for Path Analysis","title":"Path Diagrams","text":"Path diagrams created Sewall Wright (1920) display path analyses—interconnected regression models sequences direct indirect relationships among variables. example, two regression equations combined make causal system shows variables X1–X4 interrelate. X3=b13X1+b23X2+e3X4=b14X1+b24X2+b34X3+e4 \\begin{aligned} X_3&=b_{13}X_1+b_{23}X_2+e_3\\\\ X_4&=b_{14}X_1+b_{24}X_2+b_{34}X_3+e_4 \\end{aligned} Figure 5: path diagram path analysis model","code":"ggdiagram(font_family = my_font, font_size = 16) +    {x1 <- observed()     x2 <- observed() |>      place(x1, \"below\", sep = 2.25)     x3 <- observed() |>      place(midpoint(x1@point_at(\"east\"),                    x2@point_at(\"east\")),            \"right\")     x4 <- observed() |>      place(x3, \"right\", sep = 1.5)    x <- bind(c(x1, x2, x3, x4))} +   lb_observed(paste0(\"*X*~\",1:4,\"~\"), x@center) +    {pred <-    bind(c(x2, x1, x3, x1, x2))    outcome <- bind(c(x3, x3, x4, x4, x4))    direct(pred,outcome,            label = lb_direct(             label = c(\"*b*~23~\",                       \"*b*~13~\",                       \"*b*~34~\",                       \"*b*~14~\",                       \"*b*~24~\")))} +   {endogenous <- bind(c(x3,x4))    e <- error(label = lb_error(paste0(\"*e*~\", 3:4, \"~\"))) |>      place(from = endogenous,            where = c(\"left\", \"right\"),           sep = .5)} +    direct(e, endogenous) +   covariance(x2@point_at(\"west\"),               x1@point_at(\"west\"),              label = lb_direct(\"*r*~12~\", position = .5))"},{"path":"https://wjschne.github.io/ggdiagram/articles/causalpaths.html","id":"path-diagrams-for-exploratory-factor-analysis","dir":"Articles","previous_headings":"","what":"Path Diagrams for Exploratory Factor Analysis","title":"Path Diagrams","text":"Exploratory factor analysis (EFA) assumes observed variables intercorrelate smaller number latent variables influence multiple observed variables. Figure 6, 6 observed variables x intercorrelate 2 latent factors f act common causes. EFA find loadings latent observed variables best account observed correlations among variables. portion observed variables independent latent factors. independent influences can thought uniquenesses u. Thus, structural model : x=Λf+u x=\\Lambda f+u  x vector observed variables, f vector latent factors, u vector latent uniquenesses, Λ matrix loadings quantify strength effects f x. observed variables x, latent factors f, uniquenesses u covariance matrices: Σ=cov(x)Φ=cov(f)Θ=cov(u) \\begin{aligned} \\Sigma&=\\text{cov}(x)\\\\ \\Phi&=\\text{cov}(f)\\\\ \\Theta&=\\text{cov}(u) \\end{aligned} model-implied covariance matrix observed variables function loading matrix Λ covariance matrices Φ Θ: Σ̂=ΛΦΛ′+Θ=[λ11λ21λ12λ22λ13λ23λ14λ24λ15λ25λ16λ26][ϕ11ϕ12ϕ12ϕ22][λ11λ21λ12λ22λ13λ23λ14λ24λ15λ25λ16λ26]′+[θ11000000θ22000000θ33000000θ44000000θ55000000θ66] \\begin{aligned} \\hat{\\Sigma}&=\\Lambda\\Phi\\Lambda'+\\Theta\\\\ &=\\begin{bmatrix} \\lambda_{11} & \\lambda_{21}\\\\ \\lambda_{12} & \\lambda_{22}\\\\ \\lambda_{13} & \\lambda_{23}\\\\ \\lambda_{14} & \\lambda_{24}\\\\ \\lambda_{15} & \\lambda_{25}\\\\ \\lambda_{16} & \\lambda_{26}\\\\ \\end{bmatrix}\\begin{bmatrix}\\phi_{11} & \\phi_{12}\\\\ \\phi_{12} & \\phi_{22}\\end{bmatrix}\\begin{bmatrix} \\lambda_{11} & \\lambda_{21}\\\\ \\lambda_{12} & \\lambda_{22}\\\\ \\lambda_{13} & \\lambda_{23}\\\\ \\lambda_{14} & \\lambda_{24}\\\\ \\lambda_{15} & \\lambda_{25}\\\\ \\lambda_{16} & \\lambda_{26}\\\\ \\end{bmatrix}'+\\begin{bmatrix} \\theta_{11} & 0 & 0 & 0 & 0 & 0\\\\ 0 & \\theta_{22} & 0 & 0 & 0 & 0\\\\ 0 & 0 & \\theta_{33} & 0 & 0 & 0\\\\ 0 & 0 & 0 & \\theta_{44} & 0 & 0\\\\ 0 & 0 & 0 & 0 & \\theta_{55} & 0\\\\ 0 & 0 & 0 & 0 & 0 & \\theta_{66} \\end{bmatrix} \\end{aligned} Figure 6: Exploratory Factor Analysis Two Latent Factors Six Observed Variables","code":"my_fills <- viridis::viridis(n = 3, begin = .3, end = .6) |>    class_color() |>    set_props(saturation = .6, brightness = .5) |>    c()  ggdiagram(font_family = my_font, font_size = 16) +   {x <- ob_array(ob_ellipse(m1 = 8,                                 color = NA,                                fill = my_fills[2]),                      k = 6,                      sep = .25)} +   ob_label(label = paste0(\"*X*~\",1:6, \"~\"),            center = x@center,            size = 20,            fill = NA,            nudge_y = -.1,            color = \"white\") +   {f1 <- ob_circle(radius = x[1:2]@bounding_box@width / 2,                     fill = my_fills[1],                    color = NA,                    label = ob_label(                      \"*f*~1~\",                       size = 48,                      nudge_y = -.2,                      fill = NA,                       color = \"white\")) |>      place(from = midpoint(x[1], x[2]),            where = \"above\",            sep = x[1:4]@bounding_box@width)} +   {f2 <- ob_circle(radius = x[5:6]@bounding_box@width / 2,                     fill = my_fills[3],                    color = NA,                    label = ob_label(                      \"*f*~2~\",                       size = 48,                      nudge_y = -.2,                      fill = NA,                       color = \"white\")) |>      place(midpoint(x[5], x[6]),            where = \"above\",            sep = x[1:4]@bounding_box@width)} +   {f1x <- connect(f1,                    x@point_at(\"top\"),                    resect = 2,                    color = my_fills[1])} +    {f2x <- connect(f2,                    x@point_at(\"top\"),                    resect = 2,                    color = my_fills[3])} +   {a <- intersection(f1@tangent_at(45), f2@tangent_at(135))    ob_arc(center = a,            radius = distance(a, f1@point_at(45)),            start = (f1@point_at(45) - a)@theta,            end = (f2@point_at(135) - a)@theta,           color = my_fills[2],           resect = 2,            linewidth = .5,           arrowhead_length = 7,           arrow_head = arrowheadr::arrow_head_deltoid(),           arrow_fins = arrowheadr::arrow_head_deltoid(),           label = ob_label(\"&phi;~12~\",                            color = my_fills[2],                            vjust = .5,                            size = 14))} +   {ob_label(paste0(\"*&lambda;*~2\", 1:6, \"~\"),              intersection(f1x[6] + ob_point(1.2,0), f2x),              size = 14,             label.padding = margin(),             color = my_fills[3])} +   {ob_label(paste0(\"*&lambda;*~1\", 1:6, \"~\"),              intersection(f2x[1] + ob_point(-1.2,0), f1x),              size = 14,             label.padding = margin(t = 2, l = 2),             color = my_fills[1])} +   ob_variance(     x = f1,     color = my_fills[1],     label = ob_label(\"&phi;~11~\", color = my_fills[1], size = 14)   ) +   ob_variance(     x = f2,     color = my_fills[3],     label = ob_label(\"&phi;~22~\", color = my_fills[3], size = 14)   ) +   {u <- ob_circle(     radius = .75,     color = NA,     fill = my_fills[2],     alpha = .5,     label = ob_label(       paste0(\"*u*~\", 1:6, \"~\"),       fill = NA,       color = \"white\",       size = 14     )   )@place(x, \"below\", sep = 1.2)} +   connect(u, x, color = my_fills[2], resect = 2) +   ob_variance(     u,     where = \"south\",     color = my_fills[2],     theta = 65,     looseness = 2.3,     label = ob_label(       paste0(\"*&theta;*~\", 1:6 * 11, \"~\"),       color = my_fills[2],       label.margin = margin(),       size = 12     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/causalpaths.html","id":"path-diagrams-for-principal-components-analysis","dir":"Articles","previous_headings":"","what":"Path Diagrams for Principal Components Analysis","title":"Path Diagrams","text":"Principal components analysis (PCA) similar exploratory factor analysis (EFA) finds latent factors covariances among observed variables. underlying model PCA differs EFA indicators formative rather reflective. principal components fully determined observed variables, error term. , act weighted summaries observed variables. general, PCA creates latent variables better summarize observed data, EFA creates latent variables better approximate underlying structure data. Figure 7: path diagram principal components analysis model","code":"ggdiagram(font_family = my_font) +   # observed variables   {o <- ob_ellipse(m1 = 10, a = .6, color = NA) |>       ob_array(5, sep = .2, fill = class_color(my_fills[2])@lighten(seq(.6, .9, length.out = 5)))} +   # principal components   {pc <- ob_circle(fill = my_fills[c(1,3)], color = NA) |>      place(o[c(2, 4)], \"above\", 2)} +   # direct effects from o to pc   map(     unbind(pc), \\(pci) {       connect(x = o@point_at(\"north\"),                y = pci,                color = pci@fill,               resect = 2)@geom()     }   ) +   # covariances among observed variables   map(1:4, \\(i) {     offset <- c(-1.5, -.5, .5, 1.5) * .11     ob_covariance(       x = o[seq(i + 1, 5)]@point_at(\"south\") +          ob_point(offset[seq(1, 5 - i)], 0),       y = o[i]@point_at(\"south\") +          ob_point(-offset[seq(1, 5 - i)], 0),       bend = 45,       looseness = 1.4,       linewidth = .5,        arrowhead_length = 6,       color = my_fills[2]     )@geom()   }) +    # Labels   ob_label(\"Formative<br>Indicators\", size = 16, fill = NA) |>      place(o@bounding_box@east, sep = .8) +    ob_label(\"Principal<br>Components\", size = 24, fill = NA) |>      place(pc@bounding_box@east, sep = 1.3) +   # Invisible point to prevent label from clipping   ob_point(o@bounding_box@east@x + 1.2, 1, color = \"white\")"},{"path":"https://wjschne.github.io/ggdiagram/articles/causalpaths.html","id":"path-diagrams-for-confirmatory-factor-analysis","dir":"Articles","previous_headings":"","what":"Path Diagrams for Confirmatory Factor Analysis","title":"Path Diagrams","text":"Figure 8 shows primary ingredients latent variable model. Latent variables observed directly inferred correlations among observed variables. Latent variables displayed circles ellipses. variances depicted curved double-headed arrows circle back latent variable. observed variables latent variables inferred called indicator variables. direct effects latent variable indicators called loadings. variability indicator variables explained latent variables explained latent residuals (AKA errors). residual variance. path diagrams, residual variances affixed directly observed variables, residual variables omitted. Figure 8: latent variable three observed indicators three latent error terms. Figure 9: structural equation path diagram Figure 10, model Figure 9 displayed showing variance proportions. observed latent variables area 1. residual effects areas proportional variances. pie wedges endogenous latent variables stacked bars observed variables areas equal variance portions source variables. Figure 10: Latent variable path diagram variables scaled variance sizes. Pie wedges stacked bars display variance proportions source variables color. Figure 11 demonstration ggdiagram can used creating complex models eye aesthetics. Figure 11: hierarchical model cognitive abilities Cattell-Horn-Carroll tradition (Schneider & McGrew, 2018)","code":"ggdiagram(font_family = my_font, font_size = 16) +   # Place a latent variable at the top   {l1 <- ob_circle(radius = 2)} +   # Place an array of observed variables below the circle   {o3 <- ob_ellipse(m1 = 9) |>      place(from = l1,            where = \"below\",            sep = 2) |>      ob_array(       k = 3,       where = 0,       sep = .4)} +   # Connect the latent to the observed variables at the north anchor point   {l1_o3 <- connect(l1,                      o3@point_at(\"north\"),                      resect = 2)} +    # Place error terms below each observed variable   {e3 <- ob_circle(radius = .75) |>     place(o3,           where = \"below\",           sep = .85)} +   # Connect the error terms to the observed variables   {e3_o3 <- connect(e3, o3, resect = 2)} +   # latent variance1   {v_l1 <- ob_variance(l1, where = \"north\")} +   # label(1, v_l1@midpoint()) +    {v_e3 <- ob_variance(     e3,     where = \"south\",     looseness = 1.4,     resect = unit(3, \"pt\"),     arrowhead_length = unit(7, \"pt\"),      arrow_head = arrowheadr::arrow_head_deltoid(2.4),     arrow_fins = arrowheadr::arrow_head_deltoid(2.4))} +   {lb_indicator <- ob_label(\"Indicator<br>Variables\",                              color = \"black\") |>     place(o3[1]@point_at(\"west\"), \"west\", sep = 1.2)} +    ob_point(-5, 0, color = \"white\") +   ob_label(\"Loadings\",             lb_indicator@center %|-% midpoint(l1, o3@bounding_box)) +    ob_label(\"Residuals\",             lb_indicator@center %|-% e3@bounding_box@center) +    ob_label(\"Latent<br>Variable\", lb_indicator@center %|-% l1) +    ob_label(\"Latent<br>Variance\",             lb_indicator@center %|-% l1@normal_at(              \"north\",               distance = .5)) +    ob_label(\"Residual<br>Variances\",             lb_indicator@center %|-% e3[1]@normal_at(              \"south\",               distance = .5)) my_fills <- viridis::viridis(n = 3, begin = .3, end = .6) |>    class_color() |>    set_props(saturation = .6, brightness = .5) |>    c()  my_path_color <- \"gray40\" my_resect <- 1 broad <- c(\"Gv\", \"Gf\", \"Gc\") my_arrowhead <- arrowheadr::arrow_head_deltoid(2.5)  g2broad <- c(Gv = .84, Gf = .95, Gc = .80)  broad2indicator <- list(Gv = c(.78, .84, .91),                         Gf = c(.88, .81, .74),                         Gc = c(.74, .91, .93))  broad_variance <- 1 - g2broad ^ 2  latent <- redefault(ob_circle,                      color = NA)    lb_latent <- redefault(ob_label,                              size = 30,                              fill = NA,                              color = \"white\")  observed <- redefault(ob_ellipse,                             a = .5,                             b = .5,                             m1 = 10,                             # fill = my_fill,                            color = NA)  lb_observed <- redefault(   ob_label,    size = 15,    fill = NA,    color = \"white\",   nudge_y = -.04)  direct <- redefault(   connect,   resect = my_resect,   color = my_path_color,   arrow_head = my_arrowhead,   linewidth = .5,   length_head = 6 )  lb_direct <- redefault(   ob_label,   size = 16,   color = lb_color,   angle = 0,   vjust = .5,   position = .46,   label.padding = margin(t = 3, r = 2, b = 0, l = 2, unit = \"pt\") )  var_latent <- redefault(   ob_variance,    theta = 40,   resect = my_resect,   color = my_path_color,    looseness = .9,    linewidth = .5,   arrow_head = my_arrowhead,   arrow_fins = my_arrowhead,   arrowhead_length = 6)  lb_variance <- redefault(   lb_direct,   position = .5,   straight = TRUE )  ggdiagram(font_family = my_font, font_size = 16) +   {g <- latent(label = lb_latent(\"*g*\"), fill = \"gray15\")} +    var_latent(g, label = lb_variance(1)) +   {Gx <- place(g, g,where = \"below\", sep = 1.6) |>      ob_array(k = 3,                  sep = 2,                  label = lb_latent(broad,                                    vjust = .6),                 fill = my_fills)} +   var_latent(Gx,               where = \"left\",               color = Gx@fill,              label = lb_variance(                round_probability(broad_variance,                                   phantom_text = \".\"),                color = Gx@fill)) +   {pGx <- direct(g, Gx, color = Gx@fill)} +   {lb_direct(     label = round_probability(g2broad,                                phantom_text = \".\"),      center = pGx@line@point_at_y(pGx[2]@midpoint(       position = .47)@y),     color = Gx@fill)} +   # list----   {vv <- map_ob(Gx, \\(b) {     o1 <- place(observed(fill = b@fill),                  from = b,                  where = \"south\",                 sep = 1.6)          o <- ob_array(       o1,       k = 3,        sep = .2,       fill = purrr::map_chr(c(.6, .75, .9), tinter::lighten, x = o1@fill),       label = lb_observed(         paste0(           b@label@label,            \"~\",            1:3,            \"~\")))     p <- direct(b, o@point_at(\"north\"), color = b@fill)          l <- lb_direct(       round_probability(         broad2indicator[[b@label@label]],         phantom_text = \".\"),        center = p@line@point_at_y(p[2]@midpoint(position = .47)@y),       color = b@fill)          v <- ob_variance(       o,       where = \"south\",       bend = -15,       looseness = 1.7,       resect = my_resect,       color = b@fill,       theta = 70,       linewidth = .5,       label = lb_variance(         round_probability(sqrt(1 - broad2indicator[[b@label@label]] ^ 2)),         color = b@fill),       arrow_head = my_arrowhead,       arrow_fins = my_arrowhead,       arrowhead_length = 6     )     c(o, p, v, l)   }) } ggdiagram(font_family = my_font, font_size = 13) +   {g <- latent(label = lb_latent(\"*g*\"),                 fill = \"gray15\",                 radius = sqrt(1 / pi))} +    {Gx <- place(g, g,where = \"below\", sep = 1.2) |>      ob_array(k = 3,                  sep = 2.4,                  label = lb_latent(broad,                                    vjust = .6,                                   color = \"gray15\",                                   size = 28),                 fill = \"gray15\")} +   {d_Gx <- ob_circle(     color = NA,     fill = my_fills,     radius = sqrt(broad_variance / pi)) |>      place(Gx, where = \"left\", sep = .45)} +   direct(d_Gx,            Gx,            color = my_fills,            resect = 1) +   {pGx <- direct(g, Gx, color = Gx@fill, resect = 1)} +   {lb_direct(     label = round_probability(g2broad,                               phantom_text = \".\"),     center = pGx@line@point_at_y(pGx[2]@midpoint(       position = .46)@y),     color = Gx@fill)} +   ob_wedge(center = Gx@center,             radius = sqrt(1 / pi),            start = turn(.5) + turn(broad_variance) / 2,            end = turn(.5) - turn(broad_variance) / 2,            fill = my_fills) +    lb_latent(broad, center = Gx@center, vjust = .6) +   {map(1:3, \\(i) {     b <- Gx[i]     p2 <- place(ob_point(), from = b, where = \"south\", sep = 1.2)     p1 <- place(ob_point(), from = p2, where = \"left\", sep = 1.1)     p3 <- place(ob_point(), from = p2, where = \"right\", sep = 1.1)          p <- bind(c(p1,p2,p3))          b_text <- b@label@label          lb_o <- ob_label(paste0(b_text, \"~\", 1:3, \"~\"),                      center = p - ob_point(0,.55),                      color = \"white\",                       size = 20,                      fill = NA)                    b_p <- direct(b, p, color = my_fills[i], resect = 1)          l_b_p <- lb_direct(       round_probability(broad2indicator[[b_text]],                          phantom_text = \".\"),        center = b_p@line@point_at_y(b_p[2]@midpoint(.46)@y),       color = my_fills[i])          r_g <- ob_rectangle(       north = p,        fill = g@fill,       color = NA,       width = 1,        height = (g2broad[b_text] * broad2indicator[[b_text]]) ^ 2)          r_broad <- ob_rectangle(       north = r_g@south,        fill = my_fills[i],       width = 1,        color = NA,       height = (sqrt(broad_variance[b_text]) * broad2indicator[[b_text]]) ^ 2)          error_variance <- 1 - broad2indicator[[b_text]] ^ 2          error_color <- class_color(my_fills[i])@lighten(.5)@color          r_unique <- ob_rectangle(       north = r_broad@south,        fill = error_color,       width = 1,        color = NA,       height = error_variance)          r <- sqrt(error_variance / pi)          error <- ob_circle(r_unique@south - ob_point(0, r + .45), radius = r, color = NA, fill = error_color)          error2observed <- direct(error, r_unique, resect = 1, color = error_color)          list(r_g,           r_broad,           r_unique,           b_p,           l_b_p,           error,           error2observed,           lb_o) |>        lapply(as.geom)   })} my_serif_font <- \"Equity Text A\" str_narrow <- \"Narrow Abilities\" str_tests <- \"Tests\" str_specifics <- \"Specifics\"  # gradient fills black_gradient <- grid::radialGradient(   colours = rev(c(\"gray50\", \"gray2\", \"gray2\")),    stops = c(0, .35, 1)) black_gradient_rev <- grid::radialGradient(   colours = c(\"gray50\", \"black\"))  ggdiagram(font_family = my_serif_font, font_size = 16) +   {g <- ob_circle(       radius = 1.33,       fill = NA,       color = NA     )} +    geom_polygon(     aes(x = x, y = y),      data = ob_circle(radius = 9)@polygon,      color = NA,     fill = black_gradient) +   geom_polygon(     aes(x = x, y = y),      data = g@polygon,     color = NA,      fill = black_gradient_rev) +   {broad_angle <- turn(seq(0, 1, length.out = 9)[-9] + 1 / 16)     broad_color <- hcl(      h = seq(0, 360 - 360 / 8, 360 / 8) + 20,       c = 55,       l = 60)     broad <- ob_circle(       color = NA,        fill = broad_color) |>       place(         from = g,          where = broad_angle,          sep = 1.15)} +    ob_label(         \"*g*\",         color = \"gray90\",         fill = NA,         size = 60,         vjust = .4,         family = my_serif_font       ) +   connect(g, broad,            color = broad_color,            resect = 1,            linewidth = .75,            length_head = 5) +   purrr::map(unbind(broad), \\(b) {     geom_polygon(       data = b@polygon,        aes(x = x, y = y),        fill = grid::radialGradient(         colours = c(tinter::lighten(b@fill, .4),                      tinter::lighten(b@fill, .8)),          stops = c(0,1)))}) +   ob_label(     c(\"Ga\", \"Gc\", \"Gf\", \"Gv\", \"Gs\", \"Gr\", \"Gl\", \"Gwm\"),     broad@center + ob_point(0, -.05),     fill = NA,     family = my_serif_font,     size = 20,     vjust = .55,     angle = broad@center@theta + degree(-90 * sign(broad@center@theta@turn)),     color = \"gray20\"   ) +   ob_path(     broad |>        set_props(radius = c(rep(.66, 4), rep(.59, 4))) |>        unbind() |>        purrr::map(\\(x) {         x@point_at(x@center@theta + degree(seq(-90, 90, 10)))         }),     color = \"gray20\",     alpha = 0,     label = ob_label(       c(\"Auditory\",          \"Knowledge\",          \"Fluid\",          \"Visual-Spatial\",          \"Speed\",          \"Fluency\",          \"Efficiency\",          \"Memory\"),       fill = NA,       family = my_serif_font,       vjust = 1,       size = 9.5,       spacing = 100)) +   ob_path(     broad |>        set_props(radius = c(rep(.59, 4), rep(.66, 4))) |>        unbind() |>        purrr::map(\\(x) {         x@point_at(           x@center@theta + degree(-180) + degree(seq(-90, 90, 10)))}),     label = ob_label(       c(\"Processing\",          \"Comprehension\",          \"Reasoning\",          \"Processing\",          \"Processing\",          \"Retrieval\",          \"Learning\",          \"Working\"),             fill = NA,             family = my_serif_font,             vjust = 1,       size = 9.5,             spacing = 100           ),           color = \"gray20\",           alpha = 0   ) +   {narrow <- ob_circle(     radius = .45,      fill = rep(broad@fill, each = 5)     ) |>     place(from = g,            where = degree(seq(0, 360 - 360/40, 360/40) + 360/80),            sep = 4.3)          geom_polygon(       aes(x = x,           y = y,            group = group,            fill = fill),       data = narrow@polygon,       color = NA)} +    {purrr::imap(unbind(broad), \\(x, idx) {     connect(x, narrow[(idx - 1) * 5 + 1:5],              color = tinter::lighten(x@fill, .5),              linewidth = .5,             length_head = 6,             resect = 1) |>        as.geom()   })} +   {test_theta <- degree(seq(0, 360 - 360/120, 360/120) + 360/240)     tests <- ob_ellipse(       a = .18,           m1 = 8,       angle = test_theta,       color = NA,       fill = rep(tinter::lighten(broad@fill, .2), each = 15)) |>       place(from = g, where = test_theta, sep = 6.2)} +   {specifics <- ob_circle(     radius = .2,      angle = test_theta,      color = NA,      fill = rep(tinter::lighten(broad@fill, .15), each = 15)) |>      place(from = g, where = test_theta, sep = 7.0)} +   connect(specifics, tests,            color = specifics@fill,            linewidth = .3,           length_head = 6,            resect = .5) +   {purrr::imap(unbind(narrow), \\(x, idx) {     connect(x, tests[(idx - 1) * 3 + 1:3],              color = tinter::lighten(x@fill, .5),              resect = 1,              linewidth = .3,             length_head = 6) |>        as.geom()   })} +   scale_fill_manual(     values = map(broad@fill,                   \\(fill) {                     grid::radialGradient(c(tinter::lighten(fill, .15),                                            tinter::lighten(fill, .4)),                                          stops = c(0.2, 1),                                          group = F)}) |>        `names<-`(broad@fill)) +   theme(legend.position = \"none\") +   ob_label(     label = rev(strsplit(str_narrow, split = character(0))[[1]]),     center = narrow[seq(nchar(str_narrow)) + 2]@center,     angle = narrow[seq(nchar(str_narrow)) + 2]@center@theta - degree(90),     fill = NA,     family = my_serif_font,     size = 16,     color = \"gray30\",     vjust = .55   ) +   ob_label(     label = strsplit(str_narrow, split = character(0))[[1]],     center = narrow[seq(nchar(str_narrow)) + 22]@center,     angle = narrow[seq(nchar(str_narrow)) + 22]@center@theta + degree(90),     fill = NA,     family = my_serif_font,     size = 16,     color = \"gray30\",     vjust = .55   ) +   {purrr::map(65 + c(0,15, 30, 45), \\(x) {     ob_label(       label = strsplit(str_tests, split = character(0))[[1]],       center = tests[seq(nchar(str_tests)) + x]@center,       angle = tests[seq(nchar(str_tests)) + x]@center@theta + degree(90),       fill = NA,       family = my_serif_font,       size = 10,       color = \"gray30\",       vjust = .57     )@geom()   })} +   {purrr::map(5 + c(0,15, 30, 45), \\(x) {     ob_label(       label = rev(strsplit(str_tests, split = character(0))[[1]]),       center = tests[seq(nchar(str_tests)) + x]@center,       angle = tests[seq(nchar(str_tests)) + x]@center@theta - degree(90),       fill = NA,       family = my_serif_font,       size = 10,       color = \"gray30\",       vjust = .57     )@geom()})} +   {purrr::map(63 + c(0,15, 30, 45), \\(x) {     ob_label(       label = strsplit(str_specifics, split = character(0))[[1]],       center = specifics[seq(nchar(str_specifics)) + x]@center,       angle = specifics[seq(nchar(str_specifics)) + x]@center@theta + degree(90),       fill = NA,       family = my_serif_font,       size = 9,       color = \"gray30\",       vjust = .53     )@geom()})} +   {purrr::map(3 + c(0,15, 30, 45), \\(x) {     ob_label(       label = rev(strsplit(str_specifics, split = character(0))[[1]]),       center = specifics[seq(nchar(str_specifics)) + x]@center,       angle = specifics[seq(nchar(str_specifics)) + x]@center@theta - degree(90),       fill = NA,       family = my_serif_font,       size = 9,       color = \"gray30\",       vjust = .53     )@geom()})}"},{"path":"https://wjschne.github.io/ggdiagram/articles/causalpaths.html","id":"path-diagrams-for-multilevel-models","dir":"Articles","previous_headings":"","what":"Path Diagrams for Multilevel Models","title":"Path Diagrams","text":"independence assumption multiple regression requires regression errors independent . data clustered way violates assumption, multilevel model can account within-cluster similarity data (.e., intraclass correlation). multilevel models displayed equations like : Level 1Yij=β0j+β1jX1ij+β2jX2ij+eijσe2=var(e)Level 2β0j=γ00+γ01W1j+u0jβ1j=γ10+γ11W1j+u1jβ2j=γ20+γ21W1j+u2j𝛕=cov(u)=[τ00τ01τ02τ01τ11τ12τ02τ12τ22] \\begin{aligned} \\text{Level 1}\\\\ Y_{ij}&=\\beta_{0j}+\\beta_{1j}X_{1ij}+\\beta_{2j}X_{2ij}+e_{ij}\\\\ \\sigma_e^2&=\\text{var}\\left(e\\right)\\\\ \\text{Level 2}\\\\ \\beta_{0j} &= \\gamma_{00} + \\gamma_{01}W_{1j} + u_{0j}\\\\ \\beta_{1j} &= \\gamma_{10} + \\gamma_{11}W_{1j} + u_{1j}\\\\ \\beta_{2j} &= \\gamma_{20} + \\gamma_{21}W_{1j} + u_{2j}\\\\ \\mathbf{\\tau} &=\\text{cov}\\left(u\\right)\\\\ &=\\begin{bmatrix} \\tau_{00} & \\tau_{01} & \\tau_{02}\\\\ \\tau_{01} & \\tau_{11} & \\tau_{12}\\\\ \\tau_{02} & \\tau_{12} & \\tau_{22} \\end{bmatrix} \\end{aligned} outcome (Y), 2 level-1 predictors (X1 X2), 1 level-2 predictor (W1). random intercept (β0j) fixed component (γ00 + γ01W1j) random component (u0j). random intercept partly predicted level-2 variable, W1j. random slopes also fixed random components, well predicted level-2 variable. τ matrix variance-covariance matrix level-2 random variables u (.e., u0j, u1j, u1j). equations specify model unambiguously, easy lose one’s way . can facilitate interpretation equations presented visual mode. Curran & Bauer (2007) developed set extensions path diagrams incorporate random slopes intercepts multilevel models. core innovation treat random slopes intercepts latent variables sit atop direct paths. example approach Figure 12. displays information equations listed previously, terms easier understand use. Figure 12: path diagram multilevel model","code":"clr <-   class_color(   c(\"#976A85\",     \"#7385A1\",     \"#4E9C9B\",     \"#66AB7A\",     \"#A4AF5A\"))@darken(.3)@color  clr <- c(\"#6B4B5E\", \"#515E72\", \"#376E6E\", \"#487956\", \"#747C3F\")  intercept <- function(center = ob_point(),                       r = 1,                       vertex_radius = unit(.6, \"mm\"),                       fill = clr[1],                       color = NA,                       ...) {   p <- purrr::map(unbind(center), \\(cc) {     cc + ob_polar(degree(c(90, 210, 330)), r = r)   })   ob_polygon(p,              vertex_radius = vertex_radius,              fill = fill,              color = color,              ...) }  observed <- redefault(ob_ellipse, m1 = 10, color = NA) lb_observed <- redefault(ob_label, fill = NA, color = \"white\", size = 24) lb_slope <- redefault(ob_label, fill = NA, color = \"white\", size = 18)  random_slope <- redefault(ob_circle, color = NA, radius = .5) tau_covariance <- redefault(ob_covariance,                              linewidth = .5,                              head_length = 4,                              resect = 1)  ggdiagram(font_family = my_font, font_size = 13) +    {i1 <- intercept(label = ob_label(     label = \"1~1~\",      color = \"white\",     fill = NA,     size = 24),     fill = clr[1])} +   {x1 <- observed(label = lb_observed(\"*X*~1*ij*~\"),                    fill = clr[2]) |>     place(bind(i1@segment)@midpoint()[2], \"below\", 1.5)} +    {x2 <- observed(label = lb_observed(\"*X*~2*ij*~\"),                   fill = clr[3]) |>      place(x1, \"below\", 1.5)} +    {y = observed(label = lb_observed(\"*Y*~*ij*~\"),                 fill = clr[4]) |>      place(x1, \"right\", sep = 9)} +    {i1_y <- connect(i1, y, resect = 2, color = clr[1])} +    {x1_y <- connect(x1, y, resect = 2, color = clr[2])} +    {x2_y <- connect(x2, y, resect = 2, color = clr[3])} +   {latent_slope_line <- ob_line(slope = -.8, intercept = 1.3)   b0j <- random_slope(     intersection(latent_slope_line, i1_y),     fill = clr[1],     label = lb_slope(\"*&beta;*~0*j*~\")   )} +   {b1j <- random_slope(     intersection(latent_slope_line, x1_y),     fill = clr[2],     label = lb_slope(\"*&beta;*~1*j*~\"))} +   {b2j <- ob_circle(     intersection(latent_slope_line, x2_y),     radius = .5,     fill = clr[3],     color = NA,     label = lb_slope(\"*&beta;*~2*j*~\")   )} +   {i2 <- intercept(width = 2,     rotate(latent_slope_line, degree(90), origin = b0j@center)@point_at_x(b1j@center@x),     label = lb_observed(\"1~2~\")   )} +   {w1 <- observed(     center = i2@center %-|% y@center,     label = lb_observed(\"*W*~1*j*~\"),     fill = clr[5]   )} +   {b <- bind(c(b0j, b1j, b2j))    i2b <- connect(      i2,      b,      color = i2@fill,      resect = 2,      label = ob_label(        paste0(\"*&gamma;*~\", 0:2, \"0~\"),        angle = 0,        size = 16      )   )} +   {w1b <- connect(     w1,     b,     color = w1@fill,     resect = 2,     label = ob_label(       paste0(\"*&gamma;*~\", 0:2, \"1~\"),       angle = 0,       size = 16     )   )} +   {u <- ob_circle(     radius = .4,     color = NA,     fill = b@fill,     label = ob_label(       paste0(\"*u*~\", 0:2, \"*j*~\"),       color = \"white\",       fill = NA,       size = 14     )   ) |> place(b, \"southwest\", .5)} +    connect(     u,     b,     color = b@fill,     resect = 1,     length_head = 4,     linewidth = .5   ) +   tau_covariance(     u[2],     u[1],     color = mean_color(clr[c(1, 2)]),     label = ob_label(\"*&tau;*~01~\",                       color = mean_color(clr[c(1, 2)]))   ) +   tau_covariance(     u[3],     u[2],     color = mean_color(clr[c(2, 3)]),     label = ob_label(\"*&tau;*~12~\", color = mean_color(clr[c(2, 3)]))   ) +   tau_covariance(     u[3]@point_at(210),     u[1]@point_at(260),     color = mean_color(clr[c(1, 3)]),     label = ob_label(\"*&tau;*~02~\", color = mean_color(clr[c(1, 3)])),     bend = 10   ) +    ob_variance(     u,     color = u@fill,     \"east\",     linewidth = .5,     looseness = 1.9,     bend = 5,     arrowhead_length = 4,     resect = 1,     label = ob_label(       paste0(\"*&tau;*~\", 0:2, 0:2, \"~\"),       label.margin = margin(),       label.padding = margin(),       color = b@fill     ),     theta = 60   ) +   {e <- ob_circle(radius = .6, fill = y@fill, color = NA, label = lb_observed(\"*e~ij~*\")) |> place(y, \"right\", .9)} +   connect(e, y, color = y@fill, resect = 2) +   {e_var <- ob_variance(e, \"east\", color = e@fill, looseness = 1.7)} +   ob_latex(r\"(\\text{\\emph{σ}}^{\\text{2}}_{\\mkern-1.5mu\\text{\\emph{e}}})\", e_var@midpoint(), width = .45, family = \"Roboto Condensed\", filename = \"sigma_e_2\", color = e@fill)"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Circles","text":"avoid repetitive code, make base plot:","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) #| label: baseplot  my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Circles","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow)"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Circles","text":"avoid repetitive code, make base plot:","code":"#| label: baseplot  my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"specifying-a-circle","dir":"Articles","previous_headings":"","what":"Specifying a Circle","title":"Circles","text":"Circles can specified point circle’s center (x0, y0) radius r (distance center circle’s edge). (x−x0)2+(y−y0)2=r2 (x-x_0)^2+(y-y_0)^2=r^2 Figure 1: circle can specified center radius, common need one points specific angle. Figure 2: Point circle 45° x-axis. Multiple points can specified . Figure 3: Points circle 20 degrees apart. can named points (e.g., north|top|, south|bottom|, east|right, west|left, northwest|top left|left, southeast|bottom right|right, north-northwest).  @point_at property can take angles named positions","code":"p <- ob_point(0,0) r <- 3 c1 <-  ob_circle(center = p, radius = r) c1 #> <ggdiagram::ob_circle> #> @ center: <ggdiagram::ob_point> #>  @ x: num 0 #>  @ y: num 0 #> @ radius: num 3 #> Other props: label, alpha, color, fill, linewidth, linetype, #>              n, area, bounding_box, circumference, diameter, #>              length, polygon, style, tibble, geom, arc, angle_at, #>              normal_at, tangent_at, place, point_at, aesthetics bp +   c1 +   ob_segment(     c1@center,     c1@point_at(0),     color = my_colors[1],     label = ob_label(paste0(\"*r* = \", c1@radius), angle = 0, vjust = 0)   ) +   c1@center@label(vjust = 1.2, plot_point = T) c1@point_at(degree(60)) #> <ggdiagram::ob_polar> #> @ x    : num 1.5 #> @ y    : num 2.6 #> @ r    : num 3 #> @ theta: <ggdiagram::radian> #>  @ radian: num 1.05 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, style, tibble, xy, #>              geom, label, place, aesthetics deg <- degree(60)  bp +    c1 +   {p45 <- c1@point_at(deg)} +   p45@label(polar_just = ob_polar(deg, 1.5)) +   ob_segment(c1@center, p45) +   ob_arc(radius = 1, start = degree(0), end = deg, label = deg) bp +    c1 +   c1@point_at(degree(seq(0,340, 20))) positions <- c(\"top\", \"bottom\", \"left\", \"right\", \"northeast\", \"north-northeast\")  bp +   c1 +   {p <- c1@point_at(positions)} +   ob_label(positions, p, polar_just = ob_polar(p@theta, 1.7))"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"point-on-the-circle-at-a-specific-angle","dir":"Articles","previous_headings":"","what":"Point on the circle at a specific angle","title":"Circles","text":"common need one points specific angle. Figure 2: Point circle 45° x-axis. Multiple points can specified . Figure 3: Points circle 20 degrees apart. can named points (e.g., north|top|, south|bottom|, east|right, west|left, northwest|top left|left, southeast|bottom right|right, north-northwest).  @point_at property can take angles named positions","code":"c1@point_at(degree(60)) #> <ggdiagram::ob_polar> #> @ x    : num 1.5 #> @ y    : num 2.6 #> @ r    : num 3 #> @ theta: <ggdiagram::radian> #>  @ radian: num 1.05 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, style, tibble, xy, #>              geom, label, place, aesthetics deg <- degree(60)  bp +    c1 +   {p45 <- c1@point_at(deg)} +   p45@label(polar_just = ob_polar(deg, 1.5)) +   ob_segment(c1@center, p45) +   ob_arc(radius = 1, start = degree(0), end = deg, label = deg) bp +    c1 +   c1@point_at(degree(seq(0,340, 20))) positions <- c(\"top\", \"bottom\", \"left\", \"right\", \"northeast\", \"north-northeast\")  bp +   c1 +   {p <- c1@point_at(positions)} +   ob_label(positions, p, polar_just = ob_polar(p@theta, 1.7))"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"placing-circles","dir":"Articles","previous_headings":"","what":"Placing circles","title":"Circles","text":"place function places object specified direction distance another object. Figure 4: Place Circle B one unit right Circle argument can take degrees named positions: east, right, east-northeast, northeast, top right, right, north-northeast, north, top, , north-northwest, northwest, top left, left, west-northwest, west, left, west-southwest, southwest, bottom left, left, south-southwest, south, bottom, , south-southeast, southeast, bottom right, right, east-southeast Multiple circles can created named directions: Figure 5: Place mutliple circles using named directions numbers (degrees): Figure 6: Place mutliple circles using degrees styles: Figure 7: Place mutliple circles styling works placing circles next . create point center, place six circles around , place 12 points around circle using map_ob function “map” objects like map_* functions purrr package. Figure 8: Place circles around point, points around circle Figure 9: Placing line one unit northeast circle","code":"bp +    {A <- ob_circle(     center = ob_point(-2, 0),      radius = 1,      label = ob_label(\"A\", size = 30))} +    place(     ob_circle(radius = 1.5,            label = ob_label(\"B\", size = 30)),     from = A,     where = \"right\",     sep = 1) bp +    {c3 <- ob_circle(ob_point(0, 0), radius = 1)} +    place(ob_circle(radius = .5),          from = c3,          where = c(\"northwest\",                    \"northeast\",                    \"south-southeast\",                    \"south-southwest\"),          sep = 1) bp +    c3 +    place(ob_circle(radius = .5),          from = c3,          where = c(0, 30, -30),          sep = 1) bp +   {c4 <- ob_circle(       radius = 1,       color = NA,       fill = \"gray35\")} +   place(     ob_circle(       color = NA,       fill = class_color(viridis::viridis(         n = 6,          option = \"D\"))@lighten(.7)@color     ),     from = c4,     where = degree(seq(0, 300, 60)),     sep = 1   ) bp +   {p1 <- ob_point(0, 0)} +   {c6 <- place(       x = ob_circle(         radius = .5,         fill = viridis::viridis(6),         color = NA       ),       from = p1,       where = degree(seq(0, 300, 60)),       sep = 2     )} +   map_ob(unbind(c6),          \\(x) ob_point(color = x@fill) |>            place(              from = x,              where = degree(seq(0, 330, 30)),              sep = .5            )) bp +   {c7 <- ob_circle()} +   place(ob_line(), c7, where = degree(45), sep = 1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"placing-circles-next-to-each-other","dir":"Articles","previous_headings":"","what":"Placing circles next to each other","title":"Circles","text":"place function places object specified direction distance another object. Figure 4: Place Circle B one unit right Circle argument can take degrees named positions: east, right, east-northeast, northeast, top right, right, north-northeast, north, top, , north-northwest, northwest, top left, left, west-northwest, west, left, west-southwest, southwest, bottom left, left, south-southwest, south, bottom, , south-southeast, southeast, bottom right, right, east-southeast Multiple circles can created named directions: Figure 5: Place mutliple circles using named directions numbers (degrees): Figure 6: Place mutliple circles using degrees styles: Figure 7: Place mutliple circles styling","code":"bp +    {A <- ob_circle(     center = ob_point(-2, 0),      radius = 1,      label = ob_label(\"A\", size = 30))} +    place(     ob_circle(radius = 1.5,            label = ob_label(\"B\", size = 30)),     from = A,     where = \"right\",     sep = 1) bp +    {c3 <- ob_circle(ob_point(0, 0), radius = 1)} +    place(ob_circle(radius = .5),          from = c3,          where = c(\"northwest\",                    \"northeast\",                    \"south-southeast\",                    \"south-southwest\"),          sep = 1) bp +    c3 +    place(ob_circle(radius = .5),          from = c3,          where = c(0, 30, -30),          sep = 1) bp +   {c4 <- ob_circle(       radius = 1,       color = NA,       fill = \"gray35\")} +   place(     ob_circle(       color = NA,       fill = class_color(viridis::viridis(         n = 6,          option = \"D\"))@lighten(.7)@color     ),     from = c4,     where = degree(seq(0, 300, 60)),     sep = 1   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"placing-circles-next-to-points-and-points-next-to-circles","dir":"Articles","previous_headings":"","what":"Placing circles next to points and points next to circles","title":"Circles","text":"works placing circles next . create point center, place six circles around , place 12 points around circle using map_ob function “map” objects like map_* functions purrr package. Figure 8: Place circles around point, points around circle","code":"bp +   {p1 <- ob_point(0, 0)} +   {c6 <- place(       x = ob_circle(         radius = .5,         fill = viridis::viridis(6),         color = NA       ),       from = p1,       where = degree(seq(0, 300, 60)),       sep = 2     )} +   map_ob(unbind(c6),          \\(x) ob_point(color = x@fill) |>            place(              from = x,              where = degree(seq(0, 330, 30)),              sep = .5            ))"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"placing-lines-next-to-circles","dir":"Articles","previous_headings":"","what":"Placing lines next to circles","title":"Circles","text":"Figure 9: Placing line one unit northeast circle","code":"bp +   {c7 <- ob_circle()} +   place(ob_line(), c7, where = degree(45), sep = 1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"drawing-path-connectors-between-circles","dir":"Articles","previous_headings":"","what":"Drawing path connectors between circles","title":"Circles","text":"Let’s make two circles draw arrow path Figure 10: Connect two circles fine, often need labels styling make scientific diagrams. example: Figure 11: Connect two circles labels styles","code":"bp +    {c1 <- ob_circle(ob_point(-2, 2), radius = 1)} +    {c2 <- ob_circle(ob_point(1.5,-1.5), radius = 1.5)} +   connect(c1, c2) bp +   {cthis <- ob_circle(     ob_point(-2, 2),     radius = 1,     fill = my_colors[1],     color = NA,     label = ob_label(       \"This\",       color = \"white\",       fill = NA,       size = 35     )   )} +    {cthat <- ob_circle(     ob_point(1.5, -1.5),     radius = 1.5,     fill = my_colors[2],     color = NA,     label = ob_label(       \"That\",       color = \"white\",       fill = NA,       size = 55     )   )} +   connect(cthis, cthat,         resect = 2,         label = ob_label(\"Causes\", size = 20, vjust = 0),        color = \"black\")"},{"path":"https://wjschne.github.io/ggdiagram/articles/circles.html","id":"paths-between-circles-and-lines","dir":"Articles","previous_headings":"","what":"Paths between circles and lines","title":"Circles","text":"Figure 12: Connect circle line line circle","code":"bp +    c1 +   {l1 <- ob_line(slope = 2, intercept = 0)} +   connect(c1, l1) +   {c2 <- ob_circle(ob_point(2, -2))} +    connect(l1, c2)"},{"path":"https://wjschne.github.io/ggdiagram/articles/colors.html","id":"color-properties","dir":"Articles","previous_headings":"","what":"Color Properties","title":"Colors","text":"Different properties colors retrieved set. Using HSV color model Hue (0–360), Saturation (0–1), Value/Brightness (0–1) can set sequence colors brightness saturation original color different hues:  can set array colors hue original color different saturation /brightness:  Alternately, RGB (Red/Green/Blue) color properties can also retrieved set. Values integers ranging 0 255.","code":"my_color@hue #> [1] 302.2642 my_color@saturation #> [1] 0.4862385 my_color@brightness #> [1] 0.854902 my_color_array <- class_color(my_color, hue = my_color@hue + seq(0,720, length.out = 12))  ggdiagram() +   ob_circle(color = NA) %>%   ob_array(fill = my_color_array,            k = 12,            sep = .2) my_color_array <- class_color(my_color, saturation = seq(.1,.6,.1))  ggdiagram() +   ob_circle(color = NA) %>%   ob_array(fill = my_color_array,            k = 6,            sep = .2) my_color@red #> [1] 218 my_color@green #> [1] 112 my_color@blue #> [1] 214"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"book-i","dir":"Articles","previous_headings":"","what":"Book I","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"plane rectilinear angle inclination two straight lines one another, meet together, straight line. Figure 1: Illustration angle one straight line standing another straight line makes adjacent angles equal, angles called right angle, lines said perpendicular . Figure 2: Illustration right angles circle plane figure, bounded one continued line, called circumference periphery; certain point within , straight lines drawn circumference equal. Figure 3: circle circumference line equally distant point. construct equilateral triangle given finite straight-line. Let AB given finite straight-line. required construct equilateral triangle straight-line AB. Let circle BCD center radius AB drawn, let circle ACE center B radius BA drawn. let straight-lines CA CB joined point C, circles cut one another, points B (respectively). since point center circle CDB, AC equal AB. , since point B center circle CAE, BC equal BA. CA also shown () equal AB. Thus, CA CB equal AB. things equal thing also equal one another. Thus, CA also equal CB. Thus, three (straight lines) CA, AB, BC equal one another. Thus, triangle ABC equilateral, constructed given finite straight-line AB. Figure 4: Make equilateral trigangle starting line AB. place straight line equal given straight line one end given point. Let given point, BC given straight line. required place straight line equal given straight line BC one end point . Join straight line AB point point B, construct equilateral triangle DAB . Produce straight lines AE BF straight line DA DB. Describe circle CGH center B radius BC, , describe circle GIJ center D radius DG. Since point B center circle CGH, therefore BC equals BG. , since point D center circle GKI, therefore DL equals DG. DA equals DB, therefore remainder AJ equals remainder BG. BC also proved equal BG, therefore straight lines AL BC equals BG. things equal thing also equal one another, therefore AJ also equals BC. Therefore straight line AJ equal given straight line BC placed one end given point . Figure 5: Make line starting point length line BC Let ABC right-angled triangle angle ACB right. say square AB equals sum squares AC BC. Describe square ADEB AB, squares HA FB AC CB. Draw AJ parallel either AD . K intersection AB CJ. Join CE AG. Angle CBG = Angle ABE. add angle CBA. Therefore, angle ABG = angle CBE, = AB CB = BG, triangle ABG = triangle CBE. AC parallel BG, triangle ABG rectangle BCFG share side BG, twice area triangle ABG equal area rectangle BCFG. CJ parallel , triangle CBE. rectangle KJEB share side , twice area triangle CBE equal area rectangle KJEB. triangle ABG = triangle CBE, twice area triangle ABG = twice area triangle CBE = area rectangle BCFG = area rectangle BCFG. manner may shown area rectangle ACHI rectangle ADJK equal. sum area rectangle ADJK area rectangle KJEB equals area rectangle ADEB. Therefore, sum area rectangle ACHI area rectangle BCFG equals area rectangle ADEB. Figure 6: Proof Pythagorean Theorem","code":"o <- ob_point(0, 0) theta <- degree(c(0,35)) baseplot +   ob_wedge(end = theta[2],            radius = .6,            fill = yellow) +   ob_segment(o, ob_polar(theta, r = 1, color = c(red, blue))) baseplot +   ob_segment(o, ob_polar(degree(c(0,90, 180)))) +    {a <- ob_arc(o, radius = .85, start = c(0,90), end = c(90, 180), linewidth = 3)} +   a@hatch(linewidth = 1) +   ob_rectangle(o + ob_point(0,.05), height = .1, width = .2, linewidth = 1) baseplot +   {s <- ob_segment(o, ob_polar(degree(c(135/2, 135, 290, 0, 180))),              color = c(black, red, yellow, blue, blue))} +    s@hatch(linewidth = 1) +   ob_circle(color = red) # Radius r <- 1  # Points A and B pA <- ob_point(0, 0) pB <- ob_polar(degree(0), r)  # Circles cBCD <- ob_circle(pA, r, color = blue) cACE <- ob_circle(pB, r, color = red)  # Intersection of circles to make equilateral triangle pC <- intersection(cBCD, cACE)[1]  # Points to label circles pD <- cBCD@point_at(180) pE <- cACE@point_at(0)  # Segments AC and BC sAB <- ob_segment(pA, pB, color = black) sAC <- ob_segment(pA, pC, color = yellow) sBC <- ob_segment(pB, pC, color = red)  # Bind segments sABC <- bind(c(sAB, sAC, sBC))  # Hatch marks to note congruence hABC <- sABC@hatch(linewidth = .75)   # Make point labels lABCDE <- ob_label(   LETTERS[1:5],   bind(c(pA, pB, pC, pD, pE)),   fill = bg,   color = c(red, blue, black, blue, red),   size = 18,   family = my_font,   vjust = .5,   label.padding = margin(4,3,0,3),   label.r = unit(9, units = \"pt\") )  baseplot +   sABC +   cBCD +   cACE +   lABCDE +   hABC pA <- ob_point(1, 2) pB <- ob_point(0, 0) pC <- ob_point(-2, -2)  sAB <- ob_segment(pA, pB, color = red) sBC <- ob_segment(pB, pC)  r_AB <- distance(sAB)  pD <- intersection(ob_circle(pA, r_AB), ob_circle(pB, r_AB))[2]  sAD <- ob_segment(pA, pD, color = red) sBD <- ob_segment(pB, pD, color = red)  p_ABD <- bind(c(pA, pB, pD))  cCGH <- ob_circle(pB, distance(pB, pC), color = blue) pH <- cCGH@point_at(sAD@line@angle + degree(90))  pF <- cCGH@normal_at(sBD@line@angle, 1.5)  sBF <- ob_segment(pB, pF, color = yellow, linetype = \"11\") sDF <- ob_segment(pD, pF)  pG <- intersection(sDF, cCGH)  sBG <- ob_segment(pB, pG, color = yellow)  cGIK <- ob_circle(pD, distance(pD, pG), color = red)  pI <- cGIK@point_at(sBD@line@angle + degree(180)) pE <- cGIK@normal_at((pA - pD)@theta, 1.5)  sAE <- ob_segment(pA, pE, color = black, linetype = \"11\")  pK <- intersection(sAE, cGIK)  sAK <- ob_segment(pA, pK, color = black)  p <- bind(c(pA, pB, pC, pD, pE, pF, pG, pH, pI, pK))  pABD <- ob_path(bind(c(pA,pD,pB, pA)), color = red, linewidth = 2)  baseplot +   sBC +   pABD +   bind(c(sAB, sBD, sAD))@hatch(     linewidth = 1,      height = .12) +   bind(c(sBC, sAK, sBG))@hatch(     k = 2,     height = .12,     linewidth = 1,     sep = .1   ) +   cCGH +   sBF +   sBG +   sAE +   sAK +   cGIK +   p@label(c(LETTERS[1:9], \"K\"),            fill = bg,            # vjust = c(rep(.55, 9), .5),           label.r = unit(9, units = \"pt\"),           label.padding = margin(4,3,1,3)) pA <- ob_point(0,0) pB <- ob_point(2,0)  sAB <- ob_segment(pA,pB, color = red)  pC <- ob_circle(sAB@midpoint(),                  radius = distance(pA, pB) / 2)@point_at(120)  sAC <- ob_segment(pA, pC, color = yellow) sBC <- ob_segment(pB, pC, color = blue)  pD <- rotate(pB, degree(-90), origin = pA) pE <- rotate(pA, degree(90), origin = pB)  pF <- rotate(pB, degree(90), origin = pC) pG <- rotate(pC, degree(-90), origin = pB)  pH <- rotate(pA, degree(-90), origin = pC) pI <- rotate(pC, degree(90), origin = pA)    # make copy so underlying dash is background color sBE <- ob_segment(pB,                   pE,                   color = red,                   linetype = \"11\")  sBE2 <- sBE %>% set_props(color = bg, linetype = \"solid\")  sCE <- ob_segment(pC, pE, color = yellow, linewidth = 1) sAG <- ob_segment(pA, pG, color = yellow, linewidth = 1) sCD <- ob_segment(pC, pD, color = blue, linewidth = 1) sBI <- ob_segment(pB, pI, color = blue, linewidth = 1)   sBG <- ob_segment(pB,                   pG,                   color = blue,                   linetype = \"11\")  sBG2 <- sBG %>%    set_props(color = bg,              linetype = \"solid\")  lC <- ob_line(xintercept = pC@x) sDE <- ob_segment(pD, pE) pJ <- intersection(lC, sDE) pK <- intersection(lC, sAB)  sCJ <- ob_segment(pC,                   pJ,                   color = black,                   linetype = \"11\")  sCJ2 <- sCJ %>%    set_props(color = bg,              linetype = \"solid\")  # Bind points p <- bind(c(pA, pB, pC, pD, pE, pF, pG, pH, pI, pJ, pK)) # points for orienting labels p_orient <- bind(   c(pG, pA, pE, pB, pA, pB, pC, pA, pC, pC, nudge(pK, -.01, -.01)) ) # polar adjustments for labels p_just <- ob_polar((p - p_orient)@theta , r = 1.4)   baseplot +   scale_y_continuous(expand = expansion(.2)) +   ob_polygon(bind(c(pB, pC, pF, pG)), fill = red, color = NA) +   ob_polygon(bind(c(pA, pB, pE, pD)), fill = blue, color = NA) +   ob_polygon(bind(c(pA, pC, pH, pI)), fill = black, color = NA) +   ob_polygon(bind(c(pA, pD, pJ, pK)), fill = yellow, color = NA) +   ob_wedge(     pB,     radius = .4,     start = (pC - pB)@theta,     end = (pA - pB)@theta,     fill = black,     color = NA   ) +   ob_wedge(     pB,     radius = .4,     start = (pA - pB)@theta,     end = (pE - pB)@theta@positive,     fill = yellow,     color = NA   ) +   ob_wedge(     pB,     radius = .4,     start = (pG - pB)@theta,     end = (pC - pB)@theta,     fill = yellow,     color = NA   ) +   sBC +   sAB +   sCE +   sAG +   sAC +   sCJ2 + sCJ +   sBE2 + sBE +   sBG2 + sBG +   ob_label(     c(LETTERS[seq(1, p@length)]),     center = p,     fill = NA,     color = black,     polar_just = p_just,     label.r = unit(9, units = \"pt\"),     label.padding = margin(4, 3, 1, 3)   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"definition-ix","dir":"Articles","previous_headings":"","what":"Definition IX","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"plane rectilinear angle inclination two straight lines one another, meet together, straight line. Figure 1: Illustration angle","code":"o <- ob_point(0, 0) theta <- degree(c(0,35)) baseplot +   ob_wedge(end = theta[2],            radius = .6,            fill = yellow) +   ob_segment(o, ob_polar(theta, r = 1, color = c(red, blue)))"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"definition-x","dir":"Articles","previous_headings":"","what":"Definition X","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"one straight line standing another straight line makes adjacent angles equal, angles called right angle, lines said perpendicular . Figure 2: Illustration right angles","code":"baseplot +   ob_segment(o, ob_polar(degree(c(0,90, 180)))) +    {a <- ob_arc(o, radius = .85, start = c(0,90), end = c(90, 180), linewidth = 3)} +   a@hatch(linewidth = 1) +   ob_rectangle(o + ob_point(0,.05), height = .1, width = .2, linewidth = 1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"definition-xv","dir":"Articles","previous_headings":"","what":"Definition XV","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"circle plane figure, bounded one continued line, called circumference periphery; certain point within , straight lines drawn circumference equal. Figure 3: circle circumference line equally distant point.","code":"baseplot +   {s <- ob_segment(o, ob_polar(degree(c(135/2, 135, 290, 0, 180))),              color = c(black, red, yellow, blue, blue))} +    s@hatch(linewidth = 1) +   ob_circle(color = red)"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"proposition-1","dir":"Articles","previous_headings":"","what":"Proposition 1","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"construct equilateral triangle given finite straight-line. Let AB given finite straight-line. required construct equilateral triangle straight-line AB. Let circle BCD center radius AB drawn, let circle ACE center B radius BA drawn. let straight-lines CA CB joined point C, circles cut one another, points B (respectively). since point center circle CDB, AC equal AB. , since point B center circle CAE, BC equal BA. CA also shown () equal AB. Thus, CA CB equal AB. things equal thing also equal one another. Thus, CA also equal CB. Thus, three (straight lines) CA, AB, BC equal one another. Thus, triangle ABC equilateral, constructed given finite straight-line AB. Figure 4: Make equilateral trigangle starting line AB.","code":"# Radius r <- 1  # Points A and B pA <- ob_point(0, 0) pB <- ob_polar(degree(0), r)  # Circles cBCD <- ob_circle(pA, r, color = blue) cACE <- ob_circle(pB, r, color = red)  # Intersection of circles to make equilateral triangle pC <- intersection(cBCD, cACE)[1]  # Points to label circles pD <- cBCD@point_at(180) pE <- cACE@point_at(0)  # Segments AC and BC sAB <- ob_segment(pA, pB, color = black) sAC <- ob_segment(pA, pC, color = yellow) sBC <- ob_segment(pB, pC, color = red)  # Bind segments sABC <- bind(c(sAB, sAC, sBC))  # Hatch marks to note congruence hABC <- sABC@hatch(linewidth = .75)   # Make point labels lABCDE <- ob_label(   LETTERS[1:5],   bind(c(pA, pB, pC, pD, pE)),   fill = bg,   color = c(red, blue, black, blue, red),   size = 18,   family = my_font,   vjust = .5,   label.padding = margin(4,3,0,3),   label.r = unit(9, units = \"pt\") )  baseplot +   sABC +   cBCD +   cACE +   lABCDE +   hABC"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"proposition-2","dir":"Articles","previous_headings":"","what":"Proposition 2","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"place straight line equal given straight line one end given point. Let given point, BC given straight line. required place straight line equal given straight line BC one end point . Join straight line AB point point B, construct equilateral triangle DAB . Produce straight lines AE BF straight line DA DB. Describe circle CGH center B radius BC, , describe circle GIJ center D radius DG. Since point B center circle CGH, therefore BC equals BG. , since point D center circle GKI, therefore DL equals DG. DA equals DB, therefore remainder AJ equals remainder BG. BC also proved equal BG, therefore straight lines AL BC equals BG. things equal thing also equal one another, therefore AJ also equals BC. Therefore straight line AJ equal given straight line BC placed one end given point . Figure 5: Make line starting point length line BC","code":"pA <- ob_point(1, 2) pB <- ob_point(0, 0) pC <- ob_point(-2, -2)  sAB <- ob_segment(pA, pB, color = red) sBC <- ob_segment(pB, pC)  r_AB <- distance(sAB)  pD <- intersection(ob_circle(pA, r_AB), ob_circle(pB, r_AB))[2]  sAD <- ob_segment(pA, pD, color = red) sBD <- ob_segment(pB, pD, color = red)  p_ABD <- bind(c(pA, pB, pD))  cCGH <- ob_circle(pB, distance(pB, pC), color = blue) pH <- cCGH@point_at(sAD@line@angle + degree(90))  pF <- cCGH@normal_at(sBD@line@angle, 1.5)  sBF <- ob_segment(pB, pF, color = yellow, linetype = \"11\") sDF <- ob_segment(pD, pF)  pG <- intersection(sDF, cCGH)  sBG <- ob_segment(pB, pG, color = yellow)  cGIK <- ob_circle(pD, distance(pD, pG), color = red)  pI <- cGIK@point_at(sBD@line@angle + degree(180)) pE <- cGIK@normal_at((pA - pD)@theta, 1.5)  sAE <- ob_segment(pA, pE, color = black, linetype = \"11\")  pK <- intersection(sAE, cGIK)  sAK <- ob_segment(pA, pK, color = black)  p <- bind(c(pA, pB, pC, pD, pE, pF, pG, pH, pI, pK))  pABD <- ob_path(bind(c(pA,pD,pB, pA)), color = red, linewidth = 2)  baseplot +   sBC +   pABD +   bind(c(sAB, sBD, sAD))@hatch(     linewidth = 1,      height = .12) +   bind(c(sBC, sAK, sBG))@hatch(     k = 2,     height = .12,     linewidth = 1,     sep = .1   ) +   cCGH +   sBF +   sBG +   sAE +   sAK +   cGIK +   p@label(c(LETTERS[1:9], \"K\"),            fill = bg,            # vjust = c(rep(.55, 9), .5),           label.r = unit(9, units = \"pt\"),           label.padding = margin(4,3,1,3))"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"proposition-47","dir":"Articles","previous_headings":"","what":"Proposition 47","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"Let ABC right-angled triangle angle ACB right. say square AB equals sum squares AC BC. Describe square ADEB AB, squares HA FB AC CB. Draw AJ parallel either AD . K intersection AB CJ. Join CE AG. Angle CBG = Angle ABE. add angle CBA. Therefore, angle ABG = angle CBE, = AB CB = BG, triangle ABG = triangle CBE. AC parallel BG, triangle ABG rectangle BCFG share side BG, twice area triangle ABG equal area rectangle BCFG. CJ parallel , triangle CBE. rectangle KJEB share side , twice area triangle CBE equal area rectangle KJEB. triangle ABG = triangle CBE, twice area triangle ABG = twice area triangle CBE = area rectangle BCFG = area rectangle BCFG. manner may shown area rectangle ACHI rectangle ADJK equal. sum area rectangle ADJK area rectangle KJEB equals area rectangle ADEB. Therefore, sum area rectangle ACHI area rectangle BCFG equals area rectangle ADEB. Figure 6: Proof Pythagorean Theorem","code":"pA <- ob_point(0,0) pB <- ob_point(2,0)  sAB <- ob_segment(pA,pB, color = red)  pC <- ob_circle(sAB@midpoint(),                  radius = distance(pA, pB) / 2)@point_at(120)  sAC <- ob_segment(pA, pC, color = yellow) sBC <- ob_segment(pB, pC, color = blue)  pD <- rotate(pB, degree(-90), origin = pA) pE <- rotate(pA, degree(90), origin = pB)  pF <- rotate(pB, degree(90), origin = pC) pG <- rotate(pC, degree(-90), origin = pB)  pH <- rotate(pA, degree(-90), origin = pC) pI <- rotate(pC, degree(90), origin = pA)    # make copy so underlying dash is background color sBE <- ob_segment(pB,                   pE,                   color = red,                   linetype = \"11\")  sBE2 <- sBE %>% set_props(color = bg, linetype = \"solid\")  sCE <- ob_segment(pC, pE, color = yellow, linewidth = 1) sAG <- ob_segment(pA, pG, color = yellow, linewidth = 1) sCD <- ob_segment(pC, pD, color = blue, linewidth = 1) sBI <- ob_segment(pB, pI, color = blue, linewidth = 1)   sBG <- ob_segment(pB,                   pG,                   color = blue,                   linetype = \"11\")  sBG2 <- sBG %>%    set_props(color = bg,              linetype = \"solid\")  lC <- ob_line(xintercept = pC@x) sDE <- ob_segment(pD, pE) pJ <- intersection(lC, sDE) pK <- intersection(lC, sAB)  sCJ <- ob_segment(pC,                   pJ,                   color = black,                   linetype = \"11\")  sCJ2 <- sCJ %>%    set_props(color = bg,              linetype = \"solid\")  # Bind points p <- bind(c(pA, pB, pC, pD, pE, pF, pG, pH, pI, pJ, pK)) # points for orienting labels p_orient <- bind(   c(pG, pA, pE, pB, pA, pB, pC, pA, pC, pC, nudge(pK, -.01, -.01)) ) # polar adjustments for labels p_just <- ob_polar((p - p_orient)@theta , r = 1.4)   baseplot +   scale_y_continuous(expand = expansion(.2)) +   ob_polygon(bind(c(pB, pC, pF, pG)), fill = red, color = NA) +   ob_polygon(bind(c(pA, pB, pE, pD)), fill = blue, color = NA) +   ob_polygon(bind(c(pA, pC, pH, pI)), fill = black, color = NA) +   ob_polygon(bind(c(pA, pD, pJ, pK)), fill = yellow, color = NA) +   ob_wedge(     pB,     radius = .4,     start = (pC - pB)@theta,     end = (pA - pB)@theta,     fill = black,     color = NA   ) +   ob_wedge(     pB,     radius = .4,     start = (pA - pB)@theta,     end = (pE - pB)@theta@positive,     fill = yellow,     color = NA   ) +   ob_wedge(     pB,     radius = .4,     start = (pG - pB)@theta,     end = (pC - pB)@theta,     fill = yellow,     color = NA   ) +   sBC +   sAB +   sCE +   sAG +   sAC +   sCJ2 + sCJ +   sBE2 + sBE +   sBG2 + sBG +   ob_label(     c(LETTERS[seq(1, p@length)]),     center = p,     fill = NA,     color = black,     polar_just = p_just,     label.r = unit(9, units = \"pt\"),     label.padding = margin(4, 3, 1, 3)   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"book-iv","dir":"Articles","previous_headings":"","what":"Book IV","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"rectilinear figure said inscribed circle, vertex angle figure circumference circle. Figure 7 rectilinear figure said circumscribed circle, sides tangent circle. Figure 8 circle said inscribed rectilinear figure, side figure tangent circle. Figure 9 circle said circumscribed rectilinear figure, circumference passes vertex angle figure. Figure 10","code":"p0 <- ob_point(0,0) c0 <- ob_circle(p0) pABCD <- c0@point_at(degree(seq(0, 270, 90)))  baseplot +    ob_polygon(pABCD, color = red, fill = NA) +   ob_wedge(pABCD, start = pABCD@theta + degree(135), end = pABCD@theta + degree(225), radius = .2, fill = red) +   c0 baseplot +    {ng <- ob_ngon(n = 4, fill = red, angle = 45)} +   ob_circle(fill = bg, color = NA, radius = ng@apothem) baseplot +   {ng <- ob_ngon(n = 6, fill = blue)} +   ob_circle(fill = bg, color = NA, radius = ng@apothem) # Points for inner triangle p <- ob_polar(degree(c(270, 15, 135))) # Circle from 3 points c1 <- circle_from_3_points(p) tangents <- c1@angle_at(p) %>%    c1@tangent_at()  circumscribed <- intersection(   tangents[c(1,1,2)],    tangents[c(2,3,3)]) %>%    ob_polygon(color = black, fill = NA)  baseplot +    ob_polygon(p, fill = blue, color = NA) +    c1 +   circumscribed d <- 1.4 node <- redefault(   ob_circle,   radius = 1 / sqrt(pi),   fill = blue,   alpha = .5,   color = blue,   linewidth = 1 ) ct <- redefault(   connect,   resect = 1,   color = black,   alpha = .3,   linewidth = .75,   length_head = 5 )  transition <- redefault(   ob_rectangle,   height = 1,   width = 1,   color = black,   fill = black,   alpha = .3,   linewidth = .75 ) ggdiagram(font_family = \"Roboto Condensed\", font_size = 20) +   {waiting <- node()} +   {critical <- node() %>% place(waiting, \"below\", d)} +   {s <- node() %>% place(critical, \"below\", d)    s1 <- node(fill = red, color = red) %>% place(s, \"left\", 0)    }  +   {s2 <- node(fill = red, color = red) %>% place(s, \"right\", 0)} +   {leave <- transition() %>% place(critical, \"right\", d)} +    {enter <- transition() %>% place(critical, \"left\", d)} +    {s3 <- node() %>% place(s, \"below\", d)} +    {e2 <- transition() %>% place(s3, \"left\", d)} +   {l2 <- transition() %>% place(s3, \"right\", d)} +   {s4 <- node() %>% place(s3, \"below\", d)} +   bind(c(waiting@center,           s4@center,           s2@center + ob_polar(degree(c(90, 210, 330)), .2))) %>% set_props(color = black, fill = NA_character_, size = 4, alpha = 1) +   bind(c(     ct(enter, bind(c(critical, s1))),     ct(critical, leave),     ct(s1, bind(c(leave, l2))),     ct(leave, s2),     ct(s2, bind(c(enter, e2))),     ct(e2, bind(c(s1, s3))),     ct(l2, s2),     ct(s3, l2)   )) +   ob_bezier(c(bind(c(waiting@point_at(\"west\"),                    waiting@center %-|% enter@center,                    enter@point_at(\"north\"))),               bind(c(s4@point_at(\"west\"),                    s4@center %-|% e2@center,                    e2@point_at(\"south\"))),               bind(c(l2@point_at(\"south\"),                    l2@center %|-% s4@center,                    s4@point_at(\"east\"))),               bind(c(leave@point_at(\"north\"),                    leave@center %|-% waiting@center,                    waiting@point_at(\"east\")))),              resect = 2,              arrow_head = arrowheadr::arrow_head_deltoid(2.3),              linewidth = .75,              color = black,             alpha = .5,length_head = 5) +   ob_latex(     \"s\",     ob_point() %>% place(s1, \"left\", .15),     color = red,     hjust = 1,     fill = NA,     width = .4,     density = 600   ) +   ob_latex(     \"\\\\bar{s}\",     ob_point() %>% place(s2, \"right\", .15),     color = red,     fill = NA,     hjust = 0,     width = .4,     density = 600   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"definition-iii","dir":"Articles","previous_headings":"","what":"Definition III","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"rectilinear figure said inscribed circle, vertex angle figure circumference circle. Figure 7","code":"p0 <- ob_point(0,0) c0 <- ob_circle(p0) pABCD <- c0@point_at(degree(seq(0, 270, 90)))  baseplot +    ob_polygon(pABCD, color = red, fill = NA) +   ob_wedge(pABCD, start = pABCD@theta + degree(135), end = pABCD@theta + degree(225), radius = .2, fill = red) +   c0"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"definition-iv","dir":"Articles","previous_headings":"","what":"Definition IV","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"rectilinear figure said circumscribed circle, sides tangent circle. Figure 8","code":"baseplot +    {ng <- ob_ngon(n = 4, fill = red, angle = 45)} +   ob_circle(fill = bg, color = NA, radius = ng@apothem)"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"definition-v","dir":"Articles","previous_headings":"","what":"Definition V","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"circle said inscribed rectilinear figure, side figure tangent circle. Figure 9","code":"baseplot +   {ng <- ob_ngon(n = 6, fill = blue)} +   ob_circle(fill = bg, color = NA, radius = ng@apothem)"},{"path":"https://wjschne.github.io/ggdiagram/articles/elements.html","id":"definition-vi","dir":"Articles","previous_headings":"","what":"Definition VI","title":"Recreating Figures form Byrne’s Elements of Euclid","text":"circle said circumscribed rectilinear figure, circumference passes vertex angle figure. Figure 10","code":"# Points for inner triangle p <- ob_polar(degree(c(270, 15, 135))) # Circle from 3 points c1 <- circle_from_3_points(p) tangents <- c1@angle_at(p) %>%    c1@tangent_at()  circumscribed <- intersection(   tangents[c(1,1,2)],    tangents[c(2,3,3)]) %>%    ob_polygon(color = black, fill = NA)  baseplot +    ob_polygon(p, fill = blue, color = NA) +    c1 +   circumscribed d <- 1.4 node <- redefault(   ob_circle,   radius = 1 / sqrt(pi),   fill = blue,   alpha = .5,   color = blue,   linewidth = 1 ) ct <- redefault(   connect,   resect = 1,   color = black,   alpha = .3,   linewidth = .75,   length_head = 5 )  transition <- redefault(   ob_rectangle,   height = 1,   width = 1,   color = black,   fill = black,   alpha = .3,   linewidth = .75 ) ggdiagram(font_family = \"Roboto Condensed\", font_size = 20) +   {waiting <- node()} +   {critical <- node() %>% place(waiting, \"below\", d)} +   {s <- node() %>% place(critical, \"below\", d)    s1 <- node(fill = red, color = red) %>% place(s, \"left\", 0)    }  +   {s2 <- node(fill = red, color = red) %>% place(s, \"right\", 0)} +   {leave <- transition() %>% place(critical, \"right\", d)} +    {enter <- transition() %>% place(critical, \"left\", d)} +    {s3 <- node() %>% place(s, \"below\", d)} +    {e2 <- transition() %>% place(s3, \"left\", d)} +   {l2 <- transition() %>% place(s3, \"right\", d)} +   {s4 <- node() %>% place(s3, \"below\", d)} +   bind(c(waiting@center,           s4@center,           s2@center + ob_polar(degree(c(90, 210, 330)), .2))) %>% set_props(color = black, fill = NA_character_, size = 4, alpha = 1) +   bind(c(     ct(enter, bind(c(critical, s1))),     ct(critical, leave),     ct(s1, bind(c(leave, l2))),     ct(leave, s2),     ct(s2, bind(c(enter, e2))),     ct(e2, bind(c(s1, s3))),     ct(l2, s2),     ct(s3, l2)   )) +   ob_bezier(c(bind(c(waiting@point_at(\"west\"),                    waiting@center %-|% enter@center,                    enter@point_at(\"north\"))),               bind(c(s4@point_at(\"west\"),                    s4@center %-|% e2@center,                    e2@point_at(\"south\"))),               bind(c(l2@point_at(\"south\"),                    l2@center %|-% s4@center,                    s4@point_at(\"east\"))),               bind(c(leave@point_at(\"north\"),                    leave@center %|-% waiting@center,                    waiting@point_at(\"east\")))),              resect = 2,              arrow_head = arrowheadr::arrow_head_deltoid(2.3),              linewidth = .75,              color = black,             alpha = .5,length_head = 5) +   ob_latex(     \"s\",     ob_point() %>% place(s1, \"left\", .15),     color = red,     hjust = 1,     fill = NA,     width = .4,     density = 600   ) +   ob_latex(     \"\\\\bar{s}\",     ob_point() %>% place(s2, \"right\", .15),     color = red,     fill = NA,     hjust = 0,     width = .4,     density = 600   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Ellipses","text":"avoid repetitive code, set defaults make base plot: common way specify ellipse center point two distances center point c horizontal vertical edges, b, respectively. (x−cxa)2+(y−cyb)2=1\\left(\\frac{x-c_x}{}\\right)^2+\\left(\\frac{y-c_y}{b}\\right)^2=1 Figure 1: ellipse can specified center, semi-major radii.","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4)) a <- 4 b <- 3 c1 <- ob_point(0,0) e1 <- ob_ellipse(c1, a = a, b = b) bp +    e1 +    ob_segment(c1,            ob_point(c(a, 0), c(0, b)),            color = my_colors,            label = ob_label(             label = paste0(c(\"*a* = \", \"*b* = \"),                             c(a, b)),              angle = 0)) +   c1"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Ellipses","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow)"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Ellipses","text":"avoid repetitive code, set defaults make base plot: common way specify ellipse center point two distances center point c horizontal vertical edges, b, respectively. (x−cxa)2+(y−cyb)2=1\\left(\\frac{x-c_x}{}\\right)^2+\\left(\\frac{y-c_y}{b}\\right)^2=1 Figure 1: ellipse can specified center, semi-major radii.","code":"my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4)) a <- 4 b <- 3 c1 <- ob_point(0,0) e1 <- ob_ellipse(c1, a = a, b = b) bp +    e1 +    ob_segment(c1,            ob_point(c(a, 0), c(0, b)),            color = my_colors,            label = ob_label(             label = paste0(c(\"*a* = \", \"*b* = \"),                             c(a, b)),              angle = 0)) +   c1"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"foci","dir":"Articles","previous_headings":"","what":"Foci","title":"Ellipses","text":"circle one focus, center. ≠ b, ellipse two foci. Figure 2: ellipse two foci point P ellipse, sum PF1 PF2 2a > b 2b b > . Figure 3: sum distances foci constant.","code":"bp +    e1 +    ob_label(\"*F*~1~\", e1@focus_1, plot_point = T, vjust = 1.2) +   ob_label(\"*F*~2~\", e1@focus_2, plot_point = T, vjust = 1.2) deg <- degree(61.5)  bp +    e1 +    ob_label(\"*F*~1~\", e1@focus_1, plot_point = T, vjust = 1.2) +   ob_label(\"*F*~2~\", e1@focus_2, plot_point = T, vjust = 1.2) +    {p <- e1@point_at(deg)} +   p@label(\"*P*\", polar_just = ob_polar(deg, 1.5)) +   ob_segment(e1@focus_1,            p,            label = paste0(\"*PF*~1~ = \",                          distance(e1@focus_1, p) |>                            round())) +    ob_segment(p,            e1@focus_2,            label = paste0(\"*PF*~2~ = \",                          distance(e1@focus_2, p) |>                             round())) +    ob_label(\"*PF*~1~ + *PF*~2~ = 2*a* = 8\",          center = ob_point(0,4),          size = 20)"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"point-on-the-ellipse-at-a-specific-angle","dir":"Articles","previous_headings":"","what":"Point on the ellipse at a specific angle","title":"Ellipses","text":"@point_at property ob_ellipse object function can find point specific angle. Figure 4: Point ellipse 45° x-axis.","code":"e1@point_at(degree(60)) #> <ggdiagram::ob_point> #> @ x: num 1.59 #> @ y: num 2.75 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics deg <- degree(60) bp +   e1 +   {p45 <- e1@point_at(deg)} +   p45@label(polar_just = ob_polar(deg, 1.5)) +   ob_segment(e1@center, p45) +   ob_arc(     center = e1@center,     radius = 1,     start = degree(0),     end = deg,     label = deg   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"point-on-the-ellipse-using-definitional-parameter-t","dir":"Articles","previous_headings":"","what":"Point on the ellipse using definitional parameter t","title":"Ellipses","text":"angle expected @point_at function true angle. However, parametric equation ellipses parameter t looks like angle, actually direct geometric interpretation: t=[0,2π)(x,y)=(acos(t),bsin(t)) \\begin{aligned} t&=[0,2\\pi)\\\\ (x,y) &= (\\cos(t),b\\sin(t)) \\end{aligned} Figure 5: ellipse’s definitional parameter t always line angles circle definitional point t desired:","code":"theta <- degree(seq(0, 350, 30))  bp +    {c1 = ob_circle(radius = 3.6, color = \"gray30\")} +   {e1 <- ob_ellipse(a = 2.8, b = 1)} +   {p1 <- c1@point_at(theta)} +   ob_label(theta, p1, polar_just = ob_polar(theta, r = 1.5)) +   ob_segment(ob_point(), p1, linewidth = .2) +   {p2 <- e1@point_at(theta, definitional = T, color = \"dodgerblue\")} +   ob_segment(ob_point(), p2) +    ob_label(theta@degree, p2, polar_just = ob_polar(theta, r = 1.5)) +   theme_void() ob_ellipse(a = 2)@point_at(degree(60), definitional = TRUE) #> <ggdiagram::ob_point> #> @ x: num 1 #> @ y: num 1.73 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"tangent-lines","dir":"Articles","previous_headings":"","what":"Tangent lines","title":"Ellipses","text":"Like @point_at property, @tangent property function find tangent line specified angle point. Figure 6: Tangent lines ellipse @tangent function can also take point instead angle.  point ellipse, tangent point’s projection onto ellipse:","code":"bp +    {e1 <- ob_ellipse(a = 3, b = 2)} +    e1@point_at(60, color = \"firebrick4\") +    e1@tangent_at(60, color = \"firebrick4\") bp +    e1 +    {p1 <- e1@point_at(60)} +   e1@tangent_at(p1) bp +    e1 +    {p1 <- ob_point(3, 2, color = \"firebrick4\")} +   e1@tangent_at(p1) +    projection(p1, e1)"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"superellipses","dir":"Articles","previous_headings":"","what":"Superellipses","title":"Ellipses","text":"standard formula ellipse can altered squared entities can raised positive number. (x−cxa)m1+(y−cyb)m2=1 \\left(\\frac{x-c_x}{}\\right)^{m_1}+\\left(\\frac{y-c_y}{b}\\right)^{m_2}=1 m2 set equal m1 unless otherwise specified. m1 4, b equal, can make squircle, square-ish circle. Figure 7: squircle increase m1 high value like 10, can rectangle pleasingly rounded corners. Figure 8: superellipse can look like rectangle rounded corners.","code":"bp +    ob_ellipse(a = 3,            b = 3,            m1 = 4) bp +   ob_ellipse(     a = 3,     b = 3,     m1 = 10,     color = NA,     fill = \"dodgerblue\",     label = ob_label(       label = \"My<br>Variable\",       fill = NA,       color = \"white\",       size = 70     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"connection-paths-among-ellipses","dir":"Articles","previous_headings":"","what":"Connection Paths Among Ellipses","title":"Ellipses","text":"Figure 9: Connections ellipses","code":"bp +    {e1 <- ob_ellipse(ob_point(-2,0), a = 2)} +   {e2 <- ob_ellipse(ob_point(3,2), b = 2)} +   connect(e1, e2, resect = 2)"},{"path":"https://wjschne.github.io/ggdiagram/articles/ellipses.html","id":"placing-ellipses","dir":"Articles","previous_headings":"","what":"Placing Ellipses","title":"Ellipses","text":"place function set object position distance another object. set ellipse right e1 (.e., “east” 0 degrees) separation 2. Figure 10: Place ellipse 2 units right another ellipse. sep parameter place function necessarily shortest distance ellipses. Instead, distance ellipses segment connecting center points. Figure 11: separation distance ellipses along path connects centers. can place many ellipses . Figure 12, 12 ellipses placed around central ellipse. Connection paths drawn ellipse. Figure 12: Many ellipses can placed . Lines can placed relation ellipses: Figure 13: line placed 3 units 45 degrees squircle.","code":"bp +    {e1 <- ob_ellipse(center = ob_point(-2, 0),                   a = 2)} +   place(ob_ellipse(b = 2),          from = e1,          where = \"right\",          sep = 2) deg <- degree(30)  bp +    {e1 <- ob_ellipse(     center = ob_point(-2,-1, color =  \"dodgerblue4\"),      a = 2,      b = 1.5)} +   {e2 <- place(     ob_ellipse(       center = ob_point(color = \"orchid4\"),       b = 2),     from = e1,      where = deg,      sep = 2)} +    connect(     e1,     e2,     arrow_head = ggarrow::arrow_head_minimal(),     linetype = \"dashed\",     label = ob_label(2, vjust = 0)   ) +   ob_arc(e1@center, end = deg, label = deg) +    ob_segment(e1@center,               e1@point_at(deg)) +    ob_segment(e2@center,               e2@point_at(deg + degree(180))) +    ob_label(\"*e*~1~\", e1@center) +    ob_label(\"*e*~2~\", e2@center) # Number of ellipses k <- 12  # Colors e_fills <- hsv(   h = seq(0, 1 - 1 / k, length.out = k),    s = .4,    v = .6)  bp +    {e_0 <- ob_ellipse(     m1 = 6,     label = ob_label(       \"*e*~0~\",       size = 40,       color = \"white\",       fill = \"gray20\"     ),     color = NA,     fill = \"gray20\"   )} +    {e_x <- place(     x = ob_ellipse(       a = .4,       b = .4,       m1 = 6,       label = ob_label(         paste0(\"*e*~\", seq(k), \"~\"),         color = \"white\",         fill = e_fills       ),       color = NA,       fill = e_fills     ),     from = e_0,     where = degree(seq(0, 360 - 360 / k, 360 / k)),     sep = 2   )} +   connect(e_0, e_x, resect = 2, color = e_fills) +    theme_void() bp +    {e1 <- ob_ellipse(m1 = 4)} +   {l1 <- place(     x = ob_line(),     from = e1,     where = {deg1 <- degree(45)},     sep = {d = 3}   )} +    connect(     e1,     l1,     label = paste0(\"Distance = \", d),     arrow_fins = arrowheadr::arrow_head_deltoid(),     length_fins = 8,     length_head = 8,     resect = 1   ) +    ob_label(     label = l1@equation,     center = ob_polar(theta = deg1,                        r = e1@point_at(deg1)@r + d),     angle = l1@angle,     vjust = 0   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/equations.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Equations with LaTeX","text":"","code":"library(ggplot2) library(ggdiagram) library(tibble) library(dplyr) library(purrr) library(ggarrow)"},{"path":"https://wjschne.github.io/ggdiagram/articles/equations.html","id":"advantages-of-ob_label-over-ob_latex","dir":"Articles","previous_headings":"","what":"Advantages of ob_label over ob_latex","title":"Equations with LaTeX","text":"ob_label function uses ggtext::geom_richtext create labels. ’s primary advantage simple renders quickly. Wherever possible, recommended way create labels. understands basic markdown formatting (e.g., italics, bolding, subscripts, superscripts) well HTML tags (e.g., span img).","code":""},{"path":"https://wjschne.github.io/ggdiagram/articles/equations.html","id":"advantages-of-ob_latex-over-ob_label","dir":"Articles","previous_headings":"","what":"Advantages of ob_latex over ob_label","title":"Equations with LaTeX","text":"something elaborate needed italics, bolding, subscripts, superscripts, can use LaTeX instead. ob_latex function can place image LaTeX equation ggplot diagram. example, suppose want label latent variable’s variance symbol σe2\\sigma_e^2. symbol difficult render pure HTML, can render LaTeX instead. Figure 1: Latent variable variance want symbol font rest figure, can trick LaTeX giving us font installed system. often use Roboto Condensed: Figure 2: Latent variable variance rendered Roboto Condensed need equation plot requires something 1:1 aspect ratio, can set aspect ratio equation aspect ratio plot. Figure 3: Normal distribution’s probability density function","code":"ggdiagram(font_family = \"Roboto Condensed\") +   {l <- ob_circle(label = ob_label(\"*e*\", size = 48))} +   {lv <- ob_variance(l)} +   ob_latex(tex = \"\\\\sigma_e^2\",            center = lv@midpoint(),             width = .4) ggdiagram(font_family = \"Roboto Condensed\") +   {l <- ob_circle(label = ob_label(\"*e*\", size = 48))} +   {lv <- ob_variance(l)} +   ob_latex(tex = r\"(\\text{\\emph{σ}}_{\\text{\\emph{e}}}^{\\text{2}})\",            center = lv@midpoint(),             width = .4,             family = \"Roboto Condensed\") mu <- 50 sigma <- 10 ratio <- (4 * sigma)  / dnorm(mu, mu, sigma)  ggplot() +   coord_fixed(ratio = ratio) +   theme_classic(base_family = \"Roboto Condensed\") +   theme(axis.line = element_blank(), axis.title.x = element_markdown()) +   stat_function(     fun = \\(x) dnorm(x, mean = mu, sd = sigma),     geom = \"area\",     n = 1000,     fill = \"dodgerblue\",     alpha = .5   ) +   scale_x_continuous(NULL,                      breaks = mu + seq(-4 * sigma, 4 * sigma, sigma),                       limits = mu + c(-4 * sigma, 4 * sigma, sigma)) +   scale_y_continuous(     NULL,     breaks = NULL,     limits = c(0, dnorm(mu, mu, sigma)),     expand = expansion()   ) +   ob_latex(     r\"(f(x) =     \\frac{1}{\\sigma\\sqrt{2\\pi}}     e^{-\\frac{1}{2}     \\left(\\frac{x-\\mu}{\\sigma}\\right)^2})\",     width = sigma * 3,     aspect_ratio = ratio,     border = 1,     filename = \"zscore\",     density = 600   ) |>   place(ob_point(mu + sigma * .7, dnorm(mu + sigma * .7, mu, sigma)),          where = \"right\",          sep = 3) +    ob_label(label = paste0(\"*&mu;* = \", mu),             ob_point(mu, 0),             vjust = 0,            fill = NA,            color = \"gray30\") +   connect(     {p_mu <- ob_point(x = mu, y = dnorm(mu + sigma, mu, sigma))},     {p_sigma <- p_mu + ob_point(sigma, 0)},     label = ob_label(       paste0(\"*&sigma;* = \", sigma),       fill = NA,       vjust = 0,       color = \"gray30\"     )   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/equations.html","id":"text-color-and-background-fill-color","dir":"Articles","previous_headings":"","what":"Text Color and Background Fill Color","title":"Equations with LaTeX","text":"text color black default. can set color via color property. background color LaTeX expression white default. LaTeX expression placed inside object filled background, might want give expression background fill color. Figure 4: Altering text color background fill color. course, can always manipulate text color via LaTeX. Figure 5: Latex Colors convenience, latex-color function surround expression right LaTeX expression change color. Figure 6: Using latex_color alter text color LaTeX expressions.","code":"ggdiagram() +   ob_circle(fill = \"dodgerblue4\", color = NA) +   ob_latex(     \"A+B+C=D\",     center = ob_point(),     color = \"white\",     fill = \"dodgerblue4\",     density = 900,     width = 1.5   ) ggdiagram() +   ob_circle() +   ob_latex(\"Y={\\\\color[HTML]{CD69C9} X_1^2} + {\\\\color[HTML]{228B22} X_2^2}\") ggdiagram() +   ob_circle() +   ob_latex(paste0(\"Y=\",                    latex_color(\"X_1^2\", color = \"orchid3\"),                   \"+\",                   latex_color(\"X_2^2\", color = \"forestgreen\")))"},{"path":"https://wjschne.github.io/ggdiagram/articles/equations.html","id":"rotation","dir":"Articles","previous_headings":"","what":"Rotation","title":"Equations with LaTeX","text":"LaTeX expression can rotated setting angle property. Figure 7: Rotated equation","code":"ggdiagram(theme_function = ggplot2::theme_minimal, font_size = 20) +   {s <- connect(ob_point(), ob_point(3,4))} +   ob_latex(\"\\\\left\\\\lVert\\\\vec{x}\\\\right\\\\rVert=5\",             center = s@midpoint(),             height = .35,            density = 900,            angle = s@line@angle,             vjust = -.1) +    ob_latex(     paste0(\"\\\\vec{x}=\", s@p2@auto_label),     vjust = 1.2,     hjust = 1.3,     center = s@p2,     height = .3,     density = 600   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/equations.html","id":"image-quality","dir":"Articles","previous_headings":"","what":"Image quality","title":"Equations with LaTeX","text":"default density ob_latex images 300 dots per inch. small expression displayed large image, appear pixelated. Figure 8: latex expression poor image quality Setting density higher value usually create better image. Figure 9: latex expression better image quality Higher densities always better, however. addition using memory rendering slowly, images high densities sometimes appear blurry pixelated.","code":"ggdiagram() +   ob_circle(radius = 1) +   ob_latex(\"X_i^2\",             width = 1.25) ggdiagram() +   ob_circle(radius = 1) +   ob_latex(\"X_i^2\",             width = 1.25,            density = 900)"},{"path":"https://wjschne.github.io/ggdiagram/articles/equations.html","id":"how-does-ob_latex-work","dir":"Articles","previous_headings":"","what":"How does ob_latex work?","title":"Equations with LaTeX","text":"ob_latex function works steps: Create .tex file content based LaTeX standalone package. Create .pdf file via tinytex::xelatex function, tinytex available. Otherwise, use xelatex via shell command. Import .pdf file raster bitmap via magick::image_read_pdf function. Store raster bitmap ob_latex@image slot. rendered ggplot2, bitmap displayed via ggplot2::annotation_raster.","code":""},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Lines","text":"avoid repetitive code, set defaults make base plot:","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Lines","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow)"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Lines","text":"avoid repetitive code, set defaults make base plot:","code":"my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"making-lines","dir":"Articles","previous_headings":"","what":"Making Lines","title":"Lines","text":"Lines can constructed slope intercept: Figure 1: line slope 2 intercept 1 default slope 0, horizontal ob_line can set just intercept: Figure 2: horizontal line intercept 2 vertical line can set x-intercept: Figure 3: Vertical line x = −2 line—horizontal, vertical, sloped—can constructed coefficients general form line: ax++c=0 ax++c=0 Figure 4: Line slope = 0 intercept = −2 respect general form, slope equal −ab-\\frac{}{b}, y-intercept equal −cb-\\frac{c}{b}, x-intercept equal −ca-\\frac{c}{}","code":"l <- ob_line(slope = 2, intercept = 1, color = my_colors[1]) l #> <ggdiagram::ob_line> #> @ slope     : num 2 #> @ intercept : num 1 #> @ xintercept: num -0.5 bp +   l +   l@point_at_y(0)@label(l@equation, angle = l@angle) h <- ob_line(intercept = 2, color = my_colors[1]) h #> <ggdiagram::ob_line> #> @ slope     : num 0 #> @ intercept : num 2 #> @ xintercept: num -Inf bp +    h +    h@point_at_x(0)@label(h@equation) v <- ob_line(xintercept = -2, color = my_colors[1]) v #> <ggdiagram::ob_line> #> @ slope     : num -Inf #> @ intercept : num -Inf #> @ xintercept: num -2 bp +    v +    v@point_at_y(0)@label(equation(v), angle = v@angle * -1) l_123 <- ob_line(a = 1, b = 2, c = 3, color = my_colors[1]) bp +   l_123 +   l_123@point_at_x(     x = 0)@label(       equation(l_123, type = \"general\"),        angle = l_123@angle)"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Lines","text":"point can “projected” onto line. Imagine shining light point direction perpendicular line. point’s shadow line shortest distance line point. shortest distance point line can calculated. Figure 5: Shortest distance line point","code":"p <- ob_point(3,-2, color = my_colors[2]) l <- ob_line(slope = 2, intercept = 2, color = my_colors[1]) # Point p projected onto line l p_projected <- projection(p, l)  # Alternately: l@projection(p) #> <ggdiagram::ob_point> #> @ x: num -1 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics # distance from point p to line l distance(p, l) #> [1] 4.472136  # Equivalently: ob_segment(p, l@projection(p))@distance #> [1] 4.472136 bp +   l +   l@point_at_x(.5)@label(     label = l@equation,      angle = l@angle) +   {s_projected <- ob_segment(       p1 = l@projection(p),       p2 = p,       linetype = \"dashed\",       label = paste0(\"Distance = \",                       distance(l@projection(p), p) |>                        round(digits = 2) |>                        as.character()))} +    s_projected@midpoint(c(0, 1))@label(     polar_just = degree(s_projected@line@angle) + c(180, 0),     plot_point = TRUE)"},{"path":"https://wjschne.github.io/ggdiagram/articles/lines.html","id":"projections-and-distances","dir":"Articles","previous_headings":"","what":"Projections and Distances","title":"Lines","text":"point can “projected” onto line. Imagine shining light point direction perpendicular line. point’s shadow line shortest distance line point. shortest distance point line can calculated. Figure 5: Shortest distance line point","code":"p <- ob_point(3,-2, color = my_colors[2]) l <- ob_line(slope = 2, intercept = 2, color = my_colors[1]) # Point p projected onto line l p_projected <- projection(p, l)  # Alternately: l@projection(p) #> <ggdiagram::ob_point> #> @ x: num -1 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics # distance from point p to line l distance(p, l) #> [1] 4.472136  # Equivalently: ob_segment(p, l@projection(p))@distance #> [1] 4.472136 bp +   l +   l@point_at_x(.5)@label(     label = l@equation,      angle = l@angle) +   {s_projected <- ob_segment(       p1 = l@projection(p),       p2 = p,       linetype = \"dashed\",       label = paste0(\"Distance = \",                       distance(l@projection(p), p) |>                        round(digits = 2) |>                        as.character()))} +    s_projected@midpoint(c(0, 1))@label(     polar_just = degree(s_projected@line@angle) + c(180, 0),     plot_point = TRUE)"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Paths","text":"avoid repetitive code, make base plot:","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Paths","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow)"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Paths","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"paths","dir":"Articles","previous_headings":"","what":"Paths","title":"Paths","text":"path function creates object connects points along path. Figure 1: Plotting path.","code":"p <- ob_point(c(-4,-3,4), c(0,-2, 0), color = \"dodgerblue\") bp +    ob_path(p) +   p"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"path-labels","dir":"Articles","previous_headings":"","what":"Path Labels","title":"Paths","text":"label path created geomtextpath::geom_labelpath, thus curve path curved. Figure 2: path curved label can control position path label either label’s position hjust properties. Figure 3: path curved label position .1","code":"p_curve <- tibble(x = seq(-4, 4, .1),                    y = (pnorm(x) * 8 - 4)) |>   ob_point()    bp +   ob_path(     p = p_curve,     label = ob_label(       \"A path label will curve along the path.\",       vjust = -.1,       size = 20,       color = \"dodgerblue4\"     ),     arrowhead_length = 8,     arrow_head = my_arrowhead   ) bp +   ob_path(     p = p_curve,     label = ob_label(       \"A path label will curve along the path.\",       vjust = -.1,       size = 20,       color = \"dodgerblue4\",       position = .1     ),     arrowhead_length = 8,     arrow_head = my_arrowhead   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"multiple-paths","dir":"Articles","previous_headings":"","what":"Multiple paths","title":"Paths","text":"create multiple paths , specify list vector point objects. Figure 4: Multiple paths","code":"bp +   ob_path(c(p_curve,           p_curve * .5 + ob_point(2,-2),          p_curve * .5 + ob_point(-2,2)),         color = c(\"orchid4\",                  \"dodgerblue3\",                  \"firebrick4\"),        label = c(\".52\", \".42\", \".61\"))"},{"path":"https://wjschne.github.io/ggdiagram/articles/paths.html","id":"segments","dir":"Articles","previous_headings":"","what":"Segments","title":"Paths","text":"possible create color gradients along path using paths’ segments.","code":"ggdiagram() +   ob_path(p_curve)@segments %>%    set_props(color = viridis::viridis(p_curve@length - 1))"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Points","text":"avoid repetitive code, make base plot:","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(arrowheadr) my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Points","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(arrowheadr)"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Points","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"points","dir":"Articles","previous_headings":"","what":"Points","title":"Points","text":"Points x y coordinates. Figure 1: Creating points point’s x y coordinates can specified polar coordinates @r: distance origin point (.e., vector’s magnitude) @theta: angle (radians) line x-axis line containing vector. Figure 2: Polar Coordinates point can created polar coordinates angle numeric instead angle, assumed radians.","code":"p1 <- ob_point(1, 2, color = \"firebrick\") p2 <- ob_point(3, 4, color = \"royalblue3\")  bp +    p1 +    p2 p2 #> <ggdiagram::ob_point> #> @ x: num 3 #> @ y: num 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p2@r #> [1] 5 p2@theta #> 0.3π bp +   coord_equal(xlim = c(-p2@r, p2@r),                ylim = c(-p2@r, p2@r)) +   scale_x_continuous(breaks = -10:10,                       minor_breaks = NULL,                       labels = signs_centered) +   scale_y_continuous(breaks = -10:10,                       minor_breaks = NULL,                       labels = signs::signs) +   ob_circle(radius = p2@r) +   p2@label(plot_point = TRUE,             size = 16,            polar_just = ob_polar(p2@theta, r = 1.5)) +   ob_segment(p1 = ob_point(),            p2 = p2,            label = ob_label(paste0(\"*r* = \", round(p2@r, 2)),                            size = 16,                            vjust = 0)) +     ob_arc(      end = p2@theta,      color = \"royalblue3\",      label = ob_label(        paste0(\"&theta; = \",                degree(p2@theta)),        size = 16,         color = \"royalblue3\")) ob_polar(r = 5, theta = degree(60)) #> <ggdiagram::ob_polar> #> @ x    : num 2.5 #> @ y    : num 4.33 #> @ r    : num 5 #> @ theta: <ggdiagram::radian> #>  @ radian: num 1.05 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, style, tibble, xy, #>              geom, label, place, aesthetics ob_polar(r = 1, theta = pi)@theta #> π"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"polar-coordinates","dir":"Articles","previous_headings":"","what":"Polar Coordinates","title":"Points","text":"point’s x y coordinates can specified polar coordinates @r: distance origin point (.e., vector’s magnitude) @theta: angle (radians) line x-axis line containing vector. Figure 2: Polar Coordinates point can created polar coordinates angle numeric instead angle, assumed radians.","code":"p2 #> <ggdiagram::ob_point> #> @ x: num 3 #> @ y: num 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p2@r #> [1] 5 p2@theta #> 0.3π bp +   coord_equal(xlim = c(-p2@r, p2@r),                ylim = c(-p2@r, p2@r)) +   scale_x_continuous(breaks = -10:10,                       minor_breaks = NULL,                       labels = signs_centered) +   scale_y_continuous(breaks = -10:10,                       minor_breaks = NULL,                       labels = signs::signs) +   ob_circle(radius = p2@r) +   p2@label(plot_point = TRUE,             size = 16,            polar_just = ob_polar(p2@theta, r = 1.5)) +   ob_segment(p1 = ob_point(),            p2 = p2,            label = ob_label(paste0(\"*r* = \", round(p2@r, 2)),                            size = 16,                            vjust = 0)) +     ob_arc(      end = p2@theta,      color = \"royalblue3\",      label = ob_label(        paste0(\"&theta; = \",                degree(p2@theta)),        size = 16,         color = \"royalblue3\")) ob_polar(r = 5, theta = degree(60)) #> <ggdiagram::ob_polar> #> @ x    : num 2.5 #> @ y    : num 4.33 #> @ r    : num 5 #> @ theta: <ggdiagram::radian> #>  @ radian: num 1.05 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, style, tibble, xy, #>              geom, label, place, aesthetics ob_polar(r = 1, theta = pi)@theta #> π"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"convert-to-tibble","dir":"Articles","previous_headings":"","what":"Convert to tibble","title":"Points","text":"extract styles set. convenience, tibble associated point object can accessed @tibble property.","code":"get_tibble(ob_point(1,2,                   color = \"red\",                   shape = 16)) #> # A tibble: 1 × 4 #>       x     y color shape #>   <dbl> <dbl> <chr> <dbl> #> 1     1     2 red      16 ob_point(1:5,2,        color = \"blue\",        shape = 1:5)@tibble #> # A tibble: 5 × 4 #>       x     y color shape #>   <int> <dbl> <chr> <int> #> 1     1     2 blue      1 #> 2     2     2 blue      2 #> 3     3     2 blue      3 #> 4     4     2 blue      4 #> 5     5     2 blue      5"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Points","text":"Points can added subtracted: Points can scaled constants x y coordinates can scaled separately points:","code":"p1 <- ob_point(2, 3) p2 <- ob_point(2, 1) p3 <- p1 + p2 p3 #> <ggdiagram::ob_point> #> @ x: num 4 #> @ y: num 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p3 - p2 #> <ggdiagram::ob_point> #> @ x: num 2 #> @ y: num 3 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p2 * 2 #> <ggdiagram::ob_point> #> @ x: num 4 #> @ y: num 2 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p3 / 4 #> <ggdiagram::ob_point> #> @ x: num 1 #> @ y: num 1 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p1 / p3 #> <ggdiagram::ob_point> #> @ x: num 0.5 #> @ y: num 0.75 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p1 * p3 #> <ggdiagram::ob_point> #> @ x: num 8 #> @ y: num 12 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"arithmetic","dir":"Articles","previous_headings":"","what":"Arithmetic","title":"Points","text":"Points can added subtracted: Points can scaled constants x y coordinates can scaled separately points:","code":"p1 <- ob_point(2, 3) p2 <- ob_point(2, 1) p3 <- p1 + p2 p3 #> <ggdiagram::ob_point> #> @ x: num 4 #> @ y: num 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p3 - p2 #> <ggdiagram::ob_point> #> @ x: num 2 #> @ y: num 3 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p2 * 2 #> <ggdiagram::ob_point> #> @ x: num 4 #> @ y: num 2 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p3 / 4 #> <ggdiagram::ob_point> #> @ x: num 1 #> @ y: num 1 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p1 / p3 #> <ggdiagram::ob_point> #> @ x: num 0.5 #> @ y: num 0.75 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics p1 * p3 #> <ggdiagram::ob_point> #> @ x: num 8 #> @ y: num 12 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"distance","dir":"Articles","previous_headings":"","what":"Distance","title":"Points","text":"distance two points: shortest distance point line: shortest distance point circle’s edge: Figure 3: Point Circle Distances","code":"distance(p1, p2) #> [1] 2 l1 <- ob_line(slope = 1,             intercept = 2) distance(p1, l1) #> [1] 0.7071068 c1 <- ob_circle(center = ob_point(2, 2), radius = 2) p1 <- c1@center + ob_polar(   r = c1@radius * 1,    theta = degree(115),    color = \"royalblue3\")  p2 <- c1@center + ob_polar(   r = c1@radius * 2,    theta = degree(45),    color = \"firebrick4\")  p3 <- c1@center + ob_polar(   r = c1@radius * .3,    theta = degree(190),    color = \"orchid4\")   # p1 is on circle, so its distance is 0 distance(p1, c1) #> [1] 0 # p2 is outside the circle distance(p2, c1) #> [1] 2 # p3 is inside the circle distance(p3, c1) #> [1] 1.4 intersect_c1_p2 <- c1@point_at((p2 - c1@center)@theta)  seg_style <- ob_style(   arrowhead_length = 7,   arrow_head = my_arrowhead,   arrow_fins = my_arrowhead,   resect = unit(5, \"pt\") )  seg_c1_p2 <- ob_segment(   intersect_c1_p2,   p2,    style = seg_style,    label = scales::number(distance(intersect_c1_p2, p2), .1))  intersect_c1_p3 <- c1@point_at((p3 - c1@center)@theta)  seg_c1_p3 <- ob_segment(   intersect_c1_p3,   p3,   color = p3@color,    label = scales::number(distance(intersect_c1_p3, p3), .1),   style = seg_style)  p_labels <- subscript(\"P\", 1:3)  bp +   c1 +   p1@label(label = p_labels[1],             plot_point = T,            polar_just = ob_polar(              theta = (p1 - c1@center)@theta,              r = 1.3)) +   seg_c1_p2 +   seg_c1_p2@midpoint(c(0,1)) +   seg_c1_p2@midpoint(1)@label(     label = p_labels[2],      polar_just = ob_polar(theta = seg_c1_p3@line@angle, 1.5)) +   seg_c1_p3 +   seg_c1_p3@midpoint(c(0,1)) +   seg_c1_p3@midpoint(c(1))@label(     label = p_labels[3],      polar_just = ob_polar(theta = seg_c1_p3@line@angle, 1.5)) #> Warning: Removed 1 rows containingmissingvalues (`geom_arrow_segment()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_rich_text()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_rich_text()`)."},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"convert-points-to-geoms","dir":"Articles","previous_headings":"","what":"Convert points to geoms","title":"Points","text":".geom function called implicitly whenever point object added ggplot. Figure 4 equivalent Figure 5 equivalent Figure 6 , style information can mapped handled via (identity) function mapping statement (aes). Calling .geom function directly useful overriding style information points. Figure 7 equivalent Figure 8","code":"pts <- ob_point(x = c(3,2),               y = c(4,3),               color = c(\"red\", \"blue\"),              size = c(3, 6))  ggplot() +    pts ggplot() +   as.geom(pts) ggplot() +   geom_point(     aes(       x,       y,       color = I(color),       size = I(size)),      data = get_tibble_defaults(pts)) ggplot() +    as.geom(pts,            stroke = 1.5,           fill = \"yellow\",            shape = \"triangle filled\") ggplot() +   geom_point(     aes(x = x,          y = y,          size = I(size),          color = I(color)),     stroke = 1.5,     fill = \"yellow\",     shape = \"triangle filled\",     data = pts@tibble   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/points.html","id":"bounding-box","dir":"Articles","previous_headings":"","what":"Bounding box","title":"Points","text":"possible find rectangle bounds points ob_point object Figure 9: bounding box set points","code":"bp +    {pts <- ob_point(x = 1:4,                 y = c(3,3,4, 2))} +    pts@bounding_box"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Polygons","text":"avoid repetitive code, make base plot:","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(arrowheadr) my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Polygons","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) library(ggtext) library(ggarrow) library(arrowheadr)"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Polygons","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"polygons","dir":"Articles","previous_headings":"","what":"Polygons","title":"Polygons","text":"ob_polygon function creates object connects points make polygon. Figure 1: Plotting path.","code":"p <- ob_point(x = c(-4,-3, 4,  3, -1),             y = c( 0, 4, 3, -3, -4)) bp +    ob_polygon(p, fill = \"dodgerblue3\")"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"polygon-labels","dir":"Articles","previous_headings":"","what":"Polygon Labels","title":"Polygons","text":"label ob_polygon object placed, default, centroid polygon. centroid point whose x coordinate average x coordinates polygon’s points whose y coordinate likewise average point’s y coordinates. Figure 2: path curved label","code":"bp +   ob_polygon(     p = p,     label = ob_label(       \"My<br>Polygon\",       size = 20,       color = \"white\"     ),     fill = \"dodgerblue4\"   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"connecting-polygons","dir":"Articles","previous_headings":"","what":"Connecting polygons","title":"Polygons","text":"Connections polygons arrows emanate point towards polygons’ centroids. Figure 3: Arrow two polygons","code":"bp +    {p1 <- ob_polygon(.5 * p - ob_point(1.9,1.9),                fill = \"dodgerblue4\")} +    {p2 <- ob_polygon(.5 * p + ob_point(1.9, 1.9),                fill = \"orchid4\")} +    connect(p1, p2,            resect = 1,            label = \".45\")"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"rounding-polygons","dir":"Articles","previous_headings":"","what":"Rounding polygons","title":"Polygons","text":"@radius property controls radius rounded vertices. must length 1. can given ggplot2::unit numeric value. numeric, understood proportion plot area width. Figure 4: polygon rounded vertices","code":"bp +    ob_polygon(     p,      radius = unit(5, \"mm\"),     fill = \"dodgerblue4\")"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"regular-polygons-ngons","dir":"Articles","previous_headings":"","what":"Regular Polygons (ngons)","title":"Polygons","text":"ob_ngon (regular polygon) can created specifying center point, number sides, radius (distance center vertex). Figure 5, many regular polygons displayed concentrically. Figure 5: Regular polygons Alternately, instead radius, ob_ngon object can specified either side_length apothem (distance center side’s midpoint). Figure 6: ob_ngon object can specificied radius, side_length, apothem.","code":"n <- 10 bp +   ob_ngon(     n = n:1 + 2,     radius = 4 * seq(1, .1, length.out = n) ^ .7,     fill = viridis::viridis(n = n, begin = .2, end = .8) %>%       tinter::lighten(.6),     color = \"white\",     linewidth = 1,     angle = 90   ) bp +    {ng <- ob_ngon(n = 8,                   radius = 4,                   angle = degree(22.5),                  fill = \"dodgerblue4\")} +   ob_segment(     ng@center,     ng@vertices[1],     color = \"white\",     label = ob_label(paste0(\"Radius = \", ng@radius),                       vjust = 1.2,                       fill = NA,                      family = my_font)   ) +   ob_segment(     ng@center,     ng@segments[1]@midpoint(),     color = \"white\",     label = ob_label(paste0(\"Apothem = \", round(ng@apothem, 2)),                       vjust = -.2,                       fill = NA,                      family = my_font)   ) +    ob_label(paste0(\"Side = \",                    round(ng@side_length, 2)),             ng@segments[1]@midpoint(),             angle = ng@segments[1]@line@angle,             vjust = -0.2,            family = my_font)"},{"path":"https://wjschne.github.io/ggdiagram/articles/polygons.html","id":"reuleaux-polygons","dir":"Articles","previous_headings":"","what":"Reuleaux Polygons","title":"Polygons","text":"Start regular polygon odd number sides. pair adjacent vertices, draw arc center vertex opposite side. Amazingly, roll Reuleaux polygon, height constant. means Reuleaux polygon can roll smoothly. Figure 7, Reuleaux triangle made ob_reuleaux function. Figure 7: Reuleaux triangle Figure 8 draw 6 Reuleaux polygons sides ranging 3 13. Figure 8: Six Reuleaux polygons arranged concentrically true Reuleaux polygon even number sides possible, possible draw even-sided figures resemble Reuleaux polygons (Figure 9). figures height roll. Figure 9: Reuleaux-like square Specifying n = 2 create symmetric lens, also Reuleaux polygon. Figure 10: symmetric lens","code":"th <- 275 ggdiagram() +   {x <- ob_reuleaux(     n = 3,     fill = NA,     angle = 45   )} ggdiagram() +   ob_reuleaux(     n = seq(13, 3, -2),     radius = seq(2, 1, -.2),     fill = viridis::viridis(       n = 6,        begin = .2,        end = .8) %>%        tinter::lighten(.6),     color = \"white\",     linewidth = 1   ) ggdiagram() +   ob_reuleaux(     n = 4,     fill = NA,     angle = 45   ) ggdiagram() +   ob_reuleaux(     n = 2,     fill = NA   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Rectangles","text":"avoid repetitive code, make base plot:","code":"library(ggdiagram) library(ggplot2) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggtext) library(ggarrow) library(arrowheadr) my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))  my_colors <- list(   primary = class_color(\"royalblue4\"),   secondary = class_color(\"firebrick4\"),   tertiary = class_color(\"orchid4\"))"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Rectangles","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggtext) library(ggarrow) library(arrowheadr)"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Rectangles","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))  my_colors <- list(   primary = class_color(\"royalblue4\"),   secondary = class_color(\"firebrick4\"),   tertiary = class_color(\"orchid4\"))"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"specifying-a-rectangle","dir":"Articles","previous_headings":"","what":"Specifying a Rectangle","title":"Rectangles","text":"rectangle 4 corners (northeast, northwest, southwest, southeast). center. width height. purpose demonstration, can specify features, though practice necessary. give rectangle function enough information deduce four corners , features calculated. following give rectangle: easy way specify rectangle specify width height points. following rectangles equivalent. Figure 1: Center, Width, Height Figure 2: Specify rectangle height, width, northeast corner rectangle can specified center corner. following rectangles equivalent. example: Figure 3: Specify rectangle center northeast corner rectangle can specified points opposite corners. rectangles equivalent. example, Figure 4: Specify rectangle northeast southwest corners rectangle can specified width 2 points left right side. rectangles equivalent. Figure 5: Specify rectangle width left corners rectangle can specified height 2 points top bottom side. rectangles equivalent. example, Figure 6: Specify rectangle height top corners","code":"# northeast corner ne <- ob_point(4,2)  # northwest corner nw <- ob_point(0,2) # southwest corner sw <- ob_point(0,0) # southeast corner se <- ob_point(4,0) # center point cent <- ob_point(2,1) # width w <- 4 # height h <- 2 r1 <- ob_rectangle(   width = w,   height = h,   center = cent,   color = my_colors$primary,   fill = my_colors$primary@transparentize(.15),   linewidth = 1 ) r1 #> <ggdiagram::ob_rectangle> #> @ center: <ggdiagram::ob_point> #>  @ x: num 2 #>  @ y: num 1 #> @ width : num 4 #> @ height: num 2 #> Other props: label, angle, vertex_radius, alpha, color, fill, #>              linewidth, linetype, area, bounding_box, perimeter, #>              northeast, northwest, southwest, southeast, east, #>              north, west, south, side, length, style, tibble, geom, #>              normal_at, place, point_at, aesthetics double_arrowstyle <- ob_style(   arrow_head = arrow_head_deltoid(),   arrow_fins = arrow_head_deltoid(),   color = my_colors$secondar )  s_east <- r1@side@east@nudge(x = .1) s_east@style <- double_arrowstyle  s_north <- r1@side@north@nudge(y = .1) s_north@style <- double_arrowstyle  rc_plot <- ggplot() +   coord_equal(ylim = c(0, 2.2)) +   scale_y_continuous(breaks = -10:10) +   r1  rc_center <- list(   r1@center,   r1@center@label(     fill = my_colors$primary@lighten(.15),      vjust = -.15)) |>   bind()  rc_width <- s_north |>    set_props(label = ob_label(     label = paste0(\"Width = \", r1@width),     center = midpoint(s_north),     color = my_colors$secondary,     vjust = 0,     label.margin = ggplot2::margin(2, 2, 2, 2, \"pt\")   ))  rc_height <- s_east |>    set_props(label = ob_label(     label = paste0(\"Height = \", r1@height),     center  = midpoint(s_east),     vjust = 0,     color = my_colors$secondary,     angle = -90))   rc_nw <- r1@northwest@label(   plot_point = T,   vjust = 1.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_ne <- r1@northeast@label(   plot_point = T,   vjust = 1.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_sw <- r1@southwest@label(   plot_point = T,   vjust = -.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_se <- r1@southeast@label(   plot_point = T,   vjust = -.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_plot + rc_center + rc_width + rc_height r1 == ob_rectangle(width = w,                 height = h,                 northeast = ne) #> [1] TRUE rc_plot + rc_width + rc_height + rc_ne r1 == ob_rectangle(center = cent,                  northeast = ne) #> [1] TRUE rc_plot + rc_center + rc_ne r1 == ob_rectangle(   northeast = ne,    southwest = sw) #> [1] TRUE rc_plot + rc_sw + rc_ne r1 == ob_rectangle(width = w,                 northwest = nw,                 southwest = sw) #> [1] TRUE rc_plot + rc_width + rc_nw + rc_sw r1 == ob_rectangle(height = h,                 northwest = nw,                 northeast = ne) #> [1] TRUE rc_plot + rc_height + rc_ne + rc_nw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"give-width-height-and-any-point","dir":"Articles","previous_headings":"","what":"Give width, height, and any point","title":"Rectangles","text":"easy way specify rectangle specify width height points. following rectangles equivalent. Figure 1: Center, Width, Height Figure 2: Specify rectangle height, width, northeast corner","code":"r1 <- ob_rectangle(   width = w,   height = h,   center = cent,   color = my_colors$primary,   fill = my_colors$primary@transparentize(.15),   linewidth = 1 ) r1 #> <ggdiagram::ob_rectangle> #> @ center: <ggdiagram::ob_point> #>  @ x: num 2 #>  @ y: num 1 #> @ width : num 4 #> @ height: num 2 #> Other props: label, angle, vertex_radius, alpha, color, fill, #>              linewidth, linetype, area, bounding_box, perimeter, #>              northeast, northwest, southwest, southeast, east, #>              north, west, south, side, length, style, tibble, geom, #>              normal_at, place, point_at, aesthetics double_arrowstyle <- ob_style(   arrow_head = arrow_head_deltoid(),   arrow_fins = arrow_head_deltoid(),   color = my_colors$secondar )  s_east <- r1@side@east@nudge(x = .1) s_east@style <- double_arrowstyle  s_north <- r1@side@north@nudge(y = .1) s_north@style <- double_arrowstyle  rc_plot <- ggplot() +   coord_equal(ylim = c(0, 2.2)) +   scale_y_continuous(breaks = -10:10) +   r1  rc_center <- list(   r1@center,   r1@center@label(     fill = my_colors$primary@lighten(.15),      vjust = -.15)) |>   bind()  rc_width <- s_north |>    set_props(label = ob_label(     label = paste0(\"Width = \", r1@width),     center = midpoint(s_north),     color = my_colors$secondary,     vjust = 0,     label.margin = ggplot2::margin(2, 2, 2, 2, \"pt\")   ))  rc_height <- s_east |>    set_props(label = ob_label(     label = paste0(\"Height = \", r1@height),     center  = midpoint(s_east),     vjust = 0,     color = my_colors$secondary,     angle = -90))   rc_nw <- r1@northwest@label(   plot_point = T,   vjust = 1.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_ne <- r1@northeast@label(   plot_point = T,   vjust = 1.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_sw <- r1@southwest@label(   plot_point = T,   vjust = -.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_se <- r1@southeast@label(   plot_point = T,   vjust = -.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_plot + rc_center + rc_width + rc_height r1 == ob_rectangle(width = w,                 height = h,                 northeast = ne) #> [1] TRUE rc_plot + rc_width + rc_height + rc_ne"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"center-width-and-height","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Center, width, and height","title":"Rectangles","text":"Figure 1: Center, Width, Height","code":"r1 <- ob_rectangle(   width = w,   height = h,   center = cent,   color = my_colors$primary,   fill = my_colors$primary@transparentize(.15),   linewidth = 1 ) r1 #> <ggdiagram::ob_rectangle> #> @ center: <ggdiagram::ob_point> #>  @ x: num 2 #>  @ y: num 1 #> @ width : num 4 #> @ height: num 2 #> Other props: label, angle, vertex_radius, alpha, color, fill, #>              linewidth, linetype, area, bounding_box, perimeter, #>              northeast, northwest, southwest, southeast, east, #>              north, west, south, side, length, style, tibble, geom, #>              normal_at, place, point_at, aesthetics double_arrowstyle <- ob_style(   arrow_head = arrow_head_deltoid(),   arrow_fins = arrow_head_deltoid(),   color = my_colors$secondar )  s_east <- r1@side@east@nudge(x = .1) s_east@style <- double_arrowstyle  s_north <- r1@side@north@nudge(y = .1) s_north@style <- double_arrowstyle  rc_plot <- ggplot() +   coord_equal(ylim = c(0, 2.2)) +   scale_y_continuous(breaks = -10:10) +   r1  rc_center <- list(   r1@center,   r1@center@label(     fill = my_colors$primary@lighten(.15),      vjust = -.15)) |>   bind()  rc_width <- s_north |>    set_props(label = ob_label(     label = paste0(\"Width = \", r1@width),     center = midpoint(s_north),     color = my_colors$secondary,     vjust = 0,     label.margin = ggplot2::margin(2, 2, 2, 2, \"pt\")   ))  rc_height <- s_east |>    set_props(label = ob_label(     label = paste0(\"Height = \", r1@height),     center  = midpoint(s_east),     vjust = 0,     color = my_colors$secondary,     angle = -90))   rc_nw <- r1@northwest@label(   plot_point = T,   vjust = 1.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_ne <- r1@northeast@label(   plot_point = T,   vjust = 1.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_sw <- r1@southwest@label(   plot_point = T,   vjust = -.1,   hjust = 0,   fill = my_colors$primary@lighten(.15) )  rc_se <- r1@southeast@label(   plot_point = T,   vjust = -.1,   hjust = 1,   fill = my_colors$primary@lighten(.15) )  rc_plot + rc_center + rc_width + rc_height"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"northeast-corner-width-and-height","dir":"Articles","previous_headings":"Specifying a Rectangle","what":"Northeast corner, width, and height","title":"Rectangles","text":"Figure 2: Specify rectangle height, width, northeast corner","code":"r1 == ob_rectangle(width = w,                 height = h,                 northeast = ne) #> [1] TRUE rc_plot + rc_width + rc_height + rc_ne"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"give-the-center-and-any-of-the-4-corners","dir":"Articles","previous_headings":"","what":"Give the center and any of the 4 corners","title":"Rectangles","text":"rectangle can specified center corner. following rectangles equivalent. example: Figure 3: Specify rectangle center northeast corner","code":"r1 == ob_rectangle(center = cent,                  northeast = ne) #> [1] TRUE rc_plot + rc_center + rc_ne"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"give-opposite-corners","dir":"Articles","previous_headings":"","what":"Give opposite corners","title":"Rectangles","text":"rectangle can specified points opposite corners. rectangles equivalent. example, Figure 4: Specify rectangle northeast southwest corners","code":"r1 == ob_rectangle(   northeast = ne,    southwest = sw) #> [1] TRUE rc_plot + rc_sw + rc_ne"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"give-width-and-two-points-on-either-side","dir":"Articles","previous_headings":"","what":"Give width and two points on either side","title":"Rectangles","text":"rectangle can specified width 2 points left right side. rectangles equivalent. Figure 5: Specify rectangle width left corners","code":"r1 == ob_rectangle(width = w,                 northwest = nw,                 southwest = sw) #> [1] TRUE rc_plot + rc_width + rc_nw + rc_sw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"give-height-and-two-points-on-top-or-bottom","dir":"Articles","previous_headings":"","what":"Give height and two points on top or bottom","title":"Rectangles","text":"rectangle can specified height 2 points top bottom side. rectangles equivalent. example, Figure 6: Specify rectangle height top corners","code":"r1 == ob_rectangle(height = h,                 northwest = nw,                 northeast = ne) #> [1] TRUE rc_plot + rc_height + rc_ne + rc_nw"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"rectangle-points","dir":"Articles","previous_headings":"","what":"Rectangle points","title":"Rectangles","text":"corners side midpoints can extracted. north point (.e., midpoint north side): Figure 7: named points rectangle Points angle Figure 8: point rectangle angle θ = 60°","code":"r1@north #> <ggdiagram::ob_point> #> @ x: num 2 #> @ y: num 2 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics rc_plot +   purrr::map(     c(       \"east\",       \"north\",       \"west\",       \"south\",       \"northeast\",       \"northwest\",       \"southeast\",       \"southwest\",       \"center\"     ),     \\(x) {       v <- ifelse(grepl(x = x, \"north\"),         1.1,         ifelse(grepl(x = x, \"south|center\"),                 -.1,                 .5))       h <- ifelse(grepl(x = x, \"east\"),                   1.1,                   ifelse(grepl(x = x, \"west\"), -.1, .5))       c(         as.geom(           prop(r1, x)@label(             label = x,             hjust = h,             vjust = v,             fill = my_colors$primary@lighten(.15)           )         ),         as.geom(           prop(r1, x)@label(hjust = 1 - h, vjust = 1 - v),           fill = ifelse(x == \"center\",                          my_colors$primary@lighten(.15),                          \"white\")         ),         as.geom(prop(r1, x))       )     }   ) +   coord_equal(xlim = c(-.25, 4.25), ylim = c(-.25, 2.25)) theta <- degree(60) r1@point_at(theta) #> <ggdiagram::ob_point> #> @ x: num 2.58 #> @ y: num 2 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics r1_theta <- r1@point_at(theta)  rc_plot +   ob_segment(r1@center, r1_theta) +   r1_theta@label(     polar_just = ob_polar(theta, 1.5),      plot_point = T) +   ob_arc(center = r1@center,       radius = .5,       end = theta,       label = ob_label(theta,                      fill = my_colors$primary@lighten(.15),                      color = my_colors$primary@color))"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"rectangle-sides","dir":"Articles","previous_headings":"","what":"Rectangle sides","title":"Rectangles","text":"side rectangle can extracted. example, north side segment: Figure 9: north side rectangle","code":"r1@side@north #> <ggdiagram::ob_segment> #> @ p1: <ggdiagram::ob_point> #>  @ x: num 0 #>  @ y: num 2 #> @ p2: <ggdiagram::ob_point> #>  @ x: num 4 #>  @ y: num 2 rc_plot +    r1@side@north |>     set_props(color = my_colors$secondary@color, linewidth = 2) +   r1@north@label(label = \"North Side\",                  vjust = -.1,                   size = 20,                  color = my_colors$secondary)"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"rounded-corners","dir":"Articles","previous_headings":"","what":"Rounded corners","title":"Rectangles","text":"@radius property controls radius rounded corners. must length 1. can given ggplot2::unit numeric value. numeric, understood proportion plot area width. Rounding affect location corners. Figure 10: Specify rectangle rounded corners","code":"ggplot() +   coord_equal(xlim = c(-4, 4),                ylim = c(-4, 4)) +   ob_rectangle(     ob_point(0, 0),     width = 6,     height = 4,     radius = unit(5, \"mm\")   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/rectangles.html","id":"rotation-angle","dir":"Articles","previous_headings":"","what":"Rotation angle","title":"Rectangles","text":"possible rotate rectangle. Figure 11: rectangle rotated 30° Many angles can specified : Figure 12: Many rotated rectangles","code":"ggplot() +   coord_equal(xlim = c(-4, 4),                ylim = c(-4, 4)) +   ob_rectangle(     center = ob_point(0, 0),     width = 6,     height = 2,     angle = 30,     radius = unit(3, \"mm\")   ) # Angles th <- degree(seq(0, 355, 5)) # Radius of middle space r_middle <- sqrt(2) # Rectangle width w <- 4 - r_middle  ggplot() +   coord_equal(xlim = c(-4, 4),                ylim = c(-4, 4)) +   ob_rectangle(     center = ob_polar(theta = th,                     r = w / 2 + r_middle),     width = w,     height = .15,     angle = th,     color = NA,     fill = hcl(th@degree)   )"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Segments","text":"avoid repetitive code, make base plot:","code":"library(ggdiagram) library(ggplot2) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggtext) library(ggarrow) library(arrowheadr) my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Segments","text":"","code":"library(ggdiagram) library(ggplot2) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggtext) library(ggarrow) library(arrowheadr)"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"base-plot","dir":"Articles","previous_headings":"","what":"Base Plot","title":"Segments","text":"avoid repetitive code, make base plot:","code":"my_font <- \"Roboto Condensed\" my_font_size <- 20 my_point_size <- 2 my_arrowhead <- arrowheadr::arrow_head_deltoid(d = 2.3, n = 100)  # my_colors <- viridis::viridis(2, begin = .25, end = .5) my_colors <- c(\"#3B528B\", \"#21908C\")  theme_set(   theme_minimal(     base_size = my_font_size,     base_family = my_font) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5)))  bp <- ggdiagram(   font_family = my_font,   font_size = my_font_size,   point_size = my_point_size,   linewidth = .5,   theme_function = theme_minimal,   axis.title.x =  element_text(face = \"italic\"),   axis.title.y = element_text(     face = \"italic\",     angle = 0,     hjust = .5,     vjust = .5)) +   scale_x_continuous(labels = signs_centered,                      limits = c(-4, 4)) +   scale_y_continuous(labels = signs::signs,                      limits = c(-4, 4))"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"specifying-a-segment","dir":"Articles","previous_headings":"","what":"Specifying a segment","title":"Segments","text":"segment portion line two points. Figure 1: Plotting segment endpoints","code":"p1 <- ob_point(-3,-1) p2 <- ob_point(3,3) s1 <- ob_segment(p1, p2) bp + s1 + p1 + p2"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"styling-a-segment","dir":"Articles","previous_headings":"","what":"Styling a segment","title":"Segments","text":"primary options styling segment alpha, color, linetype, linewidth. However, can take style ggarrow::geom_arrow_segment sure properties can set, see @aesthetics@style slot. Styles can specified segment created.  Styles can modified segment created:  .geom function passes style arguments ggarrow::geom_arrow_segment function without modifying segment’s style property: Figure 2: Make s1 appear red temporarily using .geom function alternative, geom property function calls .geom. Figure 3: Make s1 appear red temporarily via geom property verify s1 changed color: Figure 4: `s1 object changed “pipe-friendly” way modify ggdiagram object use S7’s set_props function, re-exported ggdiagram sake convenience. Like .geom, function modify s1, unlike .geom, set_props can used save new object specified modifications assigning new variable. , .geom creates ggplot2 geom, whereas set_props create modified ggdiagram object (S7 class).","code":"s1@aesthetics@style #>  [1] \"alpha\"            \"arrow_head\"       \"arrow_fins\"       \"arrowhead_length\" #>  [5] \"color\"            \"length_head\"      \"length_fins\"      \"lineend\"          #>  [9] \"linejoin\"         \"linewidth\"        \"linewidth_fins\"   \"linewidth_head\"   #> [13] \"linetype\"         \"resect\"           \"resect_fins\"      \"resect_head\"      #> [17] \"stroke_color\"     \"stroke_width\" s2 <- ob_segment(p1,p2, color = \"green4\") bp + s2 s2@linewidth <- 3 bp + s2 bp +   as.geom(s1, color = \"red4\") bp + s1@geom(color = \"blue3\") bp + s1 bp +   s1 |>     set_props(color = \"red\")"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"features-of-a-segment","dir":"Articles","previous_headings":"","what":"Features of a segment","title":"Segments","text":"Alternately: line passes segment contains information segment, slope, intercept, angle. access line passes points: Figure 5: Line passing segment default, midpoint function’s position argument .5, finds point halfway point segment: Figure 6: Midpoint segment find midpoint 25% distance endpoints segment: Figure 7: Midpoint Multiple midpoints can specified: Figure 8: Selecting multiple midpoints quick way get endpoints segment specify “midpoints” positions 0 1: Figure 9: Selecting segment’s endpoints via midpoint property.","code":"s1@distance #> [1] 7.211103 distance(s1) #> [1] 7.211103 s1@line #> <ggdiagram::ob_line> #> @ slope     : num 0.667 #> @ intercept : num 1 #> @ xintercept: num -1.5 s1@line@slope #> [1] 0.6666667 s1@line@intercept #> [1] 1 s1@line@angle #> 34° bp +   s1@line |> set_props(color = \"royalblue4\") +   s1@midpoint(position = c(0,1))@label(     polar_just = ob_polar(s1@line@angle + degree(90), 1.5),      plot_point = TRUE) +   ob_label(c(equation(s1@line),            paste0(\"Distance = \", round(s1@distance, 2))),          center = midpoint(s1),          vjust = c(-.2, 1.1),          angle = s1@line@angle) s1@midpoint() #> <ggdiagram::ob_point> #> @ x: num 0 #> @ y: num 1 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics bp +   s1 +   s1@midpoint()@label(\"Midpoint\", hjust = 0, vjust = 1) +   s1@midpoint(c(0, .5, 1))@label(plot_point = TRUE,                              hjust = 1,                              vjust = 0) s1@midpoint(position = .25) #> <ggdiagram::ob_point> #> @ x: num -1.5 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics bp +   s1 +   {p25 <- s1@midpoint(.25)} +   p25@label(     label = c(       p25@auto_label,       \"Midpoint a quarter the<br>way between endpoints\"     ),     vjust = c(0, 1),     hjust = c(1, 0)   ) +   s1@midpoint(c(0, 1))@label(plot_point = TRUE,                              hjust = 1,                              vjust = 0) bp +    s1 +      s1@midpoint(seq(0,1,.2)) bp +    s1 +    s1@midpoint(c(0,1))"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"distance-between-points","dir":"Articles","previous_headings":"","what":"Distance between points","title":"Segments","text":"Alternately:","code":"s1@distance #> [1] 7.211103 distance(s1) #> [1] 7.211103"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"line-passing-through-the-segment","dir":"Articles","previous_headings":"","what":"Line passing through the segment","title":"Segments","text":"line passes segment contains information segment, slope, intercept, angle. access line passes points: Figure 5: Line passing segment","code":"s1@line #> <ggdiagram::ob_line> #> @ slope     : num 0.667 #> @ intercept : num 1 #> @ xintercept: num -1.5 s1@line@slope #> [1] 0.6666667 s1@line@intercept #> [1] 1 s1@line@angle #> 34° bp +   s1@line |> set_props(color = \"royalblue4\") +   s1@midpoint(position = c(0,1))@label(     polar_just = ob_polar(s1@line@angle + degree(90), 1.5),      plot_point = TRUE) +   ob_label(c(equation(s1@line),            paste0(\"Distance = \", round(s1@distance, 2))),          center = midpoint(s1),          vjust = c(-.2, 1.1),          angle = s1@line@angle)"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"midpoints","dir":"Articles","previous_headings":"","what":"Midpoints","title":"Segments","text":"default, midpoint function’s position argument .5, finds point halfway point segment: Figure 6: Midpoint segment find midpoint 25% distance endpoints segment: Figure 7: Midpoint Multiple midpoints can specified: Figure 8: Selecting multiple midpoints quick way get endpoints segment specify “midpoints” positions 0 1: Figure 9: Selecting segment’s endpoints via midpoint property.","code":"s1@midpoint() #> <ggdiagram::ob_point> #> @ x: num 0 #> @ y: num 1 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics bp +   s1 +   s1@midpoint()@label(\"Midpoint\", hjust = 0, vjust = 1) +   s1@midpoint(c(0, .5, 1))@label(plot_point = TRUE,                              hjust = 1,                              vjust = 0) s1@midpoint(position = .25) #> <ggdiagram::ob_point> #> @ x: num -1.5 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics bp +   s1 +   {p25 <- s1@midpoint(.25)} +   p25@label(     label = c(       p25@auto_label,       \"Midpoint a quarter the<br>way between endpoints\"     ),     vjust = c(0, 1),     hjust = c(1, 0)   ) +   s1@midpoint(c(0, 1))@label(plot_point = TRUE,                              hjust = 1,                              vjust = 0) bp +    s1 +      s1@midpoint(seq(0,1,.2)) bp +    s1 +    s1@midpoint(c(0,1))"},{"path":"https://wjschne.github.io/ggdiagram/articles/segments.html","id":"segment-chains","dir":"Articles","previous_headings":"","what":"Segment chains","title":"Segments","text":"point object multiple points placed p1 slot p2 slot left empty, series segments chained together created. Figure 10: Chained segments","code":"bp +    ob_segment(ob_point(c(-4, -2, -1, 2,  4),                  c(-2,  1, -2, 3, -3)))"},{"path":"https://wjschne.github.io/ggdiagram/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"W. Joel Schneider. Author, maintainer.","code":""},{"path":"https://wjschne.github.io/ggdiagram/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schneider W (2025). ggdiagram: Object-Oriented Diagram Plots ggplot2. R package version 0.0.0.9000, https://wjschne.github.io/ggdiagram/, https://github.com/wjschne/ggdiagram.","code":"@Manual{,   title = {ggdiagram: Object-Oriented Diagram Plots with ggplot2},   author = {W. Joel Schneider},   year = {2025},   note = {R package version 0.0.0.9000,     https://wjschne.github.io/ggdiagram/},   url = {https://github.com/wjschne/ggdiagram}, }"},{"path":"https://wjschne.github.io/ggdiagram/index.html","id":"ggdiagram","dir":"","previous_headings":"","what":"Object-Oriented Diagram Plots with ggplot2","title":"Object-Oriented Diagram Plots with ggplot2","text":"ggdiagram package takes object-oriented approach making diagrams plots results using ggplot2. package still experimental, functions likely change many ways. Every time run speed bumps inconveniences use program practice, adapt anticipate user needs. motivation making ggdiagram find way approach functionality TikZ flexibility convenience R. ggdiagram package built atop S7 integrated ggplot2, making heavy use ggtext, ggforce, ggarrow. ggdiagram package replacement standard ggplot2 functions. underlying grammar ggplot2 well designed visualizing data. ggdiagram functions best suited creating small number visual objects interrelate. anything, can thought extensions ggplot2::annotate.","code":""},{"path":"https://wjschne.github.io/ggdiagram/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Object-Oriented Diagram Plots with ggplot2","text":"can install development version ggdiagram like :","code":"remotes::install_github(\"wjschne/ggdiagram\")"},{"path":"https://wjschne.github.io/ggdiagram/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Object-Oriented Diagram Plots with ggplot2","text":"@fig_example, create circle object ob_circle rectangle object ob_rectangle, placing rectangle .5 units separation two objects. ggdiagram function wrapper ggplot, sets defaults (e.g., theme_void, coord_equal, fonts, line size, etc.). ob_* functions methods can added ggplot. hood, first converted appropriate geom added ggplot object. case, ob_circle converted ggforce:geom_circle, ob_rectangle converted ggforce::geom_shape. connect function connects circle rectangle edges arrow (via ggarrow::geom_arrow_segment).  Figure 1: Connecting circle square arrow.","code":"library(ggdiagram) c1 <- ob_circle(radius = 1 / sqrt(pi))  r2 <- ob_rectangle() |>   place(from = c1,         where = \"right\",          sep = .5)  ggdiagram() +   c1 +   r2 +   connect(c1, r2)"},{"path":[]},{"path":"https://wjschne.github.io/ggdiagram/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://wjschne.github.io/ggdiagram/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":null,"dir":"Reference","previous_headings":"","what":"as.geom function — as.geom","title":"as.geom function — as.geom","text":"Converts ggdiagram shape ggplot2 geom","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.geom function — as.geom","text":"","code":"as.geom(x, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.geom function — as.geom","text":"x shape ... <dynamic-dots> Pass arguments ggplot2::geom_point","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as.geom function — as.geom","text":"geom","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"as.geom function — as.geom","text":"Usually .geom function necessary call explicitly called whenever ggdiagram shape added ggplot. However, complex situations (e.g., making function assembles many objects), sometimes necessary make call explicitly.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/as.geom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"as.geom function — as.geom","text":"","code":"library(ggplot2) c1 <- ob_circle(radius = 3) ggplot() +   as.geom(c1, fill = \"black\") +   coord_equal()"},{"path":"https://wjschne.github.io/ggdiagram/reference/bind.html","id":null,"dir":"Reference","previous_headings":"","what":"bind method — bind","title":"bind method — bind","text":"bind method","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bind method — bind","text":"","code":"bind(x, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bind method — bind","text":"x list objects bind ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/bind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bind method — bind","text":"bound object class x (list objects x contains objects different types)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/bind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bind method — bind","text":"","code":"bind(c(ob_point(1,2), ob_point(3,4))) #> <ggdiagram::ob_point> #> @ x: num [1:2] 1 3 #> @ y: num [1:2] 2 4 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics bind(c(ob_circle(ob_point(0,0), radius = 1),        ob_circle(ob_point(1,1), radius = 2))) #> <ggdiagram::ob_circle> #> @ center: <ggdiagram::ob_point> #>  @ x: num [1:2] 0 1 #>  @ y: num [1:2] 0 1 #> @ radius: num [1:2] 1 2 #> Other props: label, alpha, color, fill, linewidth, linetype, #>              n, area, bounding_box, circumference, diameter, #>              length, polygon, style, tibble, geom, arc, angle_at, #>              normal_at, tangent_at, place, point_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/circle_from_3_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a circle from 3 points — circle_from_3_points","title":"Get a circle from 3 points — circle_from_3_points","text":"Get circle 3 points","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/circle_from_3_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a circle from 3 points — circle_from_3_points","text":"","code":"circle_from_3_points(p1, p2 = NULL, p3 = NULL, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/circle_from_3_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a circle from 3 points — circle_from_3_points","text":"p1 ob_point length 1 length 3 p2 ob_point length 1 NULL p3 ob_point length 1 NULL","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/circle_from_3_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a circle from 3 points — circle_from_3_points","text":"ob_point object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/circle_from_3_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a circle from 3 points — circle_from_3_points","text":"","code":"p1 <- ob_point(1,1) p2 <- ob_point(2,4) p3 <- ob_point(5,3) circle_from_3_points(p1,p2, p3) #> <ggdiagram::ob_circle> #> @ center: <ggdiagram::ob_point> #>  @ x: num 3 #>  @ y: num 2 #> @ radius: num 2.24 #> Other props: label, alpha, color, fill, linewidth, linetype, #>              n, area, bounding_box, circumference, diameter, #>              length, polygon, style, tibble, geom, arc, angle_at, #>              normal_at, tangent_at, place, point_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/class_aesthetics_list.html","id":null,"dir":"Reference","previous_headings":"","what":"class_aesthetics_list — class_aesthetics_list","title":"class_aesthetics_list — class_aesthetics_list","text":"list aesthetics","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_aesthetics_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"class_aesthetics_list — class_aesthetics_list","text":"","code":"class_aesthetics_list(   geom = function() NULL,   style = character(0),   mappable_bare = character(0),   mappable_identity = character(0),   not_mappable = character(0),   required_aes = character(0),   omit_names = character(0),   inherit.aes = logical(0) )"},{"path":"https://wjschne.github.io/ggdiagram/reference/class_aesthetics_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"class_aesthetics_list — class_aesthetics_list","text":"geom geom function converts shape style vector style names mappable_bare aesthetics used without identity function mappable_identity aesthetics used identity function not_mappable properties mapped thus created separate geom objects unique combination values required_aes required aesthetics omit_names properties ignored inherit.aes Defaults FALSE ggdiagram objects interfere layers ggplot","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_aesthetics_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"class_aesthetics_list — class_aesthetics_list","text":"class_aesthetics_list object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":null,"dir":"Reference","previous_headings":"","what":"color class — class_color","title":"color class — class_color","text":"color class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"color class — class_color","text":"","code":"class_color(   color = character(0),   hue = NULL,   saturation = NULL,   brightness = NULL,   alpha = NULL )"},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"color class — class_color","text":"color character (R color hex code) hue get set hue color (.e., h hsv model) saturation get set saturation color (.e., s hsv model) brightness get set brightness color (.e., v hsv model) alpha get set transparency color","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"color class — class_color","text":"class_color object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"color class — class_color","text":"transparentize function return color new transparency (.e., alpha) lighten function return lighter color darken function return darker color","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/class_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"color class — class_color","text":"","code":"mycolor <- class_color(\"blue\") mycolor #> <ggdiagram::class_color> #> @ color: chr \"#0000FFFF\" #> Other props: transparentize, lighten, darken, saturation, hue, #>              brightness, alpha, red, green, blue, mean, tex # Display html hexcode c(mycolor) #> [1] \"#0000FFFF\" # Set transparency mycolor@transparentize(.5) #> <ggdiagram::class_color> #> @ color: chr \"#0000FF80\" #> Other props: transparentize, lighten, darken, saturation, hue, #>              brightness, alpha, red, green, blue, mean, tex # Lighten color mycolor@lighten(.5) #> <ggdiagram::class_color> #> @ color: chr \"#8282FFFF\" #> Other props: transparentize, lighten, darken, saturation, hue, #>              brightness, alpha, red, green, blue, mean, tex # Darken color mycolor@darken(.5) #> <ggdiagram::class_color> #> @ color: chr \"#000082FF\" #> Other props: transparentize, lighten, darken, saturation, hue, #>              brightness, alpha, red, green, blue, mean, tex"},{"path":"https://wjschne.github.io/ggdiagram/reference/connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrow connect one shape to another — connect","title":"Arrow connect one shape to another — connect","text":"Arrow connect one shape another","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrow connect one shape to another — connect","text":"","code":"connect(x, y, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrow connect one shape to another — connect","text":"x first shape object y second shape object ... <dynamic-dots> Arguments passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrow connect one shape to another — connect","text":"ob_segment","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance between 2 points — distance","title":"Calculate distance between 2 points — distance","text":"Calculate distance 2 points","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance between 2 points — distance","text":"","code":"distance(x, y, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance between 2 points — distance","text":"x point, line, segment, circle object y point, line, circle object ... <dynamic-dots> used","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance between 2 points — distance","text":"numeric","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distance between 2 points — distance","text":"","code":"# Distance between two objects p1 <- ob_point(0, 0) p2 <- ob_point(3, 4) distance(p1, p2) #> [1] 5  # Distance between the endpoints of a segment s1 <- ob_segment(p1, p2) distance(s1) #> [1] 5  # Distance between a point and a line l1 <- ob_line(slope = 0, intercept = 1) distance(p1, l1) #> [1] 1  # Shortest distance between the edges of 2 circles c1 <- ob_circle(p1, radius = 1) c2 <- ob_circle(p2, radius = 2) distance(c1, c2) #> [1] 2"},{"path":"https://wjschne.github.io/ggdiagram/reference/equation.html","id":null,"dir":"Reference","previous_headings":"","what":"equation — equation","title":"equation — equation","text":"Get equation object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/equation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"equation — equation","text":"","code":"equation(x, type = c(\"y\", \"general\", \"parametric\"), digits = 2)"},{"path":"https://wjschne.github.io/ggdiagram/reference/equation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"equation — equation","text":"x object type equation type. Can y, general, parametric digits rounding digits","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/equation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"equation — equation","text":"string","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/get_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Get object data with styles in a tibble — get_tibble","title":"Get object data with styles in a tibble — get_tibble","text":"Get object data styles tibble Get object data tibble, filling missing styles defaults","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/get_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get object data with styles in a tibble — get_tibble","text":"","code":"get_tibble(x)  get_tibble_defaults(x)"},{"path":"https://wjschne.github.io/ggdiagram/reference/get_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get object data with styles in a tibble — get_tibble","text":"x object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/get_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get object data with styles in a tibble — get_tibble","text":"tibble tibble","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ggdiagram-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggdiagram: Object-Oriented Diagram Plots with ggplot2 — ggdiagram-package","title":"ggdiagram: Object-Oriented Diagram Plots with ggplot2 — ggdiagram-package","text":"ggdiagram package creates path diagrams object-oriented approach plots diagrams ggplot2.","code":""},{"path":[]},{"path":"https://wjschne.github.io/ggdiagram/reference/ggdiagram-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggdiagram: Object-Oriented Diagram Plots with ggplot2 — ggdiagram-package","text":"Maintainer: W. Joel Schneider w.joel.schneider@gmail.com (ORCID)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ggdiagram.html","id":null,"dir":"Reference","previous_headings":"","what":"ggdiagram function — ggdiagram","title":"ggdiagram function — ggdiagram","text":"convenient way specify geom defaults","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ggdiagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggdiagram function — ggdiagram","text":"","code":"ggdiagram(   font_family = \"sans\",   font_size = 11,   linewidth = 0.5,   point_size = 1.5,   rect_linewidth = linewidth,   theme_function = ggplot2::theme_void,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ggdiagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggdiagram function — ggdiagram","text":"font_family font family font_size font size points linewidth line width point_size point size rect_linewidth line rectangles theme_function ggplot2 theme ... <dynamic-dots> Arguments sent ggplot2::theme","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ggdiagram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggdiagram function — ggdiagram","text":"ggplot function","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ggdiagram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggdiagram function — ggdiagram","text":"","code":"ggdiagram() + ob_circle()"},{"path":"https://wjschne.github.io/ggdiagram/reference/inside.html","id":null,"dir":"Reference","previous_headings":"","what":"is an ob_point inside a shape ? — inside","title":"is an ob_point inside a shape ? — inside","text":"ob_point inside shape ?","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/inside.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is an ob_point inside a shape ? — inside","text":"","code":"inside(x, y)"},{"path":"https://wjschne.github.io/ggdiagram/reference/inside.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is an ob_point inside a shape ? — inside","text":"x object y object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/inside.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is an ob_point inside a shape ? — inside","text":"logical","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection.html","id":null,"dir":"Reference","previous_headings":"","what":"intersection of 2 objects (e.g., lines) — intersection","title":"intersection of 2 objects (e.g., lines) — intersection","text":"intersection 2 objects (e.g., lines)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"intersection of 2 objects (e.g., lines) — intersection","text":"","code":"intersection(x, y, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"intersection of 2 objects (e.g., lines) — intersection","text":"x object y object ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"intersection of 2 objects (e.g., lines) — intersection","text":"shape object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the angle of the intersection of two objects — intersection_angle","title":"Compute the angle of the intersection of two objects — intersection_angle","text":"Compute angle intersection two objects","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the angle of the intersection of two objects — intersection_angle","text":"","code":"intersection_angle(x, y)"},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the angle of the intersection of two objects — intersection_angle","text":"x object (point, segment, line) y object (point, segment, line)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/intersection_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the angle of the intersection of two objects — intersection_angle","text":"ob_angle object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/label_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic label for objects — label_object","title":"Automatic label for objects — label_object","text":"Automatic label objects","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/label_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic label for objects — label_object","text":"","code":"label_object(object, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/label_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic label for objects — label_object","text":"object object ... <dynamic-dots> additional arguments","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/label_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic label for objects — label_object","text":"string","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/latex_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Surround TeX expression with a color command — latex_color","title":"Surround TeX expression with a color command — latex_color","text":"Surround TeX expression color command","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/latex_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Surround TeX expression with a color command — latex_color","text":"","code":"latex_color(x, color)"},{"path":"https://wjschne.github.io/ggdiagram/reference/latex_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Surround TeX expression with a color command — latex_color","text":"x TeX expression color color","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/latex_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Surround TeX expression with a color command — latex_color","text":"string","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/latex_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Surround TeX expression with a color command — latex_color","text":"","code":"latex_color(\"X^2\", \"red\") #> [1] \"{\\\\color[HTML]{FF0000} X^2}\""},{"path":"https://wjschne.github.io/ggdiagram/reference/map_ob.html","id":null,"dir":"Reference","previous_headings":"","what":"map_ob — map_ob","title":"map_ob — map_ob","text":"wrapper purrr::map. takes ggdiagram object multiple elements, applies function element within object, returns ggdiagram object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/map_ob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"map_ob — map_ob","text":"","code":"map_ob(.x, .f, ..., .progress = FALSE)"},{"path":"https://wjschne.github.io/ggdiagram/reference/map_ob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"map_ob — map_ob","text":".x ggdiagram object .f function returns ggdiagram object ... <dynamic-dots> arguments passed .f .progress display progress TRUE","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/map_ob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"map_ob — map_ob","text":"ggdiagram object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/mean_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Average across colors — mean_color","title":"Average across colors — mean_color","text":"Average across colors","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/mean_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average across colors — mean_color","text":"","code":"mean_color(x)"},{"path":"https://wjschne.github.io/ggdiagram/reference/mean_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average across colors — mean_color","text":"x color","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/mean_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average across colors — mean_color","text":"string","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/mean_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average across colors — mean_color","text":"","code":"mean_color(c(\"red\", \"violet\")) #> [1] \"#FF547D\""},{"path":"https://wjschne.github.io/ggdiagram/reference/midpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Get one or more points at positions from 0 to 1 — midpoint","title":"Get one or more points at positions from 0 to 1 — midpoint","text":"possible get one midpoint specifying position vector length greater 1. Position values outside 0 1 usually work, outside object.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/midpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get one or more points at positions from 0 to 1 — midpoint","text":"","code":"midpoint(x, y, position = 0.5, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/midpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get one or more points at positions from 0 to 1 — midpoint","text":"x object y object (can omitted segments arcs) position numeric vector. 0 start, 1 end. Defaults .5 ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/midpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get one or more points at positions from 0 to 1 — midpoint","text":"ob_point","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/nudge.html","id":null,"dir":"Reference","previous_headings":"","what":"Move an object — nudge","title":"Move an object — nudge","text":"Move object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/nudge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move an object — nudge","text":"","code":"nudge(object, x, y, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/nudge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move an object — nudge","text":"object object x nudge right left y nudge ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/nudge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move an object — nudge","text":"object class object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/nudge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move an object — nudge","text":"","code":"ob_circle() |> nudge(x = 2) #> <ggdiagram::ob_circle> #> @ center: <ggdiagram::ob_point> #>  @ x: num 2 #>  @ y: num 0 #> @ radius: num 1 #> Other props: label, alpha, color, fill, linewidth, linetype, #>              n, area, bounding_box, circumference, diameter, #>              length, polygon, style, tibble, geom, arc, angle_at, #>              normal_at, tangent_at, place, point_at, aesthetics # Alternative to nudge: ob_circle() + ob_point(2, 0) #> <ggdiagram::ob_circle> #> @ center: <ggdiagram::ob_point> #>  @ x: num 2 #>  @ y: num 0 #> @ radius: num 1 #> Other props: label, alpha, color, fill, linewidth, linetype, #>              n, area, bounding_box, circumference, diameter, #>              length, polygon, style, tibble, geom, arc, angle_at, #>              normal_at, tangent_at, place, point_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_angle — ob_angle","title":"ob_angle — ob_angle","text":"Creates angle metric radians, degrees, turns.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_angle — ob_angle","text":"","code":"ob_angle(   .data = numeric(0),   degree = integer(0),   radian = integer(0),   turn = integer(0) )  degree(degree = numeric(0))  radian(radian = numeric(0))  turn(turn = numeric(0))"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_angle — ob_angle","text":".data real number indicating number turns. degree degrees radian radians turn proportion full turns circle (1 turn = 2 * pi radians) positive angle negative, adds full turn ensure angle positive negative angle positive, subtracts full turn ensure angle negative","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_angle — ob_angle","text":"ob_angle","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ob_angle — ob_angle","text":"Angles turns can real number, degrees displayed values -360 +360, radians -2pi +2pi.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ob_angle — ob_angle","text":"","code":"# Three Different ways to make a right angle ## 90 degrees degree(90) #> 90°   ## half pi radians radian(.5 * pi) #> 0.5π   ## A quarter turn turn(.25) #> .25   # Operations degree(30) + degree(20) #> 50°  degree(350) + degree(20) #> 10°  degree(30) - degree(30) #> 0°  degree(30) - degree(50) #> −20°   degree(30) * 2 #> 60°  degree(30) / 3 #> 10°   radian(1) + 1 # added or subtracted numbers are radians #> 0.64π  degree(10) + 10 # added or subtracted numbers are degrees #> 20°  turn(.25) + .25 # added or subtracted numbers are turns #> .50   # Trigonometric functions work as normal sin(degree(30)) #> [1] 0.5 cos(degree(30)) #> [1] 0.8660254 tan(degree(30)) #> [1] 0.5773503"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_arc class — ob_arc","title":"ob_arc class — ob_arc","text":"Create arcs wedges","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_arc class — ob_arc","text":"","code":"ob_arc(   center = ob_point(0, 0),   radius = 1,   start = 0,   end = 0,   label = character(0),   start_point = class_missing,   end_point = class_missing,   n = 360,   type = \"arc\",   alpha = numeric(0),   arrow_head = list(),   arrow_fins = list(),   arrowhead_length = numeric(0),   length_head = numeric(0),   length_fins = numeric(0),   color = character(0),   fill = character(0),   lineend = numeric(0),   linejoin = numeric(0),   linewidth = numeric(0),   linewidth_fins = numeric(0),   linewidth_head = numeric(0),   linetype = numeric(0),   resect = numeric(0),   resect_fins = numeric(0),   resect_head = numeric(0),   stroke_color = character(0),   stroke_width = numeric(0),   style = class_missing,   x0 = numeric(0),   y0 = numeric(0),   ... )  ob_wedge(   center = ob_point(0, 0),   radius = 1,   start = 0,   end = 0,   label = character(0),   start_point = class_missing,   end_point = class_missing,   n = 360,   type = \"wedge\",   alpha = numeric(0),   arrow_head = list(),   arrow_fins = list(),   arrowhead_length = numeric(0),   length_head = numeric(0),   length_fins = numeric(0),   color = NA,   fill = \"black\",   lineend = numeric(0),   linejoin = numeric(0),   linewidth = numeric(0),   linewidth_fins = numeric(0),   linewidth_head = numeric(0),   linetype = numeric(0),   resect = numeric(0),   resect_fins = numeric(0),   resect_head = numeric(0),   stroke_color = character(0),   stroke_width = numeric(0),   style = class_missing,   x0 = numeric(0),   y0 = numeric(0),   ... )  ob_circular_segment(   center = ob_point(0, 0),   radius = 1,   start = 0,   end = 0,   label = character(0),   start_point = class_missing,   end_point = class_missing,   n = 360,   type = \"segment\",   alpha = numeric(0),   arrow_head = list(),   arrow_fins = list(),   arrowhead_length = numeric(0),   length_head = numeric(0),   length_fins = numeric(0),   color = NA,   fill = \"black\",   lineend = numeric(0),   linejoin = numeric(0),   linewidth = numeric(0),   linewidth_fins = numeric(0),   linewidth_head = numeric(0),   linetype = numeric(0),   resect = numeric(0),   resect_fins = numeric(0),   resect_head = numeric(0),   stroke_color = character(0),   stroke_width = numeric(0),   style = class_missing,   x0 = numeric(0),   y0 = numeric(0),   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_arc class — ob_arc","text":"center point center arc (default = ob_point(0,0)) radius distance center edge arc (default = 1) start start angle (default = 0 degrees) end end angle (default = 0 degrees) label character, angle, label object start_point Specify arc starts. Overrides @center end_point Specify arc ends Overrides @center n number points arc (default = 360) type Type object drawn. Can \"arc\", \"wedge\", \"segment\" alpha numeric value alpha transparency arrow_head 2-column matrix polygon points arrow_fins 2-column matrix polygon points arrowhead_length Determines size arrow ornaments. parameter becomes length parameter ggarrow functions. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. length_head Determines size arrow head. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_fins Determines size arrow fins. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. color character string color fill character string fill color lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linewidth Width lines linewidth_fins Line width arrow fins linewidth_head Line width arrow fins linetype type lines resect numeric(1) denoting millimeters  shorten arrow head fins. resect_fins numeric(1) denoting millimeters  shorten arrow fins resect_head numeric(1) denoting millimeters  shorten arrow head. stroke_color Color point border line stroke_width Stroke width arrows style style object x0 x-coordinate center point. specified, overrides x-coordinate @center. y0 x-coordinate center point. specified, overrides y-coordinate @center. ... <dynamic-dots> arguments passed style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_arc class — ob_arc","text":"ob_arc object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_arc class — ob_arc","text":"aesthetics list information arc's aesthetic properties angle_at function finds angle specified point relation arc's center apothem Distance center chord's midpoint arc_length Distance along arc start_point end_point auto_label Places label arc's midpoint chord ob_segment start_point end_point geom function converts object geom. additional parameters passed ggarrow::geom_arrow. hatch function puts hatch (tally) marks arcs. Often used indicate arcs angle. k parameter controls many hatch marks display. height parameter controls long hatch mark segment . sep parameter controls separation hatch marks k > 2. Additional parameters sent ob_segment. length number arcs arc object midpoint function selects 1 midpoints ob_arc. position argument can 0 1. Additional arguments passed ob_point. point_at function finds point arc specified angle. sagitta ob_segment chord midpoint ob_arc midpoint tangent_at function finds tangent line specified angle. theta interior angle (end - start) tibble Gets tibble (data.frame) containing parameters styles used ggarrow::geom_arrow.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_arc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ob_arc class — ob_arc","text":"","code":"library(ggplot2)  # center point p_center <- ob_point(0,0)  # 90-degree arc a_90 <- ob_arc(  center = p_center,  radius = 6,  start = degree(0),  end = degree(90)  )   # Print arc  a_90 #> <ggdiagram::ob_arc> #> @ center: <ggdiagram::ob_point> #>  @ x: num 0 #>  @ y: num 0 #> @ radius: num 6 #> @ start : <ggdiagram::degree> #>  @ degree: num 0 #> @ end   : <ggdiagram::degree> #>  @ degree: num 90 #> @ theta : <ggdiagram::degree> #>  @ degree: num 90 #> Other props: label, type, alpha, arrow_head, arrow_fins, #>              arrowhead_length, length_head, length_fins, color, #>              fill, lineend, linejoin, linewidth, linewidth_fins, #>              linewidth_head, linetype, n, resect, resect_fins, #>              resect_head, stroke_color, stroke_width, apothem, #>              arc_length, sagitta, bounding_box, circle, chord, #>              length, end_point, polygon, start_point, style, #>              tibble, geom, angle_at, autolabel, hatch, midpoint, #>              normal_at, place, point_at, tangent_at, aesthetics  # Plot arc and its center point ggplot() + coord_equal() + theme_minimal() +  p_center +  a_90"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_array.html","id":null,"dir":"Reference","previous_headings":"","what":"make an array of shapes along a line — ob_array","title":"make an array of shapes along a line — ob_array","text":"make array shapes along line","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make an array of shapes along a line — ob_array","text":"","code":"ob_array(x, k = 2, sep = 1, where = \"east\", anchor = \"center\", ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make an array of shapes along a line — ob_array","text":"x shape k number duplicate shapes make sep separation distance shapes angle named direction (e.g.,northwest, east, , left) anchor bounding box anchor ... <dynamic-dots> properties passed shape","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make an array of shapes along a line — ob_array","text":"array shapes class object passed x","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":null,"dir":"Reference","previous_headings":"","what":"The ob_bezier (i.e., bezier curve) class — ob_bezier","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"ob_bezier specified ob_point object contains least 2 points, start end. \"curve\" actually straight line segment. three points specified, middle point control point, quadratic bezier curve result. Higher-order bezier curves can created control points middle.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"","code":"ob_bezier(   p = class_missing,   label = character(0),   label_sloped = TRUE,   n = 360,   alpha = numeric(0),   arrow_head = class_missing,   arrow_fins = class_missing,   arrowhead_length = numeric(0),   length_head = numeric(0),   length_fins = numeric(0),   color = character(0),   fill = character(0),   lineend = numeric(0),   linejoin = numeric(0),   linewidth = numeric(0),   linewidth_fins = numeric(0),   linewidth_head = numeric(0),   linetype = numeric(0),   resect = numeric(0),   resect_fins = numeric(0),   resect_head = numeric(0),   stroke_color = character(0),   stroke_width = numeric(0),   style = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"p ob_point list ob_points label character, angle, label object label_sloped logical value indicating whether label sloped curve n Number points polygon, circle, arc, ellipse alpha numeric value alpha transparency arrow_head 2-column matrix polygon points arrow_fins 2-column matrix polygon points arrowhead_length Determines size arrow ornaments. parameter becomes length parameter ggarrow functions. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. length_head Determines size arrow head. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_fins Determines size arrow fins. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. color character string color fill character string fill color lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linewidth Width lines linewidth_fins Line width arrow fins linewidth_head Line width arrow fins linetype type lines resect numeric(1) denoting millimeters  shorten arrow head fins. resect_fins numeric(1) denoting millimeters  shorten arrow fins resect_head numeric(1) denoting millimeters  shorten arrow head. stroke_color Color point border line stroke_width Stroke width arrows style Gets sets styles associated ob_beziers ... <dynamic-dots>  properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"ob_bezier object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"wish specify multiple bezier curves, must supply list ob_point objects. plotted, ob_bezier function uses bezier::bezier function create point coordinates curve ggarrow::geom_arrow function create geom.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"length number curves ob_bezier object tibble Gets tibble (data.frame) containing parameters styles used ggarrow::geom_arrow. geom function converts object geom. additional parameters passed ggarrow::geom_arrow. midpoint function selects 1 midpoints ob_bezier. position argument can 0 1. Additional arguments passed ob_point. aesthetics list information ob_bezier's aesthetic properties","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_bezier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The ob_bezier (i.e., bezier curve) class — ob_bezier","text":"","code":"library(ggplot2) control_points <- ob_point(c(0,1,2,4), c(0,4,0,0)) ggplot() +   coord_equal() +   ob_bezier(control_points, color = \"blue\") +   ob_path(control_points, linetype = \"dashed\", linewidth = .5) +   control_points"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_circle class — ob_circle","title":"ob_circle class — ob_circle","text":"ob_circle class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_circle class — ob_circle","text":"","code":"ob_circle(   center = ob_point(0, 0),   radius = 1,   label = character(0),   alpha = numeric(0),   color = character(0),   fill = character(0),   linewidth = numeric(0),   linetype = numeric(0),   n = numeric(0),   style = class_missing,   x0 = numeric(0),   y0 = numeric(0),   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_circle class — ob_circle","text":"center point center circle radius distance center edge circle label character, angle, label object alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines n number points circle (default = 360) style ob_style object x0 x-coordinate center point. specified, overrides x-coordinate @center. y0 x-coordinate center point. specified, overrides y-coordinate @center. ... <dynamic-dots> arguments passed style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_circle class — ob_circle","text":"ob_circle object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_circle class — ob_circle","text":"aesthetics list information circle's aesthetic properties angle_at function finds angle specified point relation circle's center area area circle bounding_box rectangle contains circles circumference circumference circle geom function converts object geom. additional parameters passed ggforce::geom_circle. length number circles circle object normal_at function finds point perpendicular circle specified distance point_at function finds point circle specified angle. polygon tibble containing information create polygon points circle. tangent_at function finds tangent line specified angle. tibble Gets tibble (data.frame) containing parameters styles used ggforce::geom_cirlce.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_circle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ob_circle class — ob_circle","text":"","code":"# specify center point and radius p <- ob_point(0,0) ob_circle(p, radius = 6) #> <ggdiagram::ob_circle> #> @ center: <ggdiagram::ob_point> #>  @ x: num 0 #>  @ y: num 0 #> @ radius: num 6 #> Other props: label, alpha, color, fill, linewidth, linetype, #>              n, area, bounding_box, circumference, diameter, #>              length, polygon, style, tibble, geom, arc, angle_at, #>              normal_at, tangent_at, place, point_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_covariance.html","id":null,"dir":"Reference","previous_headings":"","what":"create double-headed arrow paths indicating variance — ob_covariance","title":"create double-headed arrow paths indicating variance — ob_covariance","text":"create double-headed arrow paths indicating variance","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_covariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create double-headed arrow paths indicating variance — ob_covariance","text":"","code":"ob_covariance(   x,   y,   where = NULL,   bend = 0,   looseness = 1,   arrow_head = arrowheadr::arrow_head_deltoid(d = 2.3, n = 100),   resect = 2,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_covariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create double-headed arrow paths indicating variance — ob_covariance","text":"x object y object exit angle bend Angle control points rotated looseness distance control points ratio distance object's center (e.g., circle radius 1, looseness = 1.5 means control points 1.5 units start end points.) arrow_head 2-column matrix polygon points resect numeric(1) denoting millimeters  shorten arrow head fins. ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_covariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create double-headed arrow paths indicating variance — ob_covariance","text":"ob_bezier object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_ellipse class — ob_ellipse","title":"ob_ellipse class — ob_ellipse","text":"Makes ellipses superellipses","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_ellipse class — ob_ellipse","text":"","code":"ob_ellipse(   center = ob_point(0, 0),   a = 1,   b = a,   angle = 0,   m1 = numeric(0),   m2 = numeric(0),   label = character(0),   alpha = numeric(0),   color = character(0),   fill = character(0),   linewidth = numeric(0),   linetype = numeric(0),   n = numeric(0),   style = class_missing,   x0 = numeric(0),   y0 = numeric(0),   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_ellipse class — ob_ellipse","text":"center point center ellipse. Settable. distance semi-major axis. Settable. b distance semi-minor axis. Settable. angle ellipse rotation. Settable. m1 exponent semi-major axis. Settable. Controls roundedness superellipse m2 exponent semi-minor axis. Settable. default equal m1. different, functions may work expected (e.g., point_at). label character, angle, label object alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines n number points ellipse (default = 360). Settable. style gets sets style parameters x0 x-coordinate center point. specified, overrides x-coordinate @center. y0 x-coordinate center point. specified, overrides y-coordinate @center. ... <dynamic-dots> arguments passed style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_ellipse class — ob_ellipse","text":"ob_ellipse object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_ellipse class — ob_ellipse","text":"length Gets number ellipses tibble Gets tibble (data.frame) containing parameters styles used ggforce::geom_ellipse. geom function converts object geom. additional parameters passed ggforce::geom_ellipse. normal_at function finds point perpendicular ellipse angle theta specified distance. definitional parameter passed point_at function. point supplied instead angle, point projected onto ellipse normal calculated found projected point. point_at function finds point ellipse angle theta. definitional FALSE (default), theta interpreted angle. TRUE, theta parameter definition ellipse polar coordinates. tangent_at function finds tangent line ellipse. Uses point_at find tangent point angle theta returns tangent line point. point supplied instead angle, point projected onto ellipse tangent line found .","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ob_ellipse class — ob_ellipse","text":"","code":"# specify center point and semi-major axes p <- ob_point(0,0) ob_ellipse(p, a = 2, b = 3) #> <ggdiagram::ob_ellipse> #> @ center: <ggdiagram::ob_point> #>  @ x: num 0 #>  @ y: num 0 #> @ a     : num 2 #> @ b     : num 3 #> @ angle : <ggdiagram::radian> #>  @ radian: num 0 #> @ m1    : num 2 #> @ m2    : num 2 #> Other props: label, alpha, color, fill, linewidth, linetype, #>              n, area, bounding_box, focus_1, focus_2, length, #>              perimeter, polygon, style, tibble, angle_at, geom, #>              normal_at, place, point_at, tangent_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_intercept.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_intercept — ob_intercept","title":"ob_intercept — ob_intercept","text":"Triangle polygons used path diagrams.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_intercept.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_intercept — ob_intercept","text":"","code":"ob_intercept(   center = ob_point(0, 0),   width = 1,   label = character(0),   top = class_missing,   left = class_missing,   right = class_missing,   vertex_radius = numeric(0),   alpha = numeric(0),   color = character(0),   fill = character(0),   linewidth = numeric(0),   linetype = numeric(0),   x0 = numeric(0),   y0 = numeric(0),   style = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_intercept.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_intercept — ob_intercept","text":"center point center width length side label character, angle, label object top Top vertex triangle left Left vertex triangle right Right vertex triangle vertex_radius numeric unit vector length one, specifying vertex radius alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines x0 overrides x-coordinate center@x y0 overrides x-coordinate center@y style Gets sets styles associated polygons ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_intercept.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_intercept — ob_intercept","text":"ob_polygon object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_intercept.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_intercept — ob_intercept","text":"length number polygons ob_polygon object tibble Gets tibble (data.frame) containing parameters styles used ggplot2::geom_polygon.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_label.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_label class — ob_label","title":"ob_label class — ob_label","text":"ob_label class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_label class — ob_label","text":"","code":"ob_label(   label = character(0),   center = class_missing,   angle = numeric(0),   alpha = numeric(0),   color = character(0),   family = character(0),   fill = character(0),   fontface = character(0),   hjust = numeric(0),   label.color = character(0),   label.margin = class_margin(ggplot2::margin(1, 1, 1, 1, \"pt\")),   label.padding = class_margin(ggplot2::margin(2, 2, 2, 2, \"pt\")),   label.r = numeric(0),   label.size = numeric(0),   lineheight = numeric(0),   polar_just = numeric(0),   nudge_x = numeric(0),   nudge_y = numeric(0),   size = numeric(0),   straight = logical(0),   text.color = character(0),   vjust = numeric(0),   style = class_missing,   plot_point = FALSE,   position = 0.5,   spacing = numeric(0),   x = class_missing,   y = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_label class — ob_label","text":"label text label center ob_point indicating center label angle angle text alpha numeric value alpha transparency color character string color family font family fill character string fill color fontface Can plain, bold, italic, bold.italic hjust horizontal justification. 0 means left justified, 1 means right justified, 0.5 means horizontally centered label.color Color label outline. label.margin Amount distance around label. Unit vector length four. Usually created ggplot2::margin. label.padding Amount padding around label. Unit vector length four. Usually created ggplot2::margin. label.r Radius rounded corners. Defaults 0.15 lines. label.size Width label outline. lineheight Height line text polar_just angle, polar point, point alters hjust vjust (polar polar_just stored style) nudge_x Horizontal adjustment nudge labels . nudge_y Vertical adjustment nudge labels . size numeric size straight logical. TRUE, make bzpath label text straight instead curved. text.color Color label text. vjust vertical justification. 0 means bottom aligned, 1 means top aligned, 0.5 means vertically centered style style list plot_point plot ob_point (default = FALSE) position position (used conjunction place function) spacing letter spacing labels used ob_path ob_bezier x x-coordinate center point. specified, overrides x-coordinate @center. y x-coordinate center point. specified, overrides y-coordinate @center. ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_label class — ob_label","text":"ob_label object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_latex.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_latex class — ob_latex","title":"ob_latex class — ob_latex","text":"make latex equation","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_latex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_latex class — ob_latex","text":"","code":"ob_latex(   tex = character(0),   center = ob_point(0, 0),   width = numeric(0),   height = numeric(0),   hjust = 0.5,   vjust = 0.5,   angle = 0,   aspect_ratio = 1,   border = numeric(0),   family = character(0),   math_mode = TRUE,   filename = character(0),   color = character(0),   fill = \"white\",   density = 300,   latex_packages = character(0),   preamble = character(0),   force_recompile = TRUE,   delete_files = TRUE )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_latex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_latex class — ob_latex","text":"tex LaTeX equation center ob_point width width (specify width height ) height height (specify width height ) hjust horizontal adjustment. 0 means left justified, 1 means right justified, 0.5 means centered vjust vertical justification. 0 means bottom aligned, 1 means top aligned, 0.5 means vertically centered angle angle text aspect_ratio alters aspect ratio image border border space (points) around image family font family (installed system) plain text math_mode include dollar signs automatically. Set FALSE latex command math mode filename bare file name without extension (e.g., myequation) color set color equation text fill set color background rectangle density image quality (dots per inch) latex_packages load latex packages preamble additional latex commands load preamble force_recompile re-run xelatex even .pdf file exists already","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_latex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_latex class — ob_latex","text":"ob_latex object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_latex.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_latex class — ob_latex","text":"rectangle gets sets rectangle contains image image raster bitmap","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_line.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_line class — ob_line","title":"ob_line class — ob_line","text":"Creates line","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_line class — ob_line","text":"","code":"ob_line(   slope = numeric(0),   intercept = numeric(0),   xintercept = numeric(0),   a = numeric(0),   b = numeric(0),   c = numeric(0),   alpha = numeric(0),   color = character(0),   lineend = numeric(0),   linejoin = numeric(0),   linewidth = numeric(0),   linetype = numeric(0),   style = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_line class — ob_line","text":"slope coefficient y = slope * x + intercept intercept value y x 0 xintercept value x y 0 coefficient general form: * x + b * y + c = 0 b coefficient general form: * x + b * y + c = 0 c constant general form: * x + b * y + c = 0 alpha numeric value alpha transparency color character string color lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linewidth Width lines linetype type lines style style list ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_line class — ob_line","text":"ob_line object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ngon.html","id":null,"dir":"Reference","previous_headings":"","what":"The ob_ngon (regular polygon) class — ob_ngon","title":"The ob_ngon (regular polygon) class — ob_ngon","text":"ngon regular polygon, meaning side equal length. ob_ngon object can specified center, n (number sides), radius, angle. Instead specifying radius, one can specify either side_length length apothem (.e., distance center side's midpoint.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ngon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ob_ngon (regular polygon) class — ob_ngon","text":"","code":"ob_ngon(   center = ob_point(0, 0),   n = 3L,   radius = numeric(0),   angle = 0,   label = character(0),   side_length = numeric(0),   apothem = numeric(0),   vertex_radius = numeric(0),   alpha = numeric(0),   color = character(0),   fill = character(0),   linewidth = numeric(0),   linetype = numeric(0),   style = class_missing,   x0 = numeric(0),   y0 = numeric(0),   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ngon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The ob_ngon (regular polygon) class — ob_ngon","text":"center point center ngon n Number sides radius Distance center vertex angle description label character, angle, label object side_length Distance side apothem Distance center side's midpoint vertex_radius numeric unit vector length one, specifying corner radius alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines style Gets sets styles associated ob_ngon ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ngon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The ob_ngon (regular polygon) class — ob_ngon","text":"ob_ngon object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_ngon.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The ob_ngon (regular polygon) class — ob_ngon","text":"area area ngons ob_ngon object length number ngons ob_ngon object normal_at function finds point perpendicular ngon specified distance perimeter length side segments point_at function finds point ngon specified angle. segments side segments regular polygon tangent_at function finds tangent line specified angle. tibble Gets tibble (data.frame) containing parameters styles used ggforce::geom_shape. vertices points regular polygon","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":null,"dir":"Reference","previous_headings":"","what":"The ob_path class — ob_path","title":"The ob_path class — ob_path","text":"ob_path specified ob_point object contains least 2 points, start end. number intermediate points possible.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ob_path class — ob_path","text":"","code":"ob_path(   p = class_missing,   label = character(0),   alpha = numeric(0),   arrow_head = class_missing,   arrow_fins = class_missing,   arrowhead_length = numeric(0),   length_head = numeric(0),   length_fins = numeric(0),   color = character(0),   fill = character(0),   lineend = numeric(0),   linejoin = numeric(0),   linewidth = numeric(0),   linewidth_fins = numeric(0),   linewidth_head = numeric(0),   linetype = numeric(0),   resect = numeric(0),   resect_fins = numeric(0),   resect_head = numeric(0),   stroke_color = character(0),   stroke_width = numeric(0),   style = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The ob_path class — ob_path","text":"p ob_point list ob_points label character, angle, label object alpha numeric value alpha transparency arrow_head 2-column matrix polygon points arrow_fins 2-column matrix polygon points arrowhead_length Determines size arrow ornaments. parameter becomes length parameter ggarrow functions. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. length_head Determines size arrow head. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_fins Determines size arrow fins. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. color character string color fill character string fill color lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linewidth Width lines linewidth_fins Line width arrow fins linewidth_head Line width arrow fins linetype type lines resect numeric(1) denoting millimeters  shorten arrow head fins. resect_fins numeric(1) denoting millimeters  shorten arrow fins resect_head numeric(1) denoting millimeters  shorten arrow head. stroke_color Color point border line stroke_width Stroke width arrows style Gets sets styles associated paths ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The ob_path class — ob_path","text":"ob_path object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The ob_path class — ob_path","text":"wish specify multiple paths, must supply list ob_point objects. plotted, ob_path function uses ggarrow::geom_arrow function create geom.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_path.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The ob_path class — ob_path","text":"length number paths ob_path object tibble Gets tibble (data.frame) containing parameters styles used ggarrow::geom_arrow.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_point.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_point — ob_point","title":"ob_point — ob_point","text":"Points specified x y coordinates. Polar points ordinary points specified angle (theta) radial distance (r)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_point — ob_point","text":"","code":"ob_point(   x = 0,   y = 0,   alpha = numeric(0),   color = character(0),   fill = character(0),   shape = numeric(0),   size = numeric(0),   stroke = numeric(0),   style = class_missing,   ... )  ob_polar(   theta = class_missing,   r = numeric(0),   alpha = numeric(0),   color = character(0),   fill = character(0),   shape = numeric(0),   size = numeric(0),   stroke = numeric(0),   style = class_missing )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_point — ob_point","text":"x Vector coordinates x-axis (also can take tibble/data.frame 2-column matrix input.) y Vector coordinates y-axis alpha numeric value alpha transparency color character string color fill character string fill color shape Point shape type. Can specified integer (0 25), single character (uses character plotting symbol), . draw smallest rectangle visible (.e., one pixel), NA draw nothing, mapping discrete variable. size numeric size stroke Width point border line style Gets sets styles associated points ... <dynamic-dots> properties passed style theta Angle vector origin ob_point r Radius = Distance origin ob_point","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_point — ob_point","text":"ob_point object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_point.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_point — ob_point","text":"auto_label Gets x y coordinates makes label \"(x,y)\" length number points ob_point object tibble Gets tibble (data.frame) containing parameters styles used ggplot2::geom_point. xy Gets 2-column matrix x y coordinates ob_point object. geom function converts object geom. additional parameters passed ggplot2::geom_point.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"The ob_polygon class — ob_polygon","title":"The ob_polygon class — ob_polygon","text":"polygon specified ob_point contains least 3 points, start end. number intermediate points possible.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ob_polygon class — ob_polygon","text":"","code":"ob_polygon(   p = class_missing,   label = character(0),   vertex_radius = numeric(0),   alpha = numeric(0),   color = character(0),   fill = character(0),   linewidth = numeric(0),   linetype = numeric(0),   style = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The ob_polygon class — ob_polygon","text":"p ob_point list ob_point objects label character, angle, label object vertex_radius numeric unit vector length one, specifying corner radius alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines style Gets sets styles associated polygons ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The ob_polygon class — ob_polygon","text":"ob_polygon object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The ob_polygon class — ob_polygon","text":"wish specify multiple polygons, must supply list ob_points. plotted, ob_polygon function uses ggforce::geom_shape function create geom.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_polygon.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The ob_polygon class — ob_polygon","text":"length number polygons ob_polygon object tibble Gets tibble (data.frame) containing parameters styles used ggforce::geom_shape.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_rectangle.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_rectangle class — ob_rectangle","title":"ob_rectangle class — ob_rectangle","text":"ob_rectangle class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_rectangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_rectangle class — ob_rectangle","text":"","code":"ob_rectangle(   center = class_missing,   width = numeric(0),   height = numeric(0),   east = class_missing,   north = class_missing,   west = class_missing,   south = class_missing,   northeast = class_missing,   northwest = class_missing,   southwest = class_missing,   southeast = class_missing,   angle = numeric(0),   vertex_radius = numeric(0),   label = character(0),   alpha = numeric(0),   color = character(0),   fill = character(0),   linewidth = numeric(0),   linetype = numeric(0),   style = class_missing,   x0 = numeric(0),   y0 = numeric(0),   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_rectangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_rectangle class — ob_rectangle","text":"center point center rectangle width width height height east right middle point north top middle point west left middle point south top middle point northeast upper right point northwest upper left point southwest lower left point southeast lower right point angle angle text vertex_radius numeric unit vector length one, specifying corner radius rounded corners label character, angle, label object alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines style style object x0 overrides x-coordinate center@x y0 overrides y-coordinate center@x ... <dynamic-dots> arguments passed style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_rectangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_rectangle class — ob_rectangle","text":"ob_rectangle object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_rectangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ob_rectangle class — ob_rectangle","text":"","code":"# specify center point p <- ob_point(0,0) ob_rectangle(p, width = 2, height = 2) #> <ggdiagram::ob_rectangle> #> @ center: <ggdiagram::ob_point> #>  @ x: num 0 #>  @ y: num 0 #> @ width : num 2 #> @ height: num 2 #> Other props: label, angle, vertex_radius, alpha, color, fill, #>              linewidth, linetype, area, bounding_box, perimeter, #>              northeast, northwest, southwest, southeast, east, #>              north, west, south, side, length, style, tibble, geom, #>              normal_at, place, point_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_reuleaux.html","id":null,"dir":"Reference","previous_headings":"","what":"Reuleaux polygon — ob_reuleaux","title":"Reuleaux polygon — ob_reuleaux","text":"Reuleaux polygon","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_reuleaux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reuleaux polygon — ob_reuleaux","text":"","code":"ob_reuleaux(   center = ob_point(0, 0),   n = 5,   radius = 1,   angle = 90,   label = character(0),   vertex_radius = numeric(0),   alpha = numeric(0),   color = \"black\",   fill = character(0),   linewidth = numeric(0),   linetype = numeric(0),   style = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_reuleaux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reuleaux polygon — ob_reuleaux","text":"center point center rectangle n Number sides. True Reuleaux polygons odd number sides, Reauleaux-like shapes even number sides possible. radius Distance center vertex angle angle text alpha numeric value alpha transparency color character string color fill character string fill color linewidth Width lines linetype type lines ... <dynamic-dots> unused","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_reuleaux.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reuleaux polygon — ob_reuleaux","text":"ob_reuleaux object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_segment class — ob_segment","title":"ob_segment class — ob_segment","text":"ob_segment class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_segment class — ob_segment","text":"","code":"ob_segment(   p1 = class_missing,   p2 = class_missing,   label = character(0),   alpha = numeric(0),   arrow_head = ggarrow::arrow_head_minimal(90),   arrow_fins = list(),   arrowhead_length = 4,   length_head = numeric(0),   length_fins = numeric(0),   color = character(0),   lineend = numeric(0),   linejoin = numeric(0),   linewidth = numeric(0),   linewidth_fins = numeric(0),   linewidth_head = numeric(0),   linetype = numeric(0),   resect = numeric(0),   resect_fins = numeric(0),   resect_head = numeric(0),   stroke_color = character(0),   stroke_width = numeric(0),   style = class_missing,   x = class_missing,   xend = class_missing,   y = class_missing,   yend = class_missing,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_segment class — ob_segment","text":"p1 starting point p2 end point label character, angle, label object alpha numeric value alpha transparency arrow_head 2-column matrix polygon points arrow_fins 2-column matrix polygon points arrowhead_length Determines size arrow ornaments. parameter becomes length parameter ggarrow functions. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. length_head Determines size arrow head. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_fins Determines size arrow fins. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. color character string color lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linewidth Width lines linewidth_fins Line width arrow fins linewidth_head Line width arrow fins linetype type lines resect numeric(1) denoting millimeters  shorten arrow head fins. resect_fins numeric(1) denoting millimeters  shorten arrow fins resect_head numeric(1) denoting millimeters  shorten arrow head. stroke_color Color point border line stroke_width Stroke width arrows style style list x overrides x-coordinate p1 xend overrides y-coordinate p1 y overrides x-coordinate p2 yend overrides y-coordinate p2 ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_segment class — ob_segment","text":"ob_segment object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_segment.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ob_segment class — ob_segment","text":"geom function converts object geom. additional parameters passed ggarrow::geom_arrow_segment. hatch function puts hatch (tally) marks segments. Often used indicate segments length. k parameter controls many hatch marks display. height parameter controls long hatch mark segment . sep parameter controls separation hatch marks k > 2. Additional parameters sent ob_segment. midpoint function selects 1 midpoints ob_segment. position argument can 0 1. Additional arguments passed ob_point. nudge function move segment x y units.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_shape_list.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_shape_list — ob_shape_list","title":"ob_shape_list — ob_shape_list","text":"makes heterogeneous list different ggdiagram objects","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_shape_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_shape_list — ob_shape_list","text":"","code":"ob_shape_list(.data = list())"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_shape_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_shape_list — ob_shape_list","text":".data list objects","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_shape_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_shape_list — ob_shape_list","text":"object ob_shape_list class. List objects can converted geoms","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_style.html","id":null,"dir":"Reference","previous_headings":"","what":"ob_style class — ob_style","title":"ob_style class — ob_style","text":"ob_style class","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ob_style class — ob_style","text":"","code":"ob_style(   alpha = numeric(0),   angle = numeric(0),   arrow_head = list(),   arrow_fins = list(),   arrow_mid = list(),   color = character(0),   family = character(0),   fill = character(0),   fontface = character(0),   hjust = numeric(0),   justify = numeric(0),   label.color = character(0),   label.margin = list(),   label.padding = list(),   label.r = numeric(0),   label.size = numeric(0),   arrowhead_length = numeric(0),   length_head = numeric(0),   length_fins = numeric(0),   length_mid = numeric(0),   lineend = numeric(0),   lineheight = numeric(0),   linejoin = numeric(0),   linewidth_fins = numeric(0),   linewidth_head = numeric(0),   linewidth = numeric(0),   linetype = numeric(0),   n = numeric(0),   nudge_x = numeric(0),   nudge_y = numeric(0),   polar_just = numeric(0),   resect = numeric(0),   resect_fins = numeric(0),   resect_head = numeric(0),   shape = numeric(0),   size = numeric(0),   size.unit = numeric(0),   straight = logical(0),   stroke = numeric(0),   stroke_color = character(0),   stroke_width = numeric(0),   text.color = character(0),   vjust = numeric(0),   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ob_style class — ob_style","text":"alpha numeric value alpha transparency angle angle text arrow_head 2-column matrix polygon points arrow_fins 2-column matrix polygon points arrow_mid 2-column matrix polygon points color character string color family font family fill character string fill color fontface Can plain, bold, italic, bold.italic hjust horizontal justification. 0 means left justified, 1 means right justified, 0.5 means horizontally centered justify numeric(1) 0 1 control arrows drawn relative path's endpoints. value 0 sets arrow's tips path's end, whereas value 1 sets arrow's base path's end. ggarrow. label.color Color label outline. label.margin Amount distance around label. Unit vector length four. Usually created ggplot2::margin. label.padding Amount padding around label. Unit vector length four. Usually created ggplot2::margin. label.r Radius rounded corners. Defaults 0.15 lines. label.size Width label outline. arrowhead_length Determines size arrow ornaments. parameter becomes length parameter ggarrow functions. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. length_head Determines size arrow head. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_fins Determines size arrow fins. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. length_mid Determines size middle arrows. Numeric values set ornament size relative linewidth. unit value sets ornament size absolute manner. ggarrow. lineend Line end style (round, butt, square). lineheight Height line text linejoin Line join style (round, mitre, bevel). linewidth_fins Line width arrow fins linewidth_head Line width arrow fins linewidth Width lines linetype type lines n Number points polygon, circle, arc, ellipse nudge_x Horizontal adjustment nudge labels . nudge_y Vertical adjustment nudge labels . polar_just angle, polar point, point alters hjust vjust (polar polar_just stored style) resect numeric(1) denoting millimeters  shorten arrow head fins. resect_fins numeric(1) denoting millimeters  shorten arrow fins resect_head numeric(1) denoting millimeters  shorten arrow head. shape Point shape type. Can specified integer (0 25), single character (uses character plotting symbol), . draw smallest rectangle visible (.e., one pixel), NA draw nothing, mapping discrete variable. size numeric size size.unit size aesthetic interpreted: points (\"pt\"), millimeters (\"mm\"), centimeters (\"cm\"), inches (\"\"), picas (\"pc\"). straight logical. TRUE, make bzpath label text straight instead curved. stroke Width point border line stroke_color Color point border line stroke_width Stroke width arrows text.color Color label text. vjust vertical justification. 0 means bottom aligned, 1 means top aligned, 0.5 means vertically centered ... <dynamic-dots> unused","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ob_style class — ob_style","text":"ob_style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"create double-headed arrow paths indicating variance — ob_variance","title":"create double-headed arrow paths indicating variance — ob_variance","text":"create double-headed arrow paths indicating variance","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create double-headed arrow paths indicating variance — ob_variance","text":"","code":"ob_variance(   x,   where = \"north\",   theta = 50,   bend = 0,   looseness = 1,   arrow_head = arrowheadr::arrow_head_deltoid(d = 2.3, n = 100),   resect = 2,   ... )"},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create double-headed arrow paths indicating variance — ob_variance","text":"x object angle named direction (e.g.,northwest, east, , left) theta angle width bend Angle control points rotated looseness distance control points ratio distance object's center (e.g., circle radius 1, looseness = 1.5 means control points 1.5 units start end points.) arrow_head 2-column matrix polygon points resect numeric(1) denoting millimeters  shorten arrow head fins. ... <dynamic-dots> properties passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/ob_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create double-headed arrow paths indicating variance — ob_variance","text":"Returns object type ob_bezier","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/perpendicular_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Find point perpendicular to 2 points — perpendicular_point","title":"Find point perpendicular to 2 points — perpendicular_point","text":"Find point perpendicular 2 points","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/perpendicular_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find point perpendicular to 2 points — perpendicular_point","text":"","code":"e1 %|-% e2  e1 %-|% e2"},{"path":"https://wjschne.github.io/ggdiagram/reference/perpendicular_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find point perpendicular to 2 points — perpendicular_point","text":"e1 first ob_point e2 second ob_point","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/perpendicular_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find point perpendicular to 2 points — perpendicular_point","text":"ob_point object ob_point object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/perpendicular_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find point perpendicular to 2 points — perpendicular_point","text":"","code":"x <- ob_point(0,0) y <- ob_point(1,1) # Find point perpendicular to x and y going vertically first x %|-% y #> <ggdiagram::ob_point> #> @ x: num 0 #> @ y: num 1 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics # Find point perpendicular to x and y going horizontally first x %-|% y #> <ggdiagram::ob_point> #> @ x: num 1 #> @ y: num 0 #> Other props: alpha, color, fill, shape, size, stroke, auto_label, #>              bounding_box, centroid, length, r, theta, style, #>              tibble, xy, geom, label, place, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://wjschne.github.io/ggdiagram/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/place.html","id":null,"dir":"Reference","previous_headings":"","what":"Place an object a specified distance from another object — place","title":"Place an object a specified distance from another object — place","text":"Place object specified distance another object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/place.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Place an object a specified distance from another object — place","text":"","code":"place(x, from, where = \"right\", sep = 1, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/place.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Place an object a specified distance from another object — place","text":"x shape object shape x placed relation named direction, angle, number (degrees) sep separation distance ... <dynamic-dots> Arguments passed style","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/place.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Place an object a specified distance from another object — place","text":"object class x","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/polar2just.html","id":null,"dir":"Reference","previous_headings":"","what":"polar2just — polar2just","title":"polar2just — polar2just","text":"Convert hjust vjust parameters polar coordinates","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/polar2just.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"polar2just — polar2just","text":"","code":"polar2just(x, multiplier = 1.2, axis = c(\"h\", \"v\"))"},{"path":"https://wjschne.github.io/ggdiagram/reference/polar2just.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"polar2just — polar2just","text":"x angle multiplier distance axis vertical (v) horizontal (h)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/polar2just.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"polar2just — polar2just","text":"ob_angle object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Find projection of a point on an object (e.g., line or segment) — projection","title":"Find projection of a point on an object (e.g., line or segment) — projection","text":"Find projection point object (e.g., line segment)","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find projection of a point on an object (e.g., line or segment) — projection","text":"","code":"projection(p, object, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find projection of a point on an object (e.g., line or segment) — projection","text":"p ob_point object object (e.g., line segment) ... <dynamic-dots> arguments passed style object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find projection of a point on an object (e.g., line or segment) — projection","text":"ob_point","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/redefault.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a variant of a function with alternate defaults — redefault","title":"Make a variant of a function with alternate defaults — redefault","text":"Makes copy function new defaults. Similar purrr::partial except arguments new defaults still accept input.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/redefault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a variant of a function with alternate defaults — redefault","text":"","code":"redefault(.f, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/redefault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a variant of a function with alternate defaults — redefault","text":".f function ... <dynamic-dots> new defaults","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/redefault.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a variant of a function with alternate defaults — redefault","text":"function","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/redefault.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a variant of a function with alternate defaults — redefault","text":"","code":"squircle <- redefault(ob_ellipse, m1 = 4) squircle(a = 3) #> <ggdiagram::ob_ellipse> #> @ center: <ggdiagram::ob_point> #>  @ x: num 0 #>  @ y: num 0 #> @ a     : num 3 #> @ b     : num 3 #> @ angle : <ggdiagram::radian> #>  @ radian: num 0 #> @ m1    : num 4 #> @ m2    : num 4 #> Other props: label, alpha, color, fill, linewidth, linetype, #>              n, area, bounding_box, focus_1, focus_2, length, #>              perimeter, polygon, style, tibble, angle_at, geom, #>              normal_at, place, point_at, tangent_at, aesthetics"},{"path":"https://wjschne.github.io/ggdiagram/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. S7 prop, props, set_props","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/resect.html","id":null,"dir":"Reference","previous_headings":"","what":"resect — resect","title":"resect — resect","text":"Shorten segments","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/resect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resect — resect","text":"","code":"resect(x, distance, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/resect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"resect — resect","text":"x object distance resect distance ... <dynamic-dots> properties passed style resect numeric distance","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/resect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"resect — resect","text":"object class x","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/rotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate an object in 2 dimensions — rotate","title":"Rotate an object in 2 dimensions — rotate","text":"Rotate object 2 dimensions","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/rotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate an object in 2 dimensions — rotate","text":"","code":"rotate(x, theta, ..., origin = ob_point(0, 0))"},{"path":"https://wjschne.github.io/ggdiagram/reference/rotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate an object in 2 dimensions — rotate","text":"x object theta angle ... <dynamic-dots> properties passed style origin length 2 vector  point rotation occurs","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/rotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate an object in 2 dimensions — rotate","text":"shape object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/round_probability.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability rounding — round_probability","title":"Probability rounding — round_probability","text":"Rounds significant digits, removing leading zeros.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/round_probability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability rounding — round_probability","text":"","code":"round_probability(   p,   accuracy = 0.01,   digits = NULL,   max_digits = NULL,   remove_leading_zero = TRUE,   round_zero_one = TRUE,   phantom_text = NULL,   phantom_color = NULL )"},{"path":"https://wjschne.github.io/ggdiagram/reference/round_probability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability rounding — round_probability","text":"p probability accuracy smallest increment digits significant digits max_digits maximum rounding digits remove_leading_zero remove leading zero round_zero_one round 0 1 phantom_text invisible text inserted right phantom_color color phantom text","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/round_probability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability rounding — round_probability","text":"character vector","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/round_probability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability rounding — round_probability","text":"","code":"round_probability(c(0, .0012, .012, .12, .99, .992, .9997, 1), digits = 2) #> [1] \"0\"     \".0012\" \".012\"  \".12\"   \".99\"   \".992\"  \".9997\" \"1\""},{"path":"https://wjschne.github.io/ggdiagram/reference/signs_centered.html","id":null,"dir":"Reference","previous_headings":"","what":"Centering signed numbers — signs_centered","title":"Centering signed numbers — signs_centered","text":"wrapper function signs::signs function. adds space right side negative numbers appear minus sign affect number's centering.","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/signs_centered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centering signed numbers — signs_centered","text":"","code":"signs_centered(x, space = \" \", encoding = \"UTF-8\", ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/signs_centered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centering signed numbers — signs_centered","text":"x numeric vector space character added negative numbers (defaults UTF-8 figure space) encoding type encoding (defaults UTF-8) ... parameters passed signs:signs","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/signs_centered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centering signed numbers — signs_centered","text":"vector numbers converted characters","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/signs_centered.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centering signed numbers — signs_centered","text":"","code":"library(ggplot2) d <- data.frame(x = -4:0, y = -4:0) # In these 2 plots, Compare the centering of the negative numbers on the x-axis ggplot(d, aes(x,y))  ggplot(d, aes(x,y)) +   scale_x_continuous(labels = signs_centered)"},{"path":"https://wjschne.github.io/ggdiagram/reference/subscript.html","id":null,"dir":"Reference","previous_headings":"","what":"Create subscripts — subscript","title":"Create subscripts — subscript","text":"Create subscripts Create superscript","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/subscript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create subscripts — subscript","text":"","code":"subscript(x, subscript = seq(length(x)))  superscript(x, superscript = seq(length(x)))"},{"path":"https://wjschne.github.io/ggdiagram/reference/subscript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create subscripts — subscript","text":"x string subscript subscript superscript superscript","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/subscript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create subscripts — subscript","text":"text string","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/subscript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create subscripts — subscript","text":"","code":"subscript(\"X\", 1:3) #> [1] \"X<sub>1<\/sub>\" \"X<sub>2<\/sub>\" \"X<sub>3<\/sub>\" superscript(c(\"A\", \"B\"), 2) #> [1] \"A<sup>2<\/sup>\" \"B<sup>2<\/sup>\""},{"path":"https://wjschne.github.io/ggdiagram/reference/unbind.html","id":null,"dir":"Reference","previous_headings":"","what":"unbind — unbind","title":"unbind — unbind","text":"Converts object k elements list k objects","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/unbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unbind — unbind","text":"","code":"unbind(x, ...)"},{"path":"https://wjschne.github.io/ggdiagram/reference/unbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unbind — unbind","text":"x object","code":""},{"path":"https://wjschne.github.io/ggdiagram/reference/unbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unbind — unbind","text":"list objects, length 1","code":""}]
